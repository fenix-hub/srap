
SRAP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a6c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000484  08007c40  08007c40  00017c40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080c4  080080c4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080080c4  080080c4  000180c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080080cc  080080cc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080cc  080080cc  000180cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080080d0  080080d0  000180d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080080d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  200001dc  080082b0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003f4  080082b0  000203f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010492  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002478  00000000  00000000  0003069e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef8  00000000  00000000  00032b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e10  00000000  00000000  00033a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000330f  00000000  00000000  00034820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011e29  00000000  00000000  00037b2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df7bc  00000000  00000000  00049958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00129114  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005100  00000000  00000000  00129164  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007c24 	.word	0x08007c24

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08007c24 	.word	0x08007c24

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eec:	b590      	push	{r4, r7, lr}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ef2:	f000 fddf 	bl	8001ab4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ef6:	f000 f841 	bl	8000f7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000efa:	f000 fa39 	bl	8001370 <MX_GPIO_Init>
  MX_DMA_Init();
 8000efe:	f000 fa17 	bl	8001330 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000f02:	f000 f9eb 	bl	80012dc <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000f06:	f000 f8a5 	bl	8001054 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000f0a:	f000 f8f5 	bl	80010f8 <MX_ADC2_Init>
  MX_TIM1_Init();
 8000f0e:	f000 f945 	bl	800119c <MX_TIM1_Init>

  while(1) {
	  sprintf(
	    msg,
		"%u => %.2f \r\n",
		read_feedback(),
 8000f12:	f000 fab9 	bl	8001488 <read_feedback>
 8000f16:	4603      	mov	r3, r0
	  sprintf(
 8000f18:	461c      	mov	r4, r3
		map(read_feedback(), (float) 4000, (float) 1000, 0.0, 180.0)
 8000f1a:	f000 fab5 	bl	8001488 <read_feedback>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	ee07 3a90 	vmov	s15, r3
 8000f24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f28:	ed9f 2a0e 	vldr	s4, [pc, #56]	; 8000f64 <main+0x78>
 8000f2c:	eddf 1a0e 	vldr	s3, [pc, #56]	; 8000f68 <main+0x7c>
 8000f30:	ed9f 1a0e 	vldr	s2, [pc, #56]	; 8000f6c <main+0x80>
 8000f34:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8000f70 <main+0x84>
 8000f38:	eeb0 0a67 	vmov.f32	s0, s15
 8000f3c:	f000 fad9 	bl	80014f2 <map>
 8000f40:	ee10 3a10 	vmov	r3, s0
	  sprintf(
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff fb1f 	bl	8000588 <__aeabi_f2d>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	e9cd 2300 	strd	r2, r3, [sp]
 8000f52:	4622      	mov	r2, r4
 8000f54:	4907      	ldr	r1, [pc, #28]	; (8000f74 <main+0x88>)
 8000f56:	4808      	ldr	r0, [pc, #32]	; (8000f78 <main+0x8c>)
 8000f58:	f004 fbfa 	bl	8005750 <siprintf>
	  );
	  console_log(msg);
 8000f5c:	4806      	ldr	r0, [pc, #24]	; (8000f78 <main+0x8c>)
 8000f5e:	f000 fa7d 	bl	800145c <console_log>
	  sprintf(
 8000f62:	e7d6      	b.n	8000f12 <main+0x26>
 8000f64:	43340000 	.word	0x43340000
 8000f68:	00000000 	.word	0x00000000
 8000f6c:	447a0000 	.word	0x447a0000
 8000f70:	457a0000 	.word	0x457a0000
 8000f74:	08007c40 	.word	0x08007c40
 8000f78:	20000374 	.word	0x20000374

08000f7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b094      	sub	sp, #80	; 0x50
 8000f80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f82:	f107 031c 	add.w	r3, r7, #28
 8000f86:	2234      	movs	r2, #52	; 0x34
 8000f88:	2100      	movs	r1, #0
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f003 ff6e 	bl	8004e6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f90:	f107 0308 	add.w	r3, r7, #8
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	607b      	str	r3, [r7, #4]
 8000fa4:	4b29      	ldr	r3, [pc, #164]	; (800104c <SystemClock_Config+0xd0>)
 8000fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa8:	4a28      	ldr	r2, [pc, #160]	; (800104c <SystemClock_Config+0xd0>)
 8000faa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fae:	6413      	str	r3, [r2, #64]	; 0x40
 8000fb0:	4b26      	ldr	r3, [pc, #152]	; (800104c <SystemClock_Config+0xd0>)
 8000fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb8:	607b      	str	r3, [r7, #4]
 8000fba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	603b      	str	r3, [r7, #0]
 8000fc0:	4b23      	ldr	r3, [pc, #140]	; (8001050 <SystemClock_Config+0xd4>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000fc8:	4a21      	ldr	r2, [pc, #132]	; (8001050 <SystemClock_Config+0xd4>)
 8000fca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fce:	6013      	str	r3, [r2, #0]
 8000fd0:	4b1f      	ldr	r3, [pc, #124]	; (8001050 <SystemClock_Config+0xd4>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fd8:	603b      	str	r3, [r7, #0]
 8000fda:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fe4:	2310      	movs	r3, #16
 8000fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fec:	2300      	movs	r3, #0
 8000fee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ff0:	2308      	movs	r3, #8
 8000ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000ff4:	2354      	movs	r3, #84	; 0x54
 8000ff6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001000:	2302      	movs	r3, #2
 8001002:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001004:	f107 031c 	add.w	r3, r7, #28
 8001008:	4618      	mov	r0, r3
 800100a:	f002 faad 	bl	8003568 <HAL_RCC_OscConfig>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001014:	f000 fa68 	bl	80014e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001018:	230f      	movs	r3, #15
 800101a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800101c:	2302      	movs	r3, #2
 800101e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001020:	2300      	movs	r3, #0
 8001022:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001024:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001028:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800102a:	2300      	movs	r3, #0
 800102c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800102e:	f107 0308 	add.w	r3, r7, #8
 8001032:	2102      	movs	r1, #2
 8001034:	4618      	mov	r0, r3
 8001036:	f001 ff4d 	bl	8002ed4 <HAL_RCC_ClockConfig>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001040:	f000 fa52 	bl	80014e8 <Error_Handler>
  }
}
 8001044:	bf00      	nop
 8001046:	3750      	adds	r7, #80	; 0x50
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40023800 	.word	0x40023800
 8001050:	40007000 	.word	0x40007000

08001054 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800105a:	463b      	mov	r3, r7
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001066:	4b21      	ldr	r3, [pc, #132]	; (80010ec <MX_ADC1_Init+0x98>)
 8001068:	4a21      	ldr	r2, [pc, #132]	; (80010f0 <MX_ADC1_Init+0x9c>)
 800106a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800106c:	4b1f      	ldr	r3, [pc, #124]	; (80010ec <MX_ADC1_Init+0x98>)
 800106e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001072:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001074:	4b1d      	ldr	r3, [pc, #116]	; (80010ec <MX_ADC1_Init+0x98>)
 8001076:	2200      	movs	r2, #0
 8001078:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800107a:	4b1c      	ldr	r3, [pc, #112]	; (80010ec <MX_ADC1_Init+0x98>)
 800107c:	2200      	movs	r2, #0
 800107e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001080:	4b1a      	ldr	r3, [pc, #104]	; (80010ec <MX_ADC1_Init+0x98>)
 8001082:	2201      	movs	r2, #1
 8001084:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001086:	4b19      	ldr	r3, [pc, #100]	; (80010ec <MX_ADC1_Init+0x98>)
 8001088:	2200      	movs	r2, #0
 800108a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800108e:	4b17      	ldr	r3, [pc, #92]	; (80010ec <MX_ADC1_Init+0x98>)
 8001090:	2200      	movs	r2, #0
 8001092:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001094:	4b15      	ldr	r3, [pc, #84]	; (80010ec <MX_ADC1_Init+0x98>)
 8001096:	4a17      	ldr	r2, [pc, #92]	; (80010f4 <MX_ADC1_Init+0xa0>)
 8001098:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800109a:	4b14      	ldr	r3, [pc, #80]	; (80010ec <MX_ADC1_Init+0x98>)
 800109c:	2200      	movs	r2, #0
 800109e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010a0:	4b12      	ldr	r3, [pc, #72]	; (80010ec <MX_ADC1_Init+0x98>)
 80010a2:	2201      	movs	r2, #1
 80010a4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010a6:	4b11      	ldr	r3, [pc, #68]	; (80010ec <MX_ADC1_Init+0x98>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010ae:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <MX_ADC1_Init+0x98>)
 80010b0:	2201      	movs	r2, #1
 80010b2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010b4:	480d      	ldr	r0, [pc, #52]	; (80010ec <MX_ADC1_Init+0x98>)
 80010b6:	f000 fd6f 	bl	8001b98 <HAL_ADC_Init>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80010c0:	f000 fa12 	bl	80014e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80010c4:	230a      	movs	r3, #10
 80010c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010c8:	2301      	movs	r3, #1
 80010ca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010cc:	2300      	movs	r3, #0
 80010ce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010d0:	463b      	mov	r3, r7
 80010d2:	4619      	mov	r1, r3
 80010d4:	4805      	ldr	r0, [pc, #20]	; (80010ec <MX_ADC1_Init+0x98>)
 80010d6:	f000 ff0d 	bl	8001ef4 <HAL_ADC_ConfigChannel>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80010e0:	f000 fa02 	bl	80014e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010e4:	bf00      	nop
 80010e6:	3710      	adds	r7, #16
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	200001f8 	.word	0x200001f8
 80010f0:	40012000 	.word	0x40012000
 80010f4:	0f000001 	.word	0x0f000001

080010f8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010fe:	463b      	mov	r3, r7
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800110a:	4b21      	ldr	r3, [pc, #132]	; (8001190 <MX_ADC2_Init+0x98>)
 800110c:	4a21      	ldr	r2, [pc, #132]	; (8001194 <MX_ADC2_Init+0x9c>)
 800110e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001110:	4b1f      	ldr	r3, [pc, #124]	; (8001190 <MX_ADC2_Init+0x98>)
 8001112:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001116:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001118:	4b1d      	ldr	r3, [pc, #116]	; (8001190 <MX_ADC2_Init+0x98>)
 800111a:	2200      	movs	r2, #0
 800111c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800111e:	4b1c      	ldr	r3, [pc, #112]	; (8001190 <MX_ADC2_Init+0x98>)
 8001120:	2200      	movs	r2, #0
 8001122:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001124:	4b1a      	ldr	r3, [pc, #104]	; (8001190 <MX_ADC2_Init+0x98>)
 8001126:	2200      	movs	r2, #0
 8001128:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800112a:	4b19      	ldr	r3, [pc, #100]	; (8001190 <MX_ADC2_Init+0x98>)
 800112c:	2200      	movs	r2, #0
 800112e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001132:	4b17      	ldr	r3, [pc, #92]	; (8001190 <MX_ADC2_Init+0x98>)
 8001134:	2200      	movs	r2, #0
 8001136:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001138:	4b15      	ldr	r3, [pc, #84]	; (8001190 <MX_ADC2_Init+0x98>)
 800113a:	4a17      	ldr	r2, [pc, #92]	; (8001198 <MX_ADC2_Init+0xa0>)
 800113c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800113e:	4b14      	ldr	r3, [pc, #80]	; (8001190 <MX_ADC2_Init+0x98>)
 8001140:	2200      	movs	r2, #0
 8001142:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001144:	4b12      	ldr	r3, [pc, #72]	; (8001190 <MX_ADC2_Init+0x98>)
 8001146:	2201      	movs	r2, #1
 8001148:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800114a:	4b11      	ldr	r3, [pc, #68]	; (8001190 <MX_ADC2_Init+0x98>)
 800114c:	2200      	movs	r2, #0
 800114e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001152:	4b0f      	ldr	r3, [pc, #60]	; (8001190 <MX_ADC2_Init+0x98>)
 8001154:	2201      	movs	r2, #1
 8001156:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001158:	480d      	ldr	r0, [pc, #52]	; (8001190 <MX_ADC2_Init+0x98>)
 800115a:	f000 fd1d 	bl	8001b98 <HAL_ADC_Init>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001164:	f000 f9c0 	bl	80014e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001168:	230b      	movs	r3, #11
 800116a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800116c:	2301      	movs	r3, #1
 800116e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001170:	2300      	movs	r3, #0
 8001172:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001174:	463b      	mov	r3, r7
 8001176:	4619      	mov	r1, r3
 8001178:	4805      	ldr	r0, [pc, #20]	; (8001190 <MX_ADC2_Init+0x98>)
 800117a:	f000 febb 	bl	8001ef4 <HAL_ADC_ConfigChannel>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001184:	f000 f9b0 	bl	80014e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001188:	bf00      	nop
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000240 	.word	0x20000240
 8001194:	40012100 	.word	0x40012100
 8001198:	0f000001 	.word	0x0f000001

0800119c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b096      	sub	sp, #88	; 0x58
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011a2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]
 80011ac:	609a      	str	r2, [r3, #8]
 80011ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]
 80011c4:	609a      	str	r2, [r3, #8]
 80011c6:	60da      	str	r2, [r3, #12]
 80011c8:	611a      	str	r2, [r3, #16]
 80011ca:	615a      	str	r2, [r3, #20]
 80011cc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011ce:	1d3b      	adds	r3, r7, #4
 80011d0:	2220      	movs	r2, #32
 80011d2:	2100      	movs	r1, #0
 80011d4:	4618      	mov	r0, r3
 80011d6:	f003 fe49 	bl	8004e6c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011da:	4b3e      	ldr	r3, [pc, #248]	; (80012d4 <MX_TIM1_Init+0x138>)
 80011dc:	4a3e      	ldr	r2, [pc, #248]	; (80012d8 <MX_TIM1_Init+0x13c>)
 80011de:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 30-1;
 80011e0:	4b3c      	ldr	r3, [pc, #240]	; (80012d4 <MX_TIM1_Init+0x138>)
 80011e2:	221d      	movs	r2, #29
 80011e4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e6:	4b3b      	ldr	r3, [pc, #236]	; (80012d4 <MX_TIM1_Init+0x138>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 56000-1;
 80011ec:	4b39      	ldr	r3, [pc, #228]	; (80012d4 <MX_TIM1_Init+0x138>)
 80011ee:	f64d 22bf 	movw	r2, #55999	; 0xdabf
 80011f2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f4:	4b37      	ldr	r3, [pc, #220]	; (80012d4 <MX_TIM1_Init+0x138>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011fa:	4b36      	ldr	r3, [pc, #216]	; (80012d4 <MX_TIM1_Init+0x138>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001200:	4b34      	ldr	r3, [pc, #208]	; (80012d4 <MX_TIM1_Init+0x138>)
 8001202:	2200      	movs	r2, #0
 8001204:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001206:	4833      	ldr	r0, [pc, #204]	; (80012d4 <MX_TIM1_Init+0x138>)
 8001208:	f002 fc4c 	bl	8003aa4 <HAL_TIM_Base_Init>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001212:	f000 f969 	bl	80014e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001216:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800121a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800121c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001220:	4619      	mov	r1, r3
 8001222:	482c      	ldr	r0, [pc, #176]	; (80012d4 <MX_TIM1_Init+0x138>)
 8001224:	f002 fda8 	bl	8003d78 <HAL_TIM_ConfigClockSource>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800122e:	f000 f95b 	bl	80014e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001232:	4828      	ldr	r0, [pc, #160]	; (80012d4 <MX_TIM1_Init+0x138>)
 8001234:	f002 fc85 	bl	8003b42 <HAL_TIM_PWM_Init>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800123e:	f000 f953 	bl	80014e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001242:	2300      	movs	r3, #0
 8001244:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001246:	2300      	movs	r3, #0
 8001248:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800124a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800124e:	4619      	mov	r1, r3
 8001250:	4820      	ldr	r0, [pc, #128]	; (80012d4 <MX_TIM1_Init+0x138>)
 8001252:	f003 f943 	bl	80044dc <HAL_TIMEx_MasterConfigSynchronization>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800125c:	f000 f944 	bl	80014e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001260:	2360      	movs	r3, #96	; 0x60
 8001262:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001268:	2300      	movs	r3, #0
 800126a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800126c:	2300      	movs	r3, #0
 800126e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001270:	2300      	movs	r3, #0
 8001272:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001274:	2300      	movs	r3, #0
 8001276:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001278:	2300      	movs	r3, #0
 800127a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800127c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001280:	2208      	movs	r2, #8
 8001282:	4619      	mov	r1, r3
 8001284:	4813      	ldr	r0, [pc, #76]	; (80012d4 <MX_TIM1_Init+0x138>)
 8001286:	f002 fcb5 	bl	8003bf4 <HAL_TIM_PWM_ConfigChannel>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001290:	f000 f92a 	bl	80014e8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001294:	2300      	movs	r3, #0
 8001296:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001298:	2300      	movs	r3, #0
 800129a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800129c:	2300      	movs	r3, #0
 800129e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012a0:	2300      	movs	r3, #0
 80012a2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012a4:	2300      	movs	r3, #0
 80012a6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012ac:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012ae:	2300      	movs	r3, #0
 80012b0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012b2:	1d3b      	adds	r3, r7, #4
 80012b4:	4619      	mov	r1, r3
 80012b6:	4807      	ldr	r0, [pc, #28]	; (80012d4 <MX_TIM1_Init+0x138>)
 80012b8:	f003 f98c 	bl	80045d4 <HAL_TIMEx_ConfigBreakDeadTime>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80012c2:	f000 f911 	bl	80014e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012c6:	4803      	ldr	r0, [pc, #12]	; (80012d4 <MX_TIM1_Init+0x138>)
 80012c8:	f000 fa34 	bl	8001734 <HAL_TIM_MspPostInit>

}
 80012cc:	bf00      	nop
 80012ce:	3758      	adds	r7, #88	; 0x58
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	200002e8 	.word	0x200002e8
 80012d8:	40010000 	.word	0x40010000

080012dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012e0:	4b11      	ldr	r3, [pc, #68]	; (8001328 <MX_USART2_UART_Init+0x4c>)
 80012e2:	4a12      	ldr	r2, [pc, #72]	; (800132c <MX_USART2_UART_Init+0x50>)
 80012e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012e6:	4b10      	ldr	r3, [pc, #64]	; (8001328 <MX_USART2_UART_Init+0x4c>)
 80012e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012ee:	4b0e      	ldr	r3, [pc, #56]	; (8001328 <MX_USART2_UART_Init+0x4c>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012f4:	4b0c      	ldr	r3, [pc, #48]	; (8001328 <MX_USART2_UART_Init+0x4c>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012fa:	4b0b      	ldr	r3, [pc, #44]	; (8001328 <MX_USART2_UART_Init+0x4c>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001300:	4b09      	ldr	r3, [pc, #36]	; (8001328 <MX_USART2_UART_Init+0x4c>)
 8001302:	220c      	movs	r2, #12
 8001304:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001306:	4b08      	ldr	r3, [pc, #32]	; (8001328 <MX_USART2_UART_Init+0x4c>)
 8001308:	2200      	movs	r2, #0
 800130a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800130c:	4b06      	ldr	r3, [pc, #24]	; (8001328 <MX_USART2_UART_Init+0x4c>)
 800130e:	2200      	movs	r2, #0
 8001310:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001312:	4805      	ldr	r0, [pc, #20]	; (8001328 <MX_USART2_UART_Init+0x4c>)
 8001314:	f003 f9b0 	bl	8004678 <HAL_UART_Init>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800131e:	f000 f8e3 	bl	80014e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20000330 	.word	0x20000330
 800132c:	40004400 	.word	0x40004400

08001330 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	607b      	str	r3, [r7, #4]
 800133a:	4b0c      	ldr	r3, [pc, #48]	; (800136c <MX_DMA_Init+0x3c>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	4a0b      	ldr	r2, [pc, #44]	; (800136c <MX_DMA_Init+0x3c>)
 8001340:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001344:	6313      	str	r3, [r2, #48]	; 0x30
 8001346:	4b09      	ldr	r3, [pc, #36]	; (800136c <MX_DMA_Init+0x3c>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800134e:	607b      	str	r3, [r7, #4]
 8001350:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001352:	2200      	movs	r2, #0
 8001354:	2100      	movs	r1, #0
 8001356:	2038      	movs	r0, #56	; 0x38
 8001358:	f001 f8d5 	bl	8002506 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800135c:	2038      	movs	r0, #56	; 0x38
 800135e:	f001 f8ee 	bl	800253e <HAL_NVIC_EnableIRQ>

}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40023800 	.word	0x40023800

08001370 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b08a      	sub	sp, #40	; 0x28
 8001374:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001376:	f107 0314 	add.w	r3, r7, #20
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	605a      	str	r2, [r3, #4]
 8001380:	609a      	str	r2, [r3, #8]
 8001382:	60da      	str	r2, [r3, #12]
 8001384:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	613b      	str	r3, [r7, #16]
 800138a:	4b31      	ldr	r3, [pc, #196]	; (8001450 <MX_GPIO_Init+0xe0>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	4a30      	ldr	r2, [pc, #192]	; (8001450 <MX_GPIO_Init+0xe0>)
 8001390:	f043 0304 	orr.w	r3, r3, #4
 8001394:	6313      	str	r3, [r2, #48]	; 0x30
 8001396:	4b2e      	ldr	r3, [pc, #184]	; (8001450 <MX_GPIO_Init+0xe0>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	f003 0304 	and.w	r3, r3, #4
 800139e:	613b      	str	r3, [r7, #16]
 80013a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	60fb      	str	r3, [r7, #12]
 80013a6:	4b2a      	ldr	r3, [pc, #168]	; (8001450 <MX_GPIO_Init+0xe0>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	4a29      	ldr	r2, [pc, #164]	; (8001450 <MX_GPIO_Init+0xe0>)
 80013ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013b0:	6313      	str	r3, [r2, #48]	; 0x30
 80013b2:	4b27      	ldr	r3, [pc, #156]	; (8001450 <MX_GPIO_Init+0xe0>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	60bb      	str	r3, [r7, #8]
 80013c2:	4b23      	ldr	r3, [pc, #140]	; (8001450 <MX_GPIO_Init+0xe0>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	4a22      	ldr	r2, [pc, #136]	; (8001450 <MX_GPIO_Init+0xe0>)
 80013c8:	f043 0301 	orr.w	r3, r3, #1
 80013cc:	6313      	str	r3, [r2, #48]	; 0x30
 80013ce:	4b20      	ldr	r3, [pc, #128]	; (8001450 <MX_GPIO_Init+0xe0>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	60bb      	str	r3, [r7, #8]
 80013d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	607b      	str	r3, [r7, #4]
 80013de:	4b1c      	ldr	r3, [pc, #112]	; (8001450 <MX_GPIO_Init+0xe0>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	4a1b      	ldr	r2, [pc, #108]	; (8001450 <MX_GPIO_Init+0xe0>)
 80013e4:	f043 0302 	orr.w	r3, r3, #2
 80013e8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ea:	4b19      	ldr	r3, [pc, #100]	; (8001450 <MX_GPIO_Init+0xe0>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	607b      	str	r3, [r7, #4]
 80013f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 80013f6:	2200      	movs	r2, #0
 80013f8:	2140      	movs	r1, #64	; 0x40
 80013fa:	4816      	ldr	r0, [pc, #88]	; (8001454 <MX_GPIO_Init+0xe4>)
 80013fc:	f001 fd38 	bl	8002e70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CHANGE_STATE_Pin */
  GPIO_InitStruct.Pin = CHANGE_STATE_Pin;
 8001400:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001404:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001406:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800140a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CHANGE_STATE_GPIO_Port, &GPIO_InitStruct);
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	4619      	mov	r1, r3
 8001416:	4810      	ldr	r0, [pc, #64]	; (8001458 <MX_GPIO_Init+0xe8>)
 8001418:	f001 fb96 	bl	8002b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_LED_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 800141c:	2340      	movs	r3, #64	; 0x40
 800141e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001420:	2301      	movs	r3, #1
 8001422:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001428:	2300      	movs	r3, #0
 800142a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 800142c:	f107 0314 	add.w	r3, r7, #20
 8001430:	4619      	mov	r1, r3
 8001432:	4808      	ldr	r0, [pc, #32]	; (8001454 <MX_GPIO_Init+0xe4>)
 8001434:	f001 fb88 	bl	8002b48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001438:	2200      	movs	r2, #0
 800143a:	2100      	movs	r1, #0
 800143c:	2028      	movs	r0, #40	; 0x28
 800143e:	f001 f862 	bl	8002506 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001442:	2028      	movs	r0, #40	; 0x28
 8001444:	f001 f87b 	bl	800253e <HAL_NVIC_EnableIRQ>

}
 8001448:	bf00      	nop
 800144a:	3728      	adds	r7, #40	; 0x28
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40023800 	.word	0x40023800
 8001454:	40020000 	.word	0x40020000
 8001458:	40020800 	.word	0x40020800

0800145c <console_log>:

/* USER CODE BEGIN 4 */

void console_log(const char* message) {
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) message, strlen(message), HAL_MAX_DELAY);
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f7fe fed3 	bl	8000210 <strlen>
 800146a:	4603      	mov	r3, r0
 800146c:	b29a      	uxth	r2, r3
 800146e:	f04f 33ff 	mov.w	r3, #4294967295
 8001472:	6879      	ldr	r1, [r7, #4]
 8001474:	4803      	ldr	r0, [pc, #12]	; (8001484 <console_log+0x28>)
 8001476:	f003 f94c 	bl	8004712 <HAL_UART_Transmit>
}
 800147a:	bf00      	nop
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20000330 	.word	0x20000330

08001488 <read_feedback>:
		target_angle = max_angle;
	}
	return target_angle;
}

uint16_t read_feedback() {
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc2);
 800148e:	4808      	ldr	r0, [pc, #32]	; (80014b0 <read_feedback+0x28>)
 8001490:	f000 fbc6 	bl	8001c20 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, 100);
 8001494:	2164      	movs	r1, #100	; 0x64
 8001496:	4806      	ldr	r0, [pc, #24]	; (80014b0 <read_feedback+0x28>)
 8001498:	f000 fc94 	bl	8001dc4 <HAL_ADC_PollForConversion>
	uint16_t feedback = (uint16_t) HAL_ADC_GetValue(&hadc2);
 800149c:	4804      	ldr	r0, [pc, #16]	; (80014b0 <read_feedback+0x28>)
 800149e:	f000 fd1c 	bl	8001eda <HAL_ADC_GetValue>
 80014a2:	4603      	mov	r3, r0
 80014a4:	80fb      	strh	r3, [r7, #6]
	return feedback;
 80014a6:	88fb      	ldrh	r3, [r7, #6]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20000240 	.word	0x20000240

080014b4 <HAL_GPIO_EXTI_Callback>:
		emg_dma_complete = 1;
	}

}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == GPIO_PIN_13) {
 80014be:	88fb      	ldrh	r3, [r7, #6]
 80014c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014c4:	d107      	bne.n	80014d6 <HAL_GPIO_EXTI_Callback+0x22>
		if (system_state == CONFIGURATION) {
 80014c6:	4b07      	ldr	r3, [pc, #28]	; (80014e4 <HAL_GPIO_EXTI_Callback+0x30>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d102      	bne.n	80014d6 <HAL_GPIO_EXTI_Callback+0x22>
			system_state = CONTROL;
 80014d0:	4b04      	ldr	r3, [pc, #16]	; (80014e4 <HAL_GPIO_EXTI_Callback+0x30>)
 80014d2:	2203      	movs	r2, #3
 80014d4:	701a      	strb	r2, [r3, #0]
		}
	}

}
 80014d6:	bf00      	nop
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	200003d8 	.word	0x200003d8

080014e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014ec:	b672      	cpsid	i
}
 80014ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014f0:	e7fe      	b.n	80014f0 <Error_Handler+0x8>

080014f2 <map>:
		}
	}
	return max;
}

float map(float val, const float in_min, const float in_max, const float out_min, const float out_max) {
 80014f2:	b480      	push	{r7}
 80014f4:	b087      	sub	sp, #28
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	ed87 0a05 	vstr	s0, [r7, #20]
 80014fc:	edc7 0a04 	vstr	s1, [r7, #16]
 8001500:	ed87 1a03 	vstr	s2, [r7, #12]
 8001504:	edc7 1a02 	vstr	s3, [r7, #8]
 8001508:	ed87 2a01 	vstr	s4, [r7, #4]
	return (val - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800150c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001510:	edd7 7a04 	vldr	s15, [r7, #16]
 8001514:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001518:	edd7 6a01 	vldr	s13, [r7, #4]
 800151c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001520:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001524:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001528:	ed97 7a03 	vldr	s14, [r7, #12]
 800152c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001530:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001534:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001538:	edd7 7a02 	vldr	s15, [r7, #8]
 800153c:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001540:	eeb0 0a67 	vmov.f32	s0, s15
 8001544:	371c      	adds	r7, #28
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
	...

08001550 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	607b      	str	r3, [r7, #4]
 800155a:	4b10      	ldr	r3, [pc, #64]	; (800159c <HAL_MspInit+0x4c>)
 800155c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155e:	4a0f      	ldr	r2, [pc, #60]	; (800159c <HAL_MspInit+0x4c>)
 8001560:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001564:	6453      	str	r3, [r2, #68]	; 0x44
 8001566:	4b0d      	ldr	r3, [pc, #52]	; (800159c <HAL_MspInit+0x4c>)
 8001568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800156e:	607b      	str	r3, [r7, #4]
 8001570:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	603b      	str	r3, [r7, #0]
 8001576:	4b09      	ldr	r3, [pc, #36]	; (800159c <HAL_MspInit+0x4c>)
 8001578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157a:	4a08      	ldr	r2, [pc, #32]	; (800159c <HAL_MspInit+0x4c>)
 800157c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001580:	6413      	str	r3, [r2, #64]	; 0x40
 8001582:	4b06      	ldr	r3, [pc, #24]	; (800159c <HAL_MspInit+0x4c>)
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800158a:	603b      	str	r3, [r7, #0]
 800158c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800158e:	2007      	movs	r0, #7
 8001590:	f000 ffae 	bl	80024f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001594:	bf00      	nop
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	40023800 	.word	0x40023800

080015a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b08c      	sub	sp, #48	; 0x30
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a8:	f107 031c 	add.w	r3, r7, #28
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	60da      	str	r2, [r3, #12]
 80015b6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a46      	ldr	r2, [pc, #280]	; (80016d8 <HAL_ADC_MspInit+0x138>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d158      	bne.n	8001674 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	61bb      	str	r3, [r7, #24]
 80015c6:	4b45      	ldr	r3, [pc, #276]	; (80016dc <HAL_ADC_MspInit+0x13c>)
 80015c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ca:	4a44      	ldr	r2, [pc, #272]	; (80016dc <HAL_ADC_MspInit+0x13c>)
 80015cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015d0:	6453      	str	r3, [r2, #68]	; 0x44
 80015d2:	4b42      	ldr	r3, [pc, #264]	; (80016dc <HAL_ADC_MspInit+0x13c>)
 80015d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015da:	61bb      	str	r3, [r7, #24]
 80015dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	617b      	str	r3, [r7, #20]
 80015e2:	4b3e      	ldr	r3, [pc, #248]	; (80016dc <HAL_ADC_MspInit+0x13c>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	4a3d      	ldr	r2, [pc, #244]	; (80016dc <HAL_ADC_MspInit+0x13c>)
 80015e8:	f043 0304 	orr.w	r3, r3, #4
 80015ec:	6313      	str	r3, [r2, #48]	; 0x30
 80015ee:	4b3b      	ldr	r3, [pc, #236]	; (80016dc <HAL_ADC_MspInit+0x13c>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	f003 0304 	and.w	r3, r3, #4
 80015f6:	617b      	str	r3, [r7, #20]
 80015f8:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = MYOWARE_Pin;
 80015fa:	2301      	movs	r3, #1
 80015fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015fe:	2303      	movs	r3, #3
 8001600:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	2300      	movs	r3, #0
 8001604:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MYOWARE_GPIO_Port, &GPIO_InitStruct);
 8001606:	f107 031c 	add.w	r3, r7, #28
 800160a:	4619      	mov	r1, r3
 800160c:	4834      	ldr	r0, [pc, #208]	; (80016e0 <HAL_ADC_MspInit+0x140>)
 800160e:	f001 fa9b 	bl	8002b48 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001612:	4b34      	ldr	r3, [pc, #208]	; (80016e4 <HAL_ADC_MspInit+0x144>)
 8001614:	4a34      	ldr	r2, [pc, #208]	; (80016e8 <HAL_ADC_MspInit+0x148>)
 8001616:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001618:	4b32      	ldr	r3, [pc, #200]	; (80016e4 <HAL_ADC_MspInit+0x144>)
 800161a:	2200      	movs	r2, #0
 800161c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800161e:	4b31      	ldr	r3, [pc, #196]	; (80016e4 <HAL_ADC_MspInit+0x144>)
 8001620:	2200      	movs	r2, #0
 8001622:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001624:	4b2f      	ldr	r3, [pc, #188]	; (80016e4 <HAL_ADC_MspInit+0x144>)
 8001626:	2200      	movs	r2, #0
 8001628:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800162a:	4b2e      	ldr	r3, [pc, #184]	; (80016e4 <HAL_ADC_MspInit+0x144>)
 800162c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001630:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001632:	4b2c      	ldr	r3, [pc, #176]	; (80016e4 <HAL_ADC_MspInit+0x144>)
 8001634:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001638:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800163a:	4b2a      	ldr	r3, [pc, #168]	; (80016e4 <HAL_ADC_MspInit+0x144>)
 800163c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001640:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001642:	4b28      	ldr	r3, [pc, #160]	; (80016e4 <HAL_ADC_MspInit+0x144>)
 8001644:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001648:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800164a:	4b26      	ldr	r3, [pc, #152]	; (80016e4 <HAL_ADC_MspInit+0x144>)
 800164c:	2200      	movs	r2, #0
 800164e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001650:	4b24      	ldr	r3, [pc, #144]	; (80016e4 <HAL_ADC_MspInit+0x144>)
 8001652:	2200      	movs	r2, #0
 8001654:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001656:	4823      	ldr	r0, [pc, #140]	; (80016e4 <HAL_ADC_MspInit+0x144>)
 8001658:	f000 ff8c 	bl	8002574 <HAL_DMA_Init>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001662:	f7ff ff41 	bl	80014e8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4a1e      	ldr	r2, [pc, #120]	; (80016e4 <HAL_ADC_MspInit+0x144>)
 800166a:	639a      	str	r2, [r3, #56]	; 0x38
 800166c:	4a1d      	ldr	r2, [pc, #116]	; (80016e4 <HAL_ADC_MspInit+0x144>)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001672:	e02c      	b.n	80016ce <HAL_ADC_MspInit+0x12e>
  else if(hadc->Instance==ADC2)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a1c      	ldr	r2, [pc, #112]	; (80016ec <HAL_ADC_MspInit+0x14c>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d127      	bne.n	80016ce <HAL_ADC_MspInit+0x12e>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	613b      	str	r3, [r7, #16]
 8001682:	4b16      	ldr	r3, [pc, #88]	; (80016dc <HAL_ADC_MspInit+0x13c>)
 8001684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001686:	4a15      	ldr	r2, [pc, #84]	; (80016dc <HAL_ADC_MspInit+0x13c>)
 8001688:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800168c:	6453      	str	r3, [r2, #68]	; 0x44
 800168e:	4b13      	ldr	r3, [pc, #76]	; (80016dc <HAL_ADC_MspInit+0x13c>)
 8001690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001692:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001696:	613b      	str	r3, [r7, #16]
 8001698:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	4b0f      	ldr	r3, [pc, #60]	; (80016dc <HAL_ADC_MspInit+0x13c>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	4a0e      	ldr	r2, [pc, #56]	; (80016dc <HAL_ADC_MspInit+0x13c>)
 80016a4:	f043 0304 	orr.w	r3, r3, #4
 80016a8:	6313      	str	r3, [r2, #48]	; 0x30
 80016aa:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <HAL_ADC_MspInit+0x13c>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	f003 0304 	and.w	r3, r3, #4
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO_FEEDBACK_Pin;
 80016b6:	2302      	movs	r3, #2
 80016b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016ba:	2303      	movs	r3, #3
 80016bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVO_FEEDBACK_GPIO_Port, &GPIO_InitStruct);
 80016c2:	f107 031c 	add.w	r3, r7, #28
 80016c6:	4619      	mov	r1, r3
 80016c8:	4805      	ldr	r0, [pc, #20]	; (80016e0 <HAL_ADC_MspInit+0x140>)
 80016ca:	f001 fa3d 	bl	8002b48 <HAL_GPIO_Init>
}
 80016ce:	bf00      	nop
 80016d0:	3730      	adds	r7, #48	; 0x30
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40012000 	.word	0x40012000
 80016dc:	40023800 	.word	0x40023800
 80016e0:	40020800 	.word	0x40020800
 80016e4:	20000288 	.word	0x20000288
 80016e8:	40026410 	.word	0x40026410
 80016ec:	40012100 	.word	0x40012100

080016f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a0b      	ldr	r2, [pc, #44]	; (800172c <HAL_TIM_Base_MspInit+0x3c>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d10d      	bne.n	800171e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	4b0a      	ldr	r3, [pc, #40]	; (8001730 <HAL_TIM_Base_MspInit+0x40>)
 8001708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170a:	4a09      	ldr	r2, [pc, #36]	; (8001730 <HAL_TIM_Base_MspInit+0x40>)
 800170c:	f043 0301 	orr.w	r3, r3, #1
 8001710:	6453      	str	r3, [r2, #68]	; 0x44
 8001712:	4b07      	ldr	r3, [pc, #28]	; (8001730 <HAL_TIM_Base_MspInit+0x40>)
 8001714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800171e:	bf00      	nop
 8001720:	3714      	adds	r7, #20
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	40010000 	.word	0x40010000
 8001730:	40023800 	.word	0x40023800

08001734 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b088      	sub	sp, #32
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173c:	f107 030c 	add.w	r3, r7, #12
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	609a      	str	r2, [r3, #8]
 8001748:	60da      	str	r2, [r3, #12]
 800174a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a12      	ldr	r2, [pc, #72]	; (800179c <HAL_TIM_MspPostInit+0x68>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d11e      	bne.n	8001794 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	60bb      	str	r3, [r7, #8]
 800175a:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <HAL_TIM_MspPostInit+0x6c>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	4a10      	ldr	r2, [pc, #64]	; (80017a0 <HAL_TIM_MspPostInit+0x6c>)
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	6313      	str	r3, [r2, #48]	; 0x30
 8001766:	4b0e      	ldr	r3, [pc, #56]	; (80017a0 <HAL_TIM_MspPostInit+0x6c>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	60bb      	str	r3, [r7, #8]
 8001770:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001772:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001776:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001778:	2302      	movs	r3, #2
 800177a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	2300      	movs	r3, #0
 800177e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001780:	2300      	movs	r3, #0
 8001782:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001784:	2301      	movs	r3, #1
 8001786:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001788:	f107 030c 	add.w	r3, r7, #12
 800178c:	4619      	mov	r1, r3
 800178e:	4805      	ldr	r0, [pc, #20]	; (80017a4 <HAL_TIM_MspPostInit+0x70>)
 8001790:	f001 f9da 	bl	8002b48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001794:	bf00      	nop
 8001796:	3720      	adds	r7, #32
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40010000 	.word	0x40010000
 80017a0:	40023800 	.word	0x40023800
 80017a4:	40020000 	.word	0x40020000

080017a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b08a      	sub	sp, #40	; 0x28
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b0:	f107 0314 	add.w	r3, r7, #20
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	605a      	str	r2, [r3, #4]
 80017ba:	609a      	str	r2, [r3, #8]
 80017bc:	60da      	str	r2, [r3, #12]
 80017be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a19      	ldr	r2, [pc, #100]	; (800182c <HAL_UART_MspInit+0x84>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d12b      	bne.n	8001822 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	613b      	str	r3, [r7, #16]
 80017ce:	4b18      	ldr	r3, [pc, #96]	; (8001830 <HAL_UART_MspInit+0x88>)
 80017d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d2:	4a17      	ldr	r2, [pc, #92]	; (8001830 <HAL_UART_MspInit+0x88>)
 80017d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017d8:	6413      	str	r3, [r2, #64]	; 0x40
 80017da:	4b15      	ldr	r3, [pc, #84]	; (8001830 <HAL_UART_MspInit+0x88>)
 80017dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e2:	613b      	str	r3, [r7, #16]
 80017e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	4b11      	ldr	r3, [pc, #68]	; (8001830 <HAL_UART_MspInit+0x88>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	4a10      	ldr	r2, [pc, #64]	; (8001830 <HAL_UART_MspInit+0x88>)
 80017f0:	f043 0301 	orr.w	r3, r3, #1
 80017f4:	6313      	str	r3, [r2, #48]	; 0x30
 80017f6:	4b0e      	ldr	r3, [pc, #56]	; (8001830 <HAL_UART_MspInit+0x88>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001802:	230c      	movs	r3, #12
 8001804:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001806:	2302      	movs	r3, #2
 8001808:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180e:	2303      	movs	r3, #3
 8001810:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001812:	2307      	movs	r3, #7
 8001814:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001816:	f107 0314 	add.w	r3, r7, #20
 800181a:	4619      	mov	r1, r3
 800181c:	4805      	ldr	r0, [pc, #20]	; (8001834 <HAL_UART_MspInit+0x8c>)
 800181e:	f001 f993 	bl	8002b48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001822:	bf00      	nop
 8001824:	3728      	adds	r7, #40	; 0x28
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40004400 	.word	0x40004400
 8001830:	40023800 	.word	0x40023800
 8001834:	40020000 	.word	0x40020000

08001838 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800183c:	e7fe      	b.n	800183c <NMI_Handler+0x4>

0800183e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800183e:	b480      	push	{r7}
 8001840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001842:	e7fe      	b.n	8001842 <HardFault_Handler+0x4>

08001844 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001848:	e7fe      	b.n	8001848 <MemManage_Handler+0x4>

0800184a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800184e:	e7fe      	b.n	800184e <BusFault_Handler+0x4>

08001850 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001854:	e7fe      	b.n	8001854 <UsageFault_Handler+0x4>

08001856 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001856:	b480      	push	{r7}
 8001858:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001868:	bf00      	nop
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr

08001872 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001872:	b480      	push	{r7}
 8001874:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001884:	f000 f968 	bl	8001b58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001888:	bf00      	nop
 800188a:	bd80      	pop	{r7, pc}

0800188c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CHANGE_STATE_Pin);
 8001890:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001894:	f001 fb06 	bl	8002ea4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001898:	bf00      	nop
 800189a:	bd80      	pop	{r7, pc}

0800189c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80018a0:	4802      	ldr	r0, [pc, #8]	; (80018ac <DMA2_Stream0_IRQHandler+0x10>)
 80018a2:	f000 ff15 	bl	80026d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	20000288 	.word	0x20000288

080018b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
	return 1;
 80018b4:	2301      	movs	r3, #1
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <_kill>:

int _kill(int pid, int sig)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80018ca:	f003 fa97 	bl	8004dfc <__errno>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2216      	movs	r2, #22
 80018d2:	601a      	str	r2, [r3, #0]
	return -1;
 80018d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <_exit>:

void _exit (int status)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80018e8:	f04f 31ff 	mov.w	r1, #4294967295
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f7ff ffe7 	bl	80018c0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80018f2:	e7fe      	b.n	80018f2 <_exit+0x12>

080018f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001900:	2300      	movs	r3, #0
 8001902:	617b      	str	r3, [r7, #20]
 8001904:	e00a      	b.n	800191c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001906:	f3af 8000 	nop.w
 800190a:	4601      	mov	r1, r0
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	1c5a      	adds	r2, r3, #1
 8001910:	60ba      	str	r2, [r7, #8]
 8001912:	b2ca      	uxtb	r2, r1
 8001914:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	3301      	adds	r3, #1
 800191a:	617b      	str	r3, [r7, #20]
 800191c:	697a      	ldr	r2, [r7, #20]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	429a      	cmp	r2, r3
 8001922:	dbf0      	blt.n	8001906 <_read+0x12>
	}

return len;
 8001924:	687b      	ldr	r3, [r7, #4]
}
 8001926:	4618      	mov	r0, r3
 8001928:	3718      	adds	r7, #24
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b086      	sub	sp, #24
 8001932:	af00      	add	r7, sp, #0
 8001934:	60f8      	str	r0, [r7, #12]
 8001936:	60b9      	str	r1, [r7, #8]
 8001938:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800193a:	2300      	movs	r3, #0
 800193c:	617b      	str	r3, [r7, #20]
 800193e:	e009      	b.n	8001954 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	1c5a      	adds	r2, r3, #1
 8001944:	60ba      	str	r2, [r7, #8]
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	4618      	mov	r0, r3
 800194a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	3301      	adds	r3, #1
 8001952:	617b      	str	r3, [r7, #20]
 8001954:	697a      	ldr	r2, [r7, #20]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	429a      	cmp	r2, r3
 800195a:	dbf1      	blt.n	8001940 <_write+0x12>
	}
	return len;
 800195c:	687b      	ldr	r3, [r7, #4]
}
 800195e:	4618      	mov	r0, r3
 8001960:	3718      	adds	r7, #24
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <_close>:

int _close(int file)
{
 8001966:	b480      	push	{r7}
 8001968:	b083      	sub	sp, #12
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
	return -1;
 800196e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001972:	4618      	mov	r0, r3
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800197e:	b480      	push	{r7}
 8001980:	b083      	sub	sp, #12
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
 8001986:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800198e:	605a      	str	r2, [r3, #4]
	return 0;
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <_isatty>:

int _isatty(int file)
{
 800199e:	b480      	push	{r7}
 80019a0:	b083      	sub	sp, #12
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
	return 1;
 80019a6:	2301      	movs	r3, #1
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
	return 0;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3714      	adds	r7, #20
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
	...

080019d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019d8:	4a14      	ldr	r2, [pc, #80]	; (8001a2c <_sbrk+0x5c>)
 80019da:	4b15      	ldr	r3, [pc, #84]	; (8001a30 <_sbrk+0x60>)
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019e4:	4b13      	ldr	r3, [pc, #76]	; (8001a34 <_sbrk+0x64>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d102      	bne.n	80019f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019ec:	4b11      	ldr	r3, [pc, #68]	; (8001a34 <_sbrk+0x64>)
 80019ee:	4a12      	ldr	r2, [pc, #72]	; (8001a38 <_sbrk+0x68>)
 80019f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019f2:	4b10      	ldr	r3, [pc, #64]	; (8001a34 <_sbrk+0x64>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4413      	add	r3, r2
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d207      	bcs.n	8001a10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a00:	f003 f9fc 	bl	8004dfc <__errno>
 8001a04:	4603      	mov	r3, r0
 8001a06:	220c      	movs	r2, #12
 8001a08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a0e:	e009      	b.n	8001a24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a10:	4b08      	ldr	r3, [pc, #32]	; (8001a34 <_sbrk+0x64>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a16:	4b07      	ldr	r3, [pc, #28]	; (8001a34 <_sbrk+0x64>)
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	4a05      	ldr	r2, [pc, #20]	; (8001a34 <_sbrk+0x64>)
 8001a20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a22:	68fb      	ldr	r3, [r7, #12]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3718      	adds	r7, #24
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	20020000 	.word	0x20020000
 8001a30:	00000400 	.word	0x00000400
 8001a34:	200003dc 	.word	0x200003dc
 8001a38:	200003f8 	.word	0x200003f8

08001a3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a40:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <SystemInit+0x20>)
 8001a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a46:	4a05      	ldr	r2, [pc, #20]	; (8001a5c <SystemInit+0x20>)
 8001a48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a50:	bf00      	nop
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	e000ed00 	.word	0xe000ed00

08001a60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a98 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a64:	480d      	ldr	r0, [pc, #52]	; (8001a9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a66:	490e      	ldr	r1, [pc, #56]	; (8001aa0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a68:	4a0e      	ldr	r2, [pc, #56]	; (8001aa4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a6c:	e002      	b.n	8001a74 <LoopCopyDataInit>

08001a6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a72:	3304      	adds	r3, #4

08001a74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a78:	d3f9      	bcc.n	8001a6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a7a:	4a0b      	ldr	r2, [pc, #44]	; (8001aa8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a7c:	4c0b      	ldr	r4, [pc, #44]	; (8001aac <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a80:	e001      	b.n	8001a86 <LoopFillZerobss>

08001a82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a84:	3204      	adds	r2, #4

08001a86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a88:	d3fb      	bcc.n	8001a82 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a8a:	f7ff ffd7 	bl	8001a3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a8e:	f003 f9bb 	bl	8004e08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a92:	f7ff fa2b 	bl	8000eec <main>
  bx  lr    
 8001a96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aa0:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001aa4:	080080d4 	.word	0x080080d4
  ldr r2, =_sbss
 8001aa8:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001aac:	200003f4 	.word	0x200003f4

08001ab0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ab0:	e7fe      	b.n	8001ab0 <ADC_IRQHandler>
	...

08001ab4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ab8:	4b0e      	ldr	r3, [pc, #56]	; (8001af4 <HAL_Init+0x40>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a0d      	ldr	r2, [pc, #52]	; (8001af4 <HAL_Init+0x40>)
 8001abe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ac2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ac4:	4b0b      	ldr	r3, [pc, #44]	; (8001af4 <HAL_Init+0x40>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a0a      	ldr	r2, [pc, #40]	; (8001af4 <HAL_Init+0x40>)
 8001aca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ace:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ad0:	4b08      	ldr	r3, [pc, #32]	; (8001af4 <HAL_Init+0x40>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a07      	ldr	r2, [pc, #28]	; (8001af4 <HAL_Init+0x40>)
 8001ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ada:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001adc:	2003      	movs	r0, #3
 8001ade:	f000 fd07 	bl	80024f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ae2:	2000      	movs	r0, #0
 8001ae4:	f000 f808 	bl	8001af8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ae8:	f7ff fd32 	bl	8001550 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40023c00 	.word	0x40023c00

08001af8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b00:	4b12      	ldr	r3, [pc, #72]	; (8001b4c <HAL_InitTick+0x54>)
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	4b12      	ldr	r3, [pc, #72]	; (8001b50 <HAL_InitTick+0x58>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	4619      	mov	r1, r3
 8001b0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b16:	4618      	mov	r0, r3
 8001b18:	f000 fd1f 	bl	800255a <HAL_SYSTICK_Config>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e00e      	b.n	8001b44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2b0f      	cmp	r3, #15
 8001b2a:	d80a      	bhi.n	8001b42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	6879      	ldr	r1, [r7, #4]
 8001b30:	f04f 30ff 	mov.w	r0, #4294967295
 8001b34:	f000 fce7 	bl	8002506 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b38:	4a06      	ldr	r2, [pc, #24]	; (8001b54 <HAL_InitTick+0x5c>)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	e000      	b.n	8001b44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	20000000 	.word	0x20000000
 8001b50:	20000008 	.word	0x20000008
 8001b54:	20000004 	.word	0x20000004

08001b58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b5c:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <HAL_IncTick+0x20>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	461a      	mov	r2, r3
 8001b62:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <HAL_IncTick+0x24>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4413      	add	r3, r2
 8001b68:	4a04      	ldr	r2, [pc, #16]	; (8001b7c <HAL_IncTick+0x24>)
 8001b6a:	6013      	str	r3, [r2, #0]
}
 8001b6c:	bf00      	nop
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	20000008 	.word	0x20000008
 8001b7c:	200003e0 	.word	0x200003e0

08001b80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  return uwTick;
 8001b84:	4b03      	ldr	r3, [pc, #12]	; (8001b94 <HAL_GetTick+0x14>)
 8001b86:	681b      	ldr	r3, [r3, #0]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	200003e0 	.word	0x200003e0

08001b98 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e033      	b.n	8001c16 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d109      	bne.n	8001bca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f7ff fcf2 	bl	80015a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	f003 0310 	and.w	r3, r3, #16
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d118      	bne.n	8001c08 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bda:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001bde:	f023 0302 	bic.w	r3, r3, #2
 8001be2:	f043 0202 	orr.w	r2, r3, #2
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f000 fab4 	bl	8002158 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfa:	f023 0303 	bic.w	r3, r3, #3
 8001bfe:	f043 0201 	orr.w	r2, r3, #1
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	641a      	str	r2, [r3, #64]	; 0x40
 8001c06:	e001      	b.n	8001c0c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
	...

08001c20 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d101      	bne.n	8001c3a <HAL_ADC_Start+0x1a>
 8001c36:	2302      	movs	r3, #2
 8001c38:	e0b2      	b.n	8001da0 <HAL_ADC_Start+0x180>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f003 0301 	and.w	r3, r3, #1
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d018      	beq.n	8001c82 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	689a      	ldr	r2, [r3, #8]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f042 0201 	orr.w	r2, r2, #1
 8001c5e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c60:	4b52      	ldr	r3, [pc, #328]	; (8001dac <HAL_ADC_Start+0x18c>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a52      	ldr	r2, [pc, #328]	; (8001db0 <HAL_ADC_Start+0x190>)
 8001c66:	fba2 2303 	umull	r2, r3, r2, r3
 8001c6a:	0c9a      	lsrs	r2, r3, #18
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	4413      	add	r3, r2
 8001c72:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001c74:	e002      	b.n	8001c7c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	3b01      	subs	r3, #1
 8001c7a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1f9      	bne.n	8001c76 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f003 0301 	and.w	r3, r3, #1
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d17a      	bne.n	8001d86 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c94:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001c98:	f023 0301 	bic.w	r3, r3, #1
 8001c9c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d007      	beq.n	8001cc2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001cba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cce:	d106      	bne.n	8001cde <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd4:	f023 0206 	bic.w	r2, r3, #6
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	645a      	str	r2, [r3, #68]	; 0x44
 8001cdc:	e002      	b.n	8001ce4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cec:	4b31      	ldr	r3, [pc, #196]	; (8001db4 <HAL_ADC_Start+0x194>)
 8001cee:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001cf8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f003 031f 	and.w	r3, r3, #31
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d12a      	bne.n	8001d5c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a2b      	ldr	r2, [pc, #172]	; (8001db8 <HAL_ADC_Start+0x198>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d015      	beq.n	8001d3c <HAL_ADC_Start+0x11c>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a29      	ldr	r2, [pc, #164]	; (8001dbc <HAL_ADC_Start+0x19c>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d105      	bne.n	8001d26 <HAL_ADC_Start+0x106>
 8001d1a:	4b26      	ldr	r3, [pc, #152]	; (8001db4 <HAL_ADC_Start+0x194>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f003 031f 	and.w	r3, r3, #31
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d00a      	beq.n	8001d3c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a25      	ldr	r2, [pc, #148]	; (8001dc0 <HAL_ADC_Start+0x1a0>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d136      	bne.n	8001d9e <HAL_ADC_Start+0x17e>
 8001d30:	4b20      	ldr	r3, [pc, #128]	; (8001db4 <HAL_ADC_Start+0x194>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f003 0310 	and.w	r3, r3, #16
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d130      	bne.n	8001d9e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d129      	bne.n	8001d9e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	689a      	ldr	r2, [r3, #8]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d58:	609a      	str	r2, [r3, #8]
 8001d5a:	e020      	b.n	8001d9e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a15      	ldr	r2, [pc, #84]	; (8001db8 <HAL_ADC_Start+0x198>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d11b      	bne.n	8001d9e <HAL_ADC_Start+0x17e>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d114      	bne.n	8001d9e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	689a      	ldr	r2, [r3, #8]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d82:	609a      	str	r2, [r3, #8]
 8001d84:	e00b      	b.n	8001d9e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8a:	f043 0210 	orr.w	r2, r3, #16
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d96:	f043 0201 	orr.w	r2, r3, #1
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3714      	adds	r7, #20
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	20000000 	.word	0x20000000
 8001db0:	431bde83 	.word	0x431bde83
 8001db4:	40012300 	.word	0x40012300
 8001db8:	40012000 	.word	0x40012000
 8001dbc:	40012100 	.word	0x40012100
 8001dc0:	40012200 	.word	0x40012200

08001dc4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ddc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001de0:	d113      	bne.n	8001e0a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001dec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001df0:	d10b      	bne.n	8001e0a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df6:	f043 0220 	orr.w	r2, r3, #32
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e063      	b.n	8001ed2 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001e0a:	f7ff feb9 	bl	8001b80 <HAL_GetTick>
 8001e0e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e10:	e021      	b.n	8001e56 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e18:	d01d      	beq.n	8001e56 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d007      	beq.n	8001e30 <HAL_ADC_PollForConversion+0x6c>
 8001e20:	f7ff feae 	bl	8001b80 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	683a      	ldr	r2, [r7, #0]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d212      	bcs.n	8001e56 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d00b      	beq.n	8001e56 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e42:	f043 0204 	orr.w	r2, r3, #4
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e03d      	b.n	8001ed2 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d1d6      	bne.n	8001e12 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f06f 0212 	mvn.w	r2, #18
 8001e6c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e72:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d123      	bne.n	8001ed0 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d11f      	bne.n	8001ed0 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e96:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d006      	beq.n	8001eac <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d111      	bne.n	8001ed0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d105      	bne.n	8001ed0 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec8:	f043 0201 	orr.w	r2, r3, #1
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001eda:	b480      	push	{r7}
 8001edc:	b083      	sub	sp, #12
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001efe:	2300      	movs	r3, #0
 8001f00:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d101      	bne.n	8001f10 <HAL_ADC_ConfigChannel+0x1c>
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	e113      	b.n	8002138 <HAL_ADC_ConfigChannel+0x244>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2b09      	cmp	r3, #9
 8001f1e:	d925      	bls.n	8001f6c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68d9      	ldr	r1, [r3, #12]
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	4613      	mov	r3, r2
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	4413      	add	r3, r2
 8001f34:	3b1e      	subs	r3, #30
 8001f36:	2207      	movs	r2, #7
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	43da      	mvns	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	400a      	ands	r2, r1
 8001f44:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	68d9      	ldr	r1, [r3, #12]
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	689a      	ldr	r2, [r3, #8]
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	4618      	mov	r0, r3
 8001f58:	4603      	mov	r3, r0
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	4403      	add	r3, r0
 8001f5e:	3b1e      	subs	r3, #30
 8001f60:	409a      	lsls	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	430a      	orrs	r2, r1
 8001f68:	60da      	str	r2, [r3, #12]
 8001f6a:	e022      	b.n	8001fb2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6919      	ldr	r1, [r3, #16]
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	461a      	mov	r2, r3
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	4413      	add	r3, r2
 8001f80:	2207      	movs	r2, #7
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	43da      	mvns	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	400a      	ands	r2, r1
 8001f8e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	6919      	ldr	r1, [r3, #16]
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	689a      	ldr	r2, [r3, #8]
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	4403      	add	r3, r0
 8001fa8:	409a      	lsls	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	430a      	orrs	r2, r1
 8001fb0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	2b06      	cmp	r3, #6
 8001fb8:	d824      	bhi.n	8002004 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685a      	ldr	r2, [r3, #4]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	4413      	add	r3, r2
 8001fca:	3b05      	subs	r3, #5
 8001fcc:	221f      	movs	r2, #31
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	43da      	mvns	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	400a      	ands	r2, r1
 8001fda:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	4618      	mov	r0, r3
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685a      	ldr	r2, [r3, #4]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	4413      	add	r3, r2
 8001ff4:	3b05      	subs	r3, #5
 8001ff6:	fa00 f203 	lsl.w	r2, r0, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	430a      	orrs	r2, r1
 8002000:	635a      	str	r2, [r3, #52]	; 0x34
 8002002:	e04c      	b.n	800209e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	2b0c      	cmp	r3, #12
 800200a:	d824      	bhi.n	8002056 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685a      	ldr	r2, [r3, #4]
 8002016:	4613      	mov	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	4413      	add	r3, r2
 800201c:	3b23      	subs	r3, #35	; 0x23
 800201e:	221f      	movs	r2, #31
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	43da      	mvns	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	400a      	ands	r2, r1
 800202c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	b29b      	uxth	r3, r3
 800203a:	4618      	mov	r0, r3
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685a      	ldr	r2, [r3, #4]
 8002040:	4613      	mov	r3, r2
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	4413      	add	r3, r2
 8002046:	3b23      	subs	r3, #35	; 0x23
 8002048:	fa00 f203 	lsl.w	r2, r0, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	430a      	orrs	r2, r1
 8002052:	631a      	str	r2, [r3, #48]	; 0x30
 8002054:	e023      	b.n	800209e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685a      	ldr	r2, [r3, #4]
 8002060:	4613      	mov	r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	4413      	add	r3, r2
 8002066:	3b41      	subs	r3, #65	; 0x41
 8002068:	221f      	movs	r2, #31
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	43da      	mvns	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	400a      	ands	r2, r1
 8002076:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	b29b      	uxth	r3, r3
 8002084:	4618      	mov	r0, r3
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685a      	ldr	r2, [r3, #4]
 800208a:	4613      	mov	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	4413      	add	r3, r2
 8002090:	3b41      	subs	r3, #65	; 0x41
 8002092:	fa00 f203 	lsl.w	r2, r0, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	430a      	orrs	r2, r1
 800209c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800209e:	4b29      	ldr	r3, [pc, #164]	; (8002144 <HAL_ADC_ConfigChannel+0x250>)
 80020a0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a28      	ldr	r2, [pc, #160]	; (8002148 <HAL_ADC_ConfigChannel+0x254>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d10f      	bne.n	80020cc <HAL_ADC_ConfigChannel+0x1d8>
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2b12      	cmp	r3, #18
 80020b2:	d10b      	bne.n	80020cc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a1d      	ldr	r2, [pc, #116]	; (8002148 <HAL_ADC_ConfigChannel+0x254>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d12b      	bne.n	800212e <HAL_ADC_ConfigChannel+0x23a>
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a1c      	ldr	r2, [pc, #112]	; (800214c <HAL_ADC_ConfigChannel+0x258>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d003      	beq.n	80020e8 <HAL_ADC_ConfigChannel+0x1f4>
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2b11      	cmp	r3, #17
 80020e6:	d122      	bne.n	800212e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a11      	ldr	r2, [pc, #68]	; (800214c <HAL_ADC_ConfigChannel+0x258>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d111      	bne.n	800212e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800210a:	4b11      	ldr	r3, [pc, #68]	; (8002150 <HAL_ADC_ConfigChannel+0x25c>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a11      	ldr	r2, [pc, #68]	; (8002154 <HAL_ADC_ConfigChannel+0x260>)
 8002110:	fba2 2303 	umull	r2, r3, r2, r3
 8002114:	0c9a      	lsrs	r2, r3, #18
 8002116:	4613      	mov	r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	4413      	add	r3, r2
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002120:	e002      	b.n	8002128 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	3b01      	subs	r3, #1
 8002126:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1f9      	bne.n	8002122 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	3714      	adds	r7, #20
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	40012300 	.word	0x40012300
 8002148:	40012000 	.word	0x40012000
 800214c:	10000012 	.word	0x10000012
 8002150:	20000000 	.word	0x20000000
 8002154:	431bde83 	.word	0x431bde83

08002158 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002160:	4b79      	ldr	r3, [pc, #484]	; (8002348 <ADC_Init+0x1f0>)
 8002162:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	685a      	ldr	r2, [r3, #4]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	431a      	orrs	r2, r3
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	685a      	ldr	r2, [r3, #4]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800218c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	6859      	ldr	r1, [r3, #4]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	021a      	lsls	r2, r3, #8
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	430a      	orrs	r2, r1
 80021a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	685a      	ldr	r2, [r3, #4]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80021b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	6859      	ldr	r1, [r3, #4]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689a      	ldr	r2, [r3, #8]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	430a      	orrs	r2, r1
 80021c2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	689a      	ldr	r2, [r3, #8]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6899      	ldr	r1, [r3, #8]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	68da      	ldr	r2, [r3, #12]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	430a      	orrs	r2, r1
 80021e4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ea:	4a58      	ldr	r2, [pc, #352]	; (800234c <ADC_Init+0x1f4>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d022      	beq.n	8002236 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	689a      	ldr	r2, [r3, #8]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	6899      	ldr	r1, [r3, #8]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	430a      	orrs	r2, r1
 8002210:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002220:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	6899      	ldr	r1, [r3, #8]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	430a      	orrs	r2, r1
 8002232:	609a      	str	r2, [r3, #8]
 8002234:	e00f      	b.n	8002256 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	689a      	ldr	r2, [r3, #8]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002244:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002254:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	689a      	ldr	r2, [r3, #8]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f022 0202 	bic.w	r2, r2, #2
 8002264:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	6899      	ldr	r1, [r3, #8]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	7e1b      	ldrb	r3, [r3, #24]
 8002270:	005a      	lsls	r2, r3, #1
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	430a      	orrs	r2, r1
 8002278:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d01b      	beq.n	80022bc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	685a      	ldr	r2, [r3, #4]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002292:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	685a      	ldr	r2, [r3, #4]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80022a2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	6859      	ldr	r1, [r3, #4]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ae:	3b01      	subs	r3, #1
 80022b0:	035a      	lsls	r2, r3, #13
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	430a      	orrs	r2, r1
 80022b8:	605a      	str	r2, [r3, #4]
 80022ba:	e007      	b.n	80022cc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	685a      	ldr	r2, [r3, #4]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80022da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	69db      	ldr	r3, [r3, #28]
 80022e6:	3b01      	subs	r3, #1
 80022e8:	051a      	lsls	r2, r3, #20
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	430a      	orrs	r2, r1
 80022f0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	689a      	ldr	r2, [r3, #8]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002300:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	6899      	ldr	r1, [r3, #8]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800230e:	025a      	lsls	r2, r3, #9
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	430a      	orrs	r2, r1
 8002316:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	689a      	ldr	r2, [r3, #8]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002326:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6899      	ldr	r1, [r3, #8]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	029a      	lsls	r2, r3, #10
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	430a      	orrs	r2, r1
 800233a:	609a      	str	r2, [r3, #8]
}
 800233c:	bf00      	nop
 800233e:	3714      	adds	r7, #20
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	40012300 	.word	0x40012300
 800234c:	0f000001 	.word	0x0f000001

08002350 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f003 0307 	and.w	r3, r3, #7
 800235e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002360:	4b0c      	ldr	r3, [pc, #48]	; (8002394 <__NVIC_SetPriorityGrouping+0x44>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002366:	68ba      	ldr	r2, [r7, #8]
 8002368:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800236c:	4013      	ands	r3, r2
 800236e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002378:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800237c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002380:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002382:	4a04      	ldr	r2, [pc, #16]	; (8002394 <__NVIC_SetPriorityGrouping+0x44>)
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	60d3      	str	r3, [r2, #12]
}
 8002388:	bf00      	nop
 800238a:	3714      	adds	r7, #20
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr
 8002394:	e000ed00 	.word	0xe000ed00

08002398 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800239c:	4b04      	ldr	r3, [pc, #16]	; (80023b0 <__NVIC_GetPriorityGrouping+0x18>)
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	0a1b      	lsrs	r3, r3, #8
 80023a2:	f003 0307 	and.w	r3, r3, #7
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	e000ed00 	.word	0xe000ed00

080023b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	4603      	mov	r3, r0
 80023bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	db0b      	blt.n	80023de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023c6:	79fb      	ldrb	r3, [r7, #7]
 80023c8:	f003 021f 	and.w	r2, r3, #31
 80023cc:	4907      	ldr	r1, [pc, #28]	; (80023ec <__NVIC_EnableIRQ+0x38>)
 80023ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d2:	095b      	lsrs	r3, r3, #5
 80023d4:	2001      	movs	r0, #1
 80023d6:	fa00 f202 	lsl.w	r2, r0, r2
 80023da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023de:	bf00      	nop
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	e000e100 	.word	0xe000e100

080023f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4603      	mov	r3, r0
 80023f8:	6039      	str	r1, [r7, #0]
 80023fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002400:	2b00      	cmp	r3, #0
 8002402:	db0a      	blt.n	800241a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	b2da      	uxtb	r2, r3
 8002408:	490c      	ldr	r1, [pc, #48]	; (800243c <__NVIC_SetPriority+0x4c>)
 800240a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240e:	0112      	lsls	r2, r2, #4
 8002410:	b2d2      	uxtb	r2, r2
 8002412:	440b      	add	r3, r1
 8002414:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002418:	e00a      	b.n	8002430 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	b2da      	uxtb	r2, r3
 800241e:	4908      	ldr	r1, [pc, #32]	; (8002440 <__NVIC_SetPriority+0x50>)
 8002420:	79fb      	ldrb	r3, [r7, #7]
 8002422:	f003 030f 	and.w	r3, r3, #15
 8002426:	3b04      	subs	r3, #4
 8002428:	0112      	lsls	r2, r2, #4
 800242a:	b2d2      	uxtb	r2, r2
 800242c:	440b      	add	r3, r1
 800242e:	761a      	strb	r2, [r3, #24]
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr
 800243c:	e000e100 	.word	0xe000e100
 8002440:	e000ed00 	.word	0xe000ed00

08002444 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002444:	b480      	push	{r7}
 8002446:	b089      	sub	sp, #36	; 0x24
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f003 0307 	and.w	r3, r3, #7
 8002456:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	f1c3 0307 	rsb	r3, r3, #7
 800245e:	2b04      	cmp	r3, #4
 8002460:	bf28      	it	cs
 8002462:	2304      	movcs	r3, #4
 8002464:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	3304      	adds	r3, #4
 800246a:	2b06      	cmp	r3, #6
 800246c:	d902      	bls.n	8002474 <NVIC_EncodePriority+0x30>
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	3b03      	subs	r3, #3
 8002472:	e000      	b.n	8002476 <NVIC_EncodePriority+0x32>
 8002474:	2300      	movs	r3, #0
 8002476:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002478:	f04f 32ff 	mov.w	r2, #4294967295
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	43da      	mvns	r2, r3
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	401a      	ands	r2, r3
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800248c:	f04f 31ff 	mov.w	r1, #4294967295
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	fa01 f303 	lsl.w	r3, r1, r3
 8002496:	43d9      	mvns	r1, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800249c:	4313      	orrs	r3, r2
         );
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3724      	adds	r7, #36	; 0x24
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
	...

080024ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3b01      	subs	r3, #1
 80024b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024bc:	d301      	bcc.n	80024c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024be:	2301      	movs	r3, #1
 80024c0:	e00f      	b.n	80024e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024c2:	4a0a      	ldr	r2, [pc, #40]	; (80024ec <SysTick_Config+0x40>)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	3b01      	subs	r3, #1
 80024c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024ca:	210f      	movs	r1, #15
 80024cc:	f04f 30ff 	mov.w	r0, #4294967295
 80024d0:	f7ff ff8e 	bl	80023f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024d4:	4b05      	ldr	r3, [pc, #20]	; (80024ec <SysTick_Config+0x40>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024da:	4b04      	ldr	r3, [pc, #16]	; (80024ec <SysTick_Config+0x40>)
 80024dc:	2207      	movs	r2, #7
 80024de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	e000e010 	.word	0xe000e010

080024f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f7ff ff29 	bl	8002350 <__NVIC_SetPriorityGrouping>
}
 80024fe:	bf00      	nop
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002506:	b580      	push	{r7, lr}
 8002508:	b086      	sub	sp, #24
 800250a:	af00      	add	r7, sp, #0
 800250c:	4603      	mov	r3, r0
 800250e:	60b9      	str	r1, [r7, #8]
 8002510:	607a      	str	r2, [r7, #4]
 8002512:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002514:	2300      	movs	r3, #0
 8002516:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002518:	f7ff ff3e 	bl	8002398 <__NVIC_GetPriorityGrouping>
 800251c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	68b9      	ldr	r1, [r7, #8]
 8002522:	6978      	ldr	r0, [r7, #20]
 8002524:	f7ff ff8e 	bl	8002444 <NVIC_EncodePriority>
 8002528:	4602      	mov	r2, r0
 800252a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800252e:	4611      	mov	r1, r2
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff ff5d 	bl	80023f0 <__NVIC_SetPriority>
}
 8002536:	bf00      	nop
 8002538:	3718      	adds	r7, #24
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800253e:	b580      	push	{r7, lr}
 8002540:	b082      	sub	sp, #8
 8002542:	af00      	add	r7, sp, #0
 8002544:	4603      	mov	r3, r0
 8002546:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254c:	4618      	mov	r0, r3
 800254e:	f7ff ff31 	bl	80023b4 <__NVIC_EnableIRQ>
}
 8002552:	bf00      	nop
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800255a:	b580      	push	{r7, lr}
 800255c:	b082      	sub	sp, #8
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f7ff ffa2 	bl	80024ac <SysTick_Config>
 8002568:	4603      	mov	r3, r0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3708      	adds	r7, #8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
	...

08002574 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b086      	sub	sp, #24
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800257c:	2300      	movs	r3, #0
 800257e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002580:	f7ff fafe 	bl	8001b80 <HAL_GetTick>
 8002584:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d101      	bne.n	8002590 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e099      	b.n	80026c4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2202      	movs	r2, #2
 8002594:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f022 0201 	bic.w	r2, r2, #1
 80025ae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025b0:	e00f      	b.n	80025d2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025b2:	f7ff fae5 	bl	8001b80 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b05      	cmp	r3, #5
 80025be:	d908      	bls.n	80025d2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2220      	movs	r2, #32
 80025c4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2203      	movs	r2, #3
 80025ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e078      	b.n	80026c4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1e8      	bne.n	80025b2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80025e8:	697a      	ldr	r2, [r7, #20]
 80025ea:	4b38      	ldr	r3, [pc, #224]	; (80026cc <HAL_DMA_Init+0x158>)
 80025ec:	4013      	ands	r3, r2
 80025ee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685a      	ldr	r2, [r3, #4]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	691b      	ldr	r3, [r3, #16]
 8002604:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800260a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002616:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a1b      	ldr	r3, [r3, #32]
 800261c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800261e:	697a      	ldr	r2, [r7, #20]
 8002620:	4313      	orrs	r3, r2
 8002622:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002628:	2b04      	cmp	r3, #4
 800262a:	d107      	bne.n	800263c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002634:	4313      	orrs	r3, r2
 8002636:	697a      	ldr	r2, [r7, #20]
 8002638:	4313      	orrs	r3, r2
 800263a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	697a      	ldr	r2, [r7, #20]
 8002642:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	f023 0307 	bic.w	r3, r3, #7
 8002652:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002658:	697a      	ldr	r2, [r7, #20]
 800265a:	4313      	orrs	r3, r2
 800265c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002662:	2b04      	cmp	r3, #4
 8002664:	d117      	bne.n	8002696 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800266a:	697a      	ldr	r2, [r7, #20]
 800266c:	4313      	orrs	r3, r2
 800266e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002674:	2b00      	cmp	r3, #0
 8002676:	d00e      	beq.n	8002696 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f000 f9e9 	bl	8002a50 <DMA_CheckFifoParam>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d008      	beq.n	8002696 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2240      	movs	r2, #64	; 0x40
 8002688:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2201      	movs	r2, #1
 800268e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002692:	2301      	movs	r3, #1
 8002694:	e016      	b.n	80026c4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	697a      	ldr	r2, [r7, #20]
 800269c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 f9a0 	bl	80029e4 <DMA_CalcBaseAndBitshift>
 80026a4:	4603      	mov	r3, r0
 80026a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ac:	223f      	movs	r2, #63	; 0x3f
 80026ae:	409a      	lsls	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2201      	movs	r2, #1
 80026be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80026c2:	2300      	movs	r3, #0
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3718      	adds	r7, #24
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	f010803f 	.word	0xf010803f

080026d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b086      	sub	sp, #24
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80026d8:	2300      	movs	r3, #0
 80026da:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80026dc:	4b8e      	ldr	r3, [pc, #568]	; (8002918 <HAL_DMA_IRQHandler+0x248>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a8e      	ldr	r2, [pc, #568]	; (800291c <HAL_DMA_IRQHandler+0x24c>)
 80026e2:	fba2 2303 	umull	r2, r3, r2, r3
 80026e6:	0a9b      	lsrs	r3, r3, #10
 80026e8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026fa:	2208      	movs	r2, #8
 80026fc:	409a      	lsls	r2, r3
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	4013      	ands	r3, r2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d01a      	beq.n	800273c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0304 	and.w	r3, r3, #4
 8002710:	2b00      	cmp	r3, #0
 8002712:	d013      	beq.n	800273c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f022 0204 	bic.w	r2, r2, #4
 8002722:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002728:	2208      	movs	r2, #8
 800272a:	409a      	lsls	r2, r3
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002734:	f043 0201 	orr.w	r2, r3, #1
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002740:	2201      	movs	r2, #1
 8002742:	409a      	lsls	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	4013      	ands	r3, r2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d012      	beq.n	8002772 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00b      	beq.n	8002772 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800275e:	2201      	movs	r2, #1
 8002760:	409a      	lsls	r2, r3
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800276a:	f043 0202 	orr.w	r2, r3, #2
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002776:	2204      	movs	r2, #4
 8002778:	409a      	lsls	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	4013      	ands	r3, r2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d012      	beq.n	80027a8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d00b      	beq.n	80027a8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002794:	2204      	movs	r2, #4
 8002796:	409a      	lsls	r2, r3
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a0:	f043 0204 	orr.w	r2, r3, #4
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ac:	2210      	movs	r2, #16
 80027ae:	409a      	lsls	r2, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	4013      	ands	r3, r2
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d043      	beq.n	8002840 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0308 	and.w	r3, r3, #8
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d03c      	beq.n	8002840 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ca:	2210      	movs	r2, #16
 80027cc:	409a      	lsls	r2, r3
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d018      	beq.n	8002812 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d108      	bne.n	8002800 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d024      	beq.n	8002840 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	4798      	blx	r3
 80027fe:	e01f      	b.n	8002840 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002804:	2b00      	cmp	r3, #0
 8002806:	d01b      	beq.n	8002840 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	4798      	blx	r3
 8002810:	e016      	b.n	8002840 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800281c:	2b00      	cmp	r3, #0
 800281e:	d107      	bne.n	8002830 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f022 0208 	bic.w	r2, r2, #8
 800282e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002834:	2b00      	cmp	r3, #0
 8002836:	d003      	beq.n	8002840 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002844:	2220      	movs	r2, #32
 8002846:	409a      	lsls	r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	4013      	ands	r3, r2
 800284c:	2b00      	cmp	r3, #0
 800284e:	f000 808f 	beq.w	8002970 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0310 	and.w	r3, r3, #16
 800285c:	2b00      	cmp	r3, #0
 800285e:	f000 8087 	beq.w	8002970 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002866:	2220      	movs	r2, #32
 8002868:	409a      	lsls	r2, r3
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b05      	cmp	r3, #5
 8002878:	d136      	bne.n	80028e8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f022 0216 	bic.w	r2, r2, #22
 8002888:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	695a      	ldr	r2, [r3, #20]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002898:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d103      	bne.n	80028aa <HAL_DMA_IRQHandler+0x1da>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d007      	beq.n	80028ba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f022 0208 	bic.w	r2, r2, #8
 80028b8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028be:	223f      	movs	r2, #63	; 0x3f
 80028c0:	409a      	lsls	r2, r3
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2201      	movs	r2, #1
 80028ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d07e      	beq.n	80029dc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	4798      	blx	r3
        }
        return;
 80028e6:	e079      	b.n	80029dc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d01d      	beq.n	8002932 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d10d      	bne.n	8002920 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002908:	2b00      	cmp	r3, #0
 800290a:	d031      	beq.n	8002970 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	4798      	blx	r3
 8002914:	e02c      	b.n	8002970 <HAL_DMA_IRQHandler+0x2a0>
 8002916:	bf00      	nop
 8002918:	20000000 	.word	0x20000000
 800291c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002924:	2b00      	cmp	r3, #0
 8002926:	d023      	beq.n	8002970 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	4798      	blx	r3
 8002930:	e01e      	b.n	8002970 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293c:	2b00      	cmp	r3, #0
 800293e:	d10f      	bne.n	8002960 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f022 0210 	bic.w	r2, r2, #16
 800294e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002964:	2b00      	cmp	r3, #0
 8002966:	d003      	beq.n	8002970 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002974:	2b00      	cmp	r3, #0
 8002976:	d032      	beq.n	80029de <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800297c:	f003 0301 	and.w	r3, r3, #1
 8002980:	2b00      	cmp	r3, #0
 8002982:	d022      	beq.n	80029ca <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2205      	movs	r2, #5
 8002988:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f022 0201 	bic.w	r2, r2, #1
 800299a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	3301      	adds	r3, #1
 80029a0:	60bb      	str	r3, [r7, #8]
 80029a2:	697a      	ldr	r2, [r7, #20]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d307      	bcc.n	80029b8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d1f2      	bne.n	800299c <HAL_DMA_IRQHandler+0x2cc>
 80029b6:	e000      	b.n	80029ba <HAL_DMA_IRQHandler+0x2ea>
          break;
 80029b8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2201      	movs	r2, #1
 80029be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d005      	beq.n	80029de <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	4798      	blx	r3
 80029da:	e000      	b.n	80029de <HAL_DMA_IRQHandler+0x30e>
        return;
 80029dc:	bf00      	nop
    }
  }
}
 80029de:	3718      	adds	r7, #24
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	3b10      	subs	r3, #16
 80029f4:	4a14      	ldr	r2, [pc, #80]	; (8002a48 <DMA_CalcBaseAndBitshift+0x64>)
 80029f6:	fba2 2303 	umull	r2, r3, r2, r3
 80029fa:	091b      	lsrs	r3, r3, #4
 80029fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80029fe:	4a13      	ldr	r2, [pc, #76]	; (8002a4c <DMA_CalcBaseAndBitshift+0x68>)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	4413      	add	r3, r2
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	461a      	mov	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2b03      	cmp	r3, #3
 8002a10:	d909      	bls.n	8002a26 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a1a:	f023 0303 	bic.w	r3, r3, #3
 8002a1e:	1d1a      	adds	r2, r3, #4
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	659a      	str	r2, [r3, #88]	; 0x58
 8002a24:	e007      	b.n	8002a36 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a2e:	f023 0303 	bic.w	r3, r3, #3
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3714      	adds	r7, #20
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	aaaaaaab 	.word	0xaaaaaaab
 8002a4c:	08007ce0 	.word	0x08007ce0

08002a50 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a60:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	699b      	ldr	r3, [r3, #24]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d11f      	bne.n	8002aaa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	2b03      	cmp	r3, #3
 8002a6e:	d856      	bhi.n	8002b1e <DMA_CheckFifoParam+0xce>
 8002a70:	a201      	add	r2, pc, #4	; (adr r2, 8002a78 <DMA_CheckFifoParam+0x28>)
 8002a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a76:	bf00      	nop
 8002a78:	08002a89 	.word	0x08002a89
 8002a7c:	08002a9b 	.word	0x08002a9b
 8002a80:	08002a89 	.word	0x08002a89
 8002a84:	08002b1f 	.word	0x08002b1f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d046      	beq.n	8002b22 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a98:	e043      	b.n	8002b22 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002aa2:	d140      	bne.n	8002b26 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002aa8:	e03d      	b.n	8002b26 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ab2:	d121      	bne.n	8002af8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	2b03      	cmp	r3, #3
 8002ab8:	d837      	bhi.n	8002b2a <DMA_CheckFifoParam+0xda>
 8002aba:	a201      	add	r2, pc, #4	; (adr r2, 8002ac0 <DMA_CheckFifoParam+0x70>)
 8002abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ac0:	08002ad1 	.word	0x08002ad1
 8002ac4:	08002ad7 	.word	0x08002ad7
 8002ac8:	08002ad1 	.word	0x08002ad1
 8002acc:	08002ae9 	.word	0x08002ae9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ad4:	e030      	b.n	8002b38 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ada:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d025      	beq.n	8002b2e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ae6:	e022      	b.n	8002b2e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002af0:	d11f      	bne.n	8002b32 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002af6:	e01c      	b.n	8002b32 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d903      	bls.n	8002b06 <DMA_CheckFifoParam+0xb6>
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	2b03      	cmp	r3, #3
 8002b02:	d003      	beq.n	8002b0c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b04:	e018      	b.n	8002b38 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	73fb      	strb	r3, [r7, #15]
      break;
 8002b0a:	e015      	b.n	8002b38 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d00e      	beq.n	8002b36 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b1c:	e00b      	b.n	8002b36 <DMA_CheckFifoParam+0xe6>
      break;
 8002b1e:	bf00      	nop
 8002b20:	e00a      	b.n	8002b38 <DMA_CheckFifoParam+0xe8>
      break;
 8002b22:	bf00      	nop
 8002b24:	e008      	b.n	8002b38 <DMA_CheckFifoParam+0xe8>
      break;
 8002b26:	bf00      	nop
 8002b28:	e006      	b.n	8002b38 <DMA_CheckFifoParam+0xe8>
      break;
 8002b2a:	bf00      	nop
 8002b2c:	e004      	b.n	8002b38 <DMA_CheckFifoParam+0xe8>
      break;
 8002b2e:	bf00      	nop
 8002b30:	e002      	b.n	8002b38 <DMA_CheckFifoParam+0xe8>
      break;   
 8002b32:	bf00      	nop
 8002b34:	e000      	b.n	8002b38 <DMA_CheckFifoParam+0xe8>
      break;
 8002b36:	bf00      	nop
    }
  } 
  
  return status; 
 8002b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3714      	adds	r7, #20
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop

08002b48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b089      	sub	sp, #36	; 0x24
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b52:	2300      	movs	r3, #0
 8002b54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b56:	2300      	movs	r3, #0
 8002b58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b5e:	2300      	movs	r3, #0
 8002b60:	61fb      	str	r3, [r7, #28]
 8002b62:	e165      	b.n	8002e30 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b64:	2201      	movs	r2, #1
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	4013      	ands	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	f040 8154 	bne.w	8002e2a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f003 0303 	and.w	r3, r3, #3
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d005      	beq.n	8002b9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d130      	bne.n	8002bfc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	2203      	movs	r2, #3
 8002ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8002baa:	43db      	mvns	r3, r3
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	68da      	ldr	r2, [r3, #12]
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbe:	69ba      	ldr	r2, [r7, #24]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	43db      	mvns	r3, r3
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	091b      	lsrs	r3, r3, #4
 8002be6:	f003 0201 	and.w	r2, r3, #1
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f003 0303 	and.w	r3, r3, #3
 8002c04:	2b03      	cmp	r3, #3
 8002c06:	d017      	beq.n	8002c38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	2203      	movs	r2, #3
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	43db      	mvns	r3, r3
 8002c1a:	69ba      	ldr	r2, [r7, #24]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	689a      	ldr	r2, [r3, #8]
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f003 0303 	and.w	r3, r3, #3
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d123      	bne.n	8002c8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	08da      	lsrs	r2, r3, #3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	3208      	adds	r2, #8
 8002c4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	f003 0307 	and.w	r3, r3, #7
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	220f      	movs	r2, #15
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	43db      	mvns	r3, r3
 8002c62:	69ba      	ldr	r2, [r7, #24]
 8002c64:	4013      	ands	r3, r2
 8002c66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	691a      	ldr	r2, [r3, #16]
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	f003 0307 	and.w	r3, r3, #7
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	08da      	lsrs	r2, r3, #3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	3208      	adds	r2, #8
 8002c86:	69b9      	ldr	r1, [r7, #24]
 8002c88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	2203      	movs	r2, #3
 8002c98:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9c:	43db      	mvns	r3, r3
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f003 0203 	and.w	r2, r3, #3
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	f000 80ae 	beq.w	8002e2a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cce:	2300      	movs	r3, #0
 8002cd0:	60fb      	str	r3, [r7, #12]
 8002cd2:	4b5d      	ldr	r3, [pc, #372]	; (8002e48 <HAL_GPIO_Init+0x300>)
 8002cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd6:	4a5c      	ldr	r2, [pc, #368]	; (8002e48 <HAL_GPIO_Init+0x300>)
 8002cd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cdc:	6453      	str	r3, [r2, #68]	; 0x44
 8002cde:	4b5a      	ldr	r3, [pc, #360]	; (8002e48 <HAL_GPIO_Init+0x300>)
 8002ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ce6:	60fb      	str	r3, [r7, #12]
 8002ce8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cea:	4a58      	ldr	r2, [pc, #352]	; (8002e4c <HAL_GPIO_Init+0x304>)
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	089b      	lsrs	r3, r3, #2
 8002cf0:	3302      	adds	r3, #2
 8002cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	f003 0303 	and.w	r3, r3, #3
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	220f      	movs	r2, #15
 8002d02:	fa02 f303 	lsl.w	r3, r2, r3
 8002d06:	43db      	mvns	r3, r3
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a4f      	ldr	r2, [pc, #316]	; (8002e50 <HAL_GPIO_Init+0x308>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d025      	beq.n	8002d62 <HAL_GPIO_Init+0x21a>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a4e      	ldr	r2, [pc, #312]	; (8002e54 <HAL_GPIO_Init+0x30c>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d01f      	beq.n	8002d5e <HAL_GPIO_Init+0x216>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a4d      	ldr	r2, [pc, #308]	; (8002e58 <HAL_GPIO_Init+0x310>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d019      	beq.n	8002d5a <HAL_GPIO_Init+0x212>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a4c      	ldr	r2, [pc, #304]	; (8002e5c <HAL_GPIO_Init+0x314>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d013      	beq.n	8002d56 <HAL_GPIO_Init+0x20e>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a4b      	ldr	r2, [pc, #300]	; (8002e60 <HAL_GPIO_Init+0x318>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d00d      	beq.n	8002d52 <HAL_GPIO_Init+0x20a>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a4a      	ldr	r2, [pc, #296]	; (8002e64 <HAL_GPIO_Init+0x31c>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d007      	beq.n	8002d4e <HAL_GPIO_Init+0x206>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a49      	ldr	r2, [pc, #292]	; (8002e68 <HAL_GPIO_Init+0x320>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d101      	bne.n	8002d4a <HAL_GPIO_Init+0x202>
 8002d46:	2306      	movs	r3, #6
 8002d48:	e00c      	b.n	8002d64 <HAL_GPIO_Init+0x21c>
 8002d4a:	2307      	movs	r3, #7
 8002d4c:	e00a      	b.n	8002d64 <HAL_GPIO_Init+0x21c>
 8002d4e:	2305      	movs	r3, #5
 8002d50:	e008      	b.n	8002d64 <HAL_GPIO_Init+0x21c>
 8002d52:	2304      	movs	r3, #4
 8002d54:	e006      	b.n	8002d64 <HAL_GPIO_Init+0x21c>
 8002d56:	2303      	movs	r3, #3
 8002d58:	e004      	b.n	8002d64 <HAL_GPIO_Init+0x21c>
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	e002      	b.n	8002d64 <HAL_GPIO_Init+0x21c>
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e000      	b.n	8002d64 <HAL_GPIO_Init+0x21c>
 8002d62:	2300      	movs	r3, #0
 8002d64:	69fa      	ldr	r2, [r7, #28]
 8002d66:	f002 0203 	and.w	r2, r2, #3
 8002d6a:	0092      	lsls	r2, r2, #2
 8002d6c:	4093      	lsls	r3, r2
 8002d6e:	69ba      	ldr	r2, [r7, #24]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d74:	4935      	ldr	r1, [pc, #212]	; (8002e4c <HAL_GPIO_Init+0x304>)
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	089b      	lsrs	r3, r3, #2
 8002d7a:	3302      	adds	r3, #2
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d82:	4b3a      	ldr	r3, [pc, #232]	; (8002e6c <HAL_GPIO_Init+0x324>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	43db      	mvns	r3, r3
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	4013      	ands	r3, r2
 8002d90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d003      	beq.n	8002da6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002da6:	4a31      	ldr	r2, [pc, #196]	; (8002e6c <HAL_GPIO_Init+0x324>)
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002dac:	4b2f      	ldr	r3, [pc, #188]	; (8002e6c <HAL_GPIO_Init+0x324>)
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	43db      	mvns	r3, r3
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	4013      	ands	r3, r2
 8002dba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d003      	beq.n	8002dd0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002dd0:	4a26      	ldr	r2, [pc, #152]	; (8002e6c <HAL_GPIO_Init+0x324>)
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002dd6:	4b25      	ldr	r3, [pc, #148]	; (8002e6c <HAL_GPIO_Init+0x324>)
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	43db      	mvns	r3, r3
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	4013      	ands	r3, r2
 8002de4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d003      	beq.n	8002dfa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002dfa:	4a1c      	ldr	r2, [pc, #112]	; (8002e6c <HAL_GPIO_Init+0x324>)
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e00:	4b1a      	ldr	r3, [pc, #104]	; (8002e6c <HAL_GPIO_Init+0x324>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	43db      	mvns	r3, r3
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d003      	beq.n	8002e24 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e24:	4a11      	ldr	r2, [pc, #68]	; (8002e6c <HAL_GPIO_Init+0x324>)
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	61fb      	str	r3, [r7, #28]
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	2b0f      	cmp	r3, #15
 8002e34:	f67f ae96 	bls.w	8002b64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e38:	bf00      	nop
 8002e3a:	bf00      	nop
 8002e3c:	3724      	adds	r7, #36	; 0x24
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	40023800 	.word	0x40023800
 8002e4c:	40013800 	.word	0x40013800
 8002e50:	40020000 	.word	0x40020000
 8002e54:	40020400 	.word	0x40020400
 8002e58:	40020800 	.word	0x40020800
 8002e5c:	40020c00 	.word	0x40020c00
 8002e60:	40021000 	.word	0x40021000
 8002e64:	40021400 	.word	0x40021400
 8002e68:	40021800 	.word	0x40021800
 8002e6c:	40013c00 	.word	0x40013c00

08002e70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	460b      	mov	r3, r1
 8002e7a:	807b      	strh	r3, [r7, #2]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e80:	787b      	ldrb	r3, [r7, #1]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d003      	beq.n	8002e8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e86:	887a      	ldrh	r2, [r7, #2]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e8c:	e003      	b.n	8002e96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e8e:	887b      	ldrh	r3, [r7, #2]
 8002e90:	041a      	lsls	r2, r3, #16
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	619a      	str	r2, [r3, #24]
}
 8002e96:	bf00      	nop
 8002e98:	370c      	adds	r7, #12
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
	...

08002ea4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	4603      	mov	r3, r0
 8002eac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002eae:	4b08      	ldr	r3, [pc, #32]	; (8002ed0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002eb0:	695a      	ldr	r2, [r3, #20]
 8002eb2:	88fb      	ldrh	r3, [r7, #6]
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d006      	beq.n	8002ec8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002eba:	4a05      	ldr	r2, [pc, #20]	; (8002ed0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ebc:	88fb      	ldrh	r3, [r7, #6]
 8002ebe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ec0:	88fb      	ldrh	r3, [r7, #6]
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7fe faf6 	bl	80014b4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ec8:	bf00      	nop
 8002eca:	3708      	adds	r7, #8
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	40013c00 	.word	0x40013c00

08002ed4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d101      	bne.n	8002ee8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e0cc      	b.n	8003082 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ee8:	4b68      	ldr	r3, [pc, #416]	; (800308c <HAL_RCC_ClockConfig+0x1b8>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 030f 	and.w	r3, r3, #15
 8002ef0:	683a      	ldr	r2, [r7, #0]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d90c      	bls.n	8002f10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ef6:	4b65      	ldr	r3, [pc, #404]	; (800308c <HAL_RCC_ClockConfig+0x1b8>)
 8002ef8:	683a      	ldr	r2, [r7, #0]
 8002efa:	b2d2      	uxtb	r2, r2
 8002efc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002efe:	4b63      	ldr	r3, [pc, #396]	; (800308c <HAL_RCC_ClockConfig+0x1b8>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 030f 	and.w	r3, r3, #15
 8002f06:	683a      	ldr	r2, [r7, #0]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d001      	beq.n	8002f10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e0b8      	b.n	8003082 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0302 	and.w	r3, r3, #2
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d020      	beq.n	8002f5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0304 	and.w	r3, r3, #4
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d005      	beq.n	8002f34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f28:	4b59      	ldr	r3, [pc, #356]	; (8003090 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	4a58      	ldr	r2, [pc, #352]	; (8003090 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0308 	and.w	r3, r3, #8
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d005      	beq.n	8002f4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f40:	4b53      	ldr	r3, [pc, #332]	; (8003090 <HAL_RCC_ClockConfig+0x1bc>)
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	4a52      	ldr	r2, [pc, #328]	; (8003090 <HAL_RCC_ClockConfig+0x1bc>)
 8002f46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f4c:	4b50      	ldr	r3, [pc, #320]	; (8003090 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	494d      	ldr	r1, [pc, #308]	; (8003090 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d044      	beq.n	8002ff4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d107      	bne.n	8002f82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f72:	4b47      	ldr	r3, [pc, #284]	; (8003090 <HAL_RCC_ClockConfig+0x1bc>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d119      	bne.n	8002fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e07f      	b.n	8003082 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d003      	beq.n	8002f92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f8e:	2b03      	cmp	r3, #3
 8002f90:	d107      	bne.n	8002fa2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f92:	4b3f      	ldr	r3, [pc, #252]	; (8003090 <HAL_RCC_ClockConfig+0x1bc>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d109      	bne.n	8002fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e06f      	b.n	8003082 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fa2:	4b3b      	ldr	r3, [pc, #236]	; (8003090 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e067      	b.n	8003082 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fb2:	4b37      	ldr	r3, [pc, #220]	; (8003090 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f023 0203 	bic.w	r2, r3, #3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	4934      	ldr	r1, [pc, #208]	; (8003090 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fc4:	f7fe fddc 	bl	8001b80 <HAL_GetTick>
 8002fc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fca:	e00a      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fcc:	f7fe fdd8 	bl	8001b80 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e04f      	b.n	8003082 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fe2:	4b2b      	ldr	r3, [pc, #172]	; (8003090 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f003 020c 	and.w	r2, r3, #12
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d1eb      	bne.n	8002fcc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ff4:	4b25      	ldr	r3, [pc, #148]	; (800308c <HAL_RCC_ClockConfig+0x1b8>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 030f 	and.w	r3, r3, #15
 8002ffc:	683a      	ldr	r2, [r7, #0]
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d20c      	bcs.n	800301c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003002:	4b22      	ldr	r3, [pc, #136]	; (800308c <HAL_RCC_ClockConfig+0x1b8>)
 8003004:	683a      	ldr	r2, [r7, #0]
 8003006:	b2d2      	uxtb	r2, r2
 8003008:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800300a:	4b20      	ldr	r3, [pc, #128]	; (800308c <HAL_RCC_ClockConfig+0x1b8>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 030f 	and.w	r3, r3, #15
 8003012:	683a      	ldr	r2, [r7, #0]
 8003014:	429a      	cmp	r2, r3
 8003016:	d001      	beq.n	800301c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e032      	b.n	8003082 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0304 	and.w	r3, r3, #4
 8003024:	2b00      	cmp	r3, #0
 8003026:	d008      	beq.n	800303a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003028:	4b19      	ldr	r3, [pc, #100]	; (8003090 <HAL_RCC_ClockConfig+0x1bc>)
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	4916      	ldr	r1, [pc, #88]	; (8003090 <HAL_RCC_ClockConfig+0x1bc>)
 8003036:	4313      	orrs	r3, r2
 8003038:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0308 	and.w	r3, r3, #8
 8003042:	2b00      	cmp	r3, #0
 8003044:	d009      	beq.n	800305a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003046:	4b12      	ldr	r3, [pc, #72]	; (8003090 <HAL_RCC_ClockConfig+0x1bc>)
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	00db      	lsls	r3, r3, #3
 8003054:	490e      	ldr	r1, [pc, #56]	; (8003090 <HAL_RCC_ClockConfig+0x1bc>)
 8003056:	4313      	orrs	r3, r2
 8003058:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800305a:	f000 f855 	bl	8003108 <HAL_RCC_GetSysClockFreq>
 800305e:	4602      	mov	r2, r0
 8003060:	4b0b      	ldr	r3, [pc, #44]	; (8003090 <HAL_RCC_ClockConfig+0x1bc>)
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	091b      	lsrs	r3, r3, #4
 8003066:	f003 030f 	and.w	r3, r3, #15
 800306a:	490a      	ldr	r1, [pc, #40]	; (8003094 <HAL_RCC_ClockConfig+0x1c0>)
 800306c:	5ccb      	ldrb	r3, [r1, r3]
 800306e:	fa22 f303 	lsr.w	r3, r2, r3
 8003072:	4a09      	ldr	r2, [pc, #36]	; (8003098 <HAL_RCC_ClockConfig+0x1c4>)
 8003074:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003076:	4b09      	ldr	r3, [pc, #36]	; (800309c <HAL_RCC_ClockConfig+0x1c8>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4618      	mov	r0, r3
 800307c:	f7fe fd3c 	bl	8001af8 <HAL_InitTick>

  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	40023c00 	.word	0x40023c00
 8003090:	40023800 	.word	0x40023800
 8003094:	08007cc8 	.word	0x08007cc8
 8003098:	20000000 	.word	0x20000000
 800309c:	20000004 	.word	0x20000004

080030a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030a4:	4b03      	ldr	r3, [pc, #12]	; (80030b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80030a6:	681b      	ldr	r3, [r3, #0]
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	20000000 	.word	0x20000000

080030b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80030bc:	f7ff fff0 	bl	80030a0 <HAL_RCC_GetHCLKFreq>
 80030c0:	4602      	mov	r2, r0
 80030c2:	4b05      	ldr	r3, [pc, #20]	; (80030d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	0a9b      	lsrs	r3, r3, #10
 80030c8:	f003 0307 	and.w	r3, r3, #7
 80030cc:	4903      	ldr	r1, [pc, #12]	; (80030dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80030ce:	5ccb      	ldrb	r3, [r1, r3]
 80030d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	40023800 	.word	0x40023800
 80030dc:	08007cd8 	.word	0x08007cd8

080030e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80030e4:	f7ff ffdc 	bl	80030a0 <HAL_RCC_GetHCLKFreq>
 80030e8:	4602      	mov	r2, r0
 80030ea:	4b05      	ldr	r3, [pc, #20]	; (8003100 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	0b5b      	lsrs	r3, r3, #13
 80030f0:	f003 0307 	and.w	r3, r3, #7
 80030f4:	4903      	ldr	r1, [pc, #12]	; (8003104 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030f6:	5ccb      	ldrb	r3, [r1, r3]
 80030f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	40023800 	.word	0x40023800
 8003104:	08007cd8 	.word	0x08007cd8

08003108 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003108:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800310c:	b0ae      	sub	sp, #184	; 0xb8
 800310e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003110:	2300      	movs	r3, #0
 8003112:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003116:	2300      	movs	r3, #0
 8003118:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800311c:	2300      	movs	r3, #0
 800311e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003122:	2300      	movs	r3, #0
 8003124:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003128:	2300      	movs	r3, #0
 800312a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800312e:	4bcb      	ldr	r3, [pc, #812]	; (800345c <HAL_RCC_GetSysClockFreq+0x354>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f003 030c 	and.w	r3, r3, #12
 8003136:	2b0c      	cmp	r3, #12
 8003138:	f200 8206 	bhi.w	8003548 <HAL_RCC_GetSysClockFreq+0x440>
 800313c:	a201      	add	r2, pc, #4	; (adr r2, 8003144 <HAL_RCC_GetSysClockFreq+0x3c>)
 800313e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003142:	bf00      	nop
 8003144:	08003179 	.word	0x08003179
 8003148:	08003549 	.word	0x08003549
 800314c:	08003549 	.word	0x08003549
 8003150:	08003549 	.word	0x08003549
 8003154:	08003181 	.word	0x08003181
 8003158:	08003549 	.word	0x08003549
 800315c:	08003549 	.word	0x08003549
 8003160:	08003549 	.word	0x08003549
 8003164:	08003189 	.word	0x08003189
 8003168:	08003549 	.word	0x08003549
 800316c:	08003549 	.word	0x08003549
 8003170:	08003549 	.word	0x08003549
 8003174:	08003379 	.word	0x08003379
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003178:	4bb9      	ldr	r3, [pc, #740]	; (8003460 <HAL_RCC_GetSysClockFreq+0x358>)
 800317a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800317e:	e1e7      	b.n	8003550 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003180:	4bb8      	ldr	r3, [pc, #736]	; (8003464 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003182:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003186:	e1e3      	b.n	8003550 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003188:	4bb4      	ldr	r3, [pc, #720]	; (800345c <HAL_RCC_GetSysClockFreq+0x354>)
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003190:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003194:	4bb1      	ldr	r3, [pc, #708]	; (800345c <HAL_RCC_GetSysClockFreq+0x354>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d071      	beq.n	8003284 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031a0:	4bae      	ldr	r3, [pc, #696]	; (800345c <HAL_RCC_GetSysClockFreq+0x354>)
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	099b      	lsrs	r3, r3, #6
 80031a6:	2200      	movs	r2, #0
 80031a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80031ac:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80031b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80031b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80031bc:	2300      	movs	r3, #0
 80031be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80031c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80031c6:	4622      	mov	r2, r4
 80031c8:	462b      	mov	r3, r5
 80031ca:	f04f 0000 	mov.w	r0, #0
 80031ce:	f04f 0100 	mov.w	r1, #0
 80031d2:	0159      	lsls	r1, r3, #5
 80031d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031d8:	0150      	lsls	r0, r2, #5
 80031da:	4602      	mov	r2, r0
 80031dc:	460b      	mov	r3, r1
 80031de:	4621      	mov	r1, r4
 80031e0:	1a51      	subs	r1, r2, r1
 80031e2:	6439      	str	r1, [r7, #64]	; 0x40
 80031e4:	4629      	mov	r1, r5
 80031e6:	eb63 0301 	sbc.w	r3, r3, r1
 80031ea:	647b      	str	r3, [r7, #68]	; 0x44
 80031ec:	f04f 0200 	mov.w	r2, #0
 80031f0:	f04f 0300 	mov.w	r3, #0
 80031f4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80031f8:	4649      	mov	r1, r9
 80031fa:	018b      	lsls	r3, r1, #6
 80031fc:	4641      	mov	r1, r8
 80031fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003202:	4641      	mov	r1, r8
 8003204:	018a      	lsls	r2, r1, #6
 8003206:	4641      	mov	r1, r8
 8003208:	1a51      	subs	r1, r2, r1
 800320a:	63b9      	str	r1, [r7, #56]	; 0x38
 800320c:	4649      	mov	r1, r9
 800320e:	eb63 0301 	sbc.w	r3, r3, r1
 8003212:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003214:	f04f 0200 	mov.w	r2, #0
 8003218:	f04f 0300 	mov.w	r3, #0
 800321c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003220:	4649      	mov	r1, r9
 8003222:	00cb      	lsls	r3, r1, #3
 8003224:	4641      	mov	r1, r8
 8003226:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800322a:	4641      	mov	r1, r8
 800322c:	00ca      	lsls	r2, r1, #3
 800322e:	4610      	mov	r0, r2
 8003230:	4619      	mov	r1, r3
 8003232:	4603      	mov	r3, r0
 8003234:	4622      	mov	r2, r4
 8003236:	189b      	adds	r3, r3, r2
 8003238:	633b      	str	r3, [r7, #48]	; 0x30
 800323a:	462b      	mov	r3, r5
 800323c:	460a      	mov	r2, r1
 800323e:	eb42 0303 	adc.w	r3, r2, r3
 8003242:	637b      	str	r3, [r7, #52]	; 0x34
 8003244:	f04f 0200 	mov.w	r2, #0
 8003248:	f04f 0300 	mov.w	r3, #0
 800324c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003250:	4629      	mov	r1, r5
 8003252:	024b      	lsls	r3, r1, #9
 8003254:	4621      	mov	r1, r4
 8003256:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800325a:	4621      	mov	r1, r4
 800325c:	024a      	lsls	r2, r1, #9
 800325e:	4610      	mov	r0, r2
 8003260:	4619      	mov	r1, r3
 8003262:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003266:	2200      	movs	r2, #0
 8003268:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800326c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003270:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003274:	f7fd fcb8 	bl	8000be8 <__aeabi_uldivmod>
 8003278:	4602      	mov	r2, r0
 800327a:	460b      	mov	r3, r1
 800327c:	4613      	mov	r3, r2
 800327e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003282:	e067      	b.n	8003354 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003284:	4b75      	ldr	r3, [pc, #468]	; (800345c <HAL_RCC_GetSysClockFreq+0x354>)
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	099b      	lsrs	r3, r3, #6
 800328a:	2200      	movs	r2, #0
 800328c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003290:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003294:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003298:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800329c:	67bb      	str	r3, [r7, #120]	; 0x78
 800329e:	2300      	movs	r3, #0
 80032a0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80032a2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80032a6:	4622      	mov	r2, r4
 80032a8:	462b      	mov	r3, r5
 80032aa:	f04f 0000 	mov.w	r0, #0
 80032ae:	f04f 0100 	mov.w	r1, #0
 80032b2:	0159      	lsls	r1, r3, #5
 80032b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032b8:	0150      	lsls	r0, r2, #5
 80032ba:	4602      	mov	r2, r0
 80032bc:	460b      	mov	r3, r1
 80032be:	4621      	mov	r1, r4
 80032c0:	1a51      	subs	r1, r2, r1
 80032c2:	62b9      	str	r1, [r7, #40]	; 0x28
 80032c4:	4629      	mov	r1, r5
 80032c6:	eb63 0301 	sbc.w	r3, r3, r1
 80032ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032cc:	f04f 0200 	mov.w	r2, #0
 80032d0:	f04f 0300 	mov.w	r3, #0
 80032d4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80032d8:	4649      	mov	r1, r9
 80032da:	018b      	lsls	r3, r1, #6
 80032dc:	4641      	mov	r1, r8
 80032de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032e2:	4641      	mov	r1, r8
 80032e4:	018a      	lsls	r2, r1, #6
 80032e6:	4641      	mov	r1, r8
 80032e8:	ebb2 0a01 	subs.w	sl, r2, r1
 80032ec:	4649      	mov	r1, r9
 80032ee:	eb63 0b01 	sbc.w	fp, r3, r1
 80032f2:	f04f 0200 	mov.w	r2, #0
 80032f6:	f04f 0300 	mov.w	r3, #0
 80032fa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80032fe:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003302:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003306:	4692      	mov	sl, r2
 8003308:	469b      	mov	fp, r3
 800330a:	4623      	mov	r3, r4
 800330c:	eb1a 0303 	adds.w	r3, sl, r3
 8003310:	623b      	str	r3, [r7, #32]
 8003312:	462b      	mov	r3, r5
 8003314:	eb4b 0303 	adc.w	r3, fp, r3
 8003318:	627b      	str	r3, [r7, #36]	; 0x24
 800331a:	f04f 0200 	mov.w	r2, #0
 800331e:	f04f 0300 	mov.w	r3, #0
 8003322:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003326:	4629      	mov	r1, r5
 8003328:	028b      	lsls	r3, r1, #10
 800332a:	4621      	mov	r1, r4
 800332c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003330:	4621      	mov	r1, r4
 8003332:	028a      	lsls	r2, r1, #10
 8003334:	4610      	mov	r0, r2
 8003336:	4619      	mov	r1, r3
 8003338:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800333c:	2200      	movs	r2, #0
 800333e:	673b      	str	r3, [r7, #112]	; 0x70
 8003340:	677a      	str	r2, [r7, #116]	; 0x74
 8003342:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003346:	f7fd fc4f 	bl	8000be8 <__aeabi_uldivmod>
 800334a:	4602      	mov	r2, r0
 800334c:	460b      	mov	r3, r1
 800334e:	4613      	mov	r3, r2
 8003350:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003354:	4b41      	ldr	r3, [pc, #260]	; (800345c <HAL_RCC_GetSysClockFreq+0x354>)
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	0c1b      	lsrs	r3, r3, #16
 800335a:	f003 0303 	and.w	r3, r3, #3
 800335e:	3301      	adds	r3, #1
 8003360:	005b      	lsls	r3, r3, #1
 8003362:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003366:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800336a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800336e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003372:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003376:	e0eb      	b.n	8003550 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003378:	4b38      	ldr	r3, [pc, #224]	; (800345c <HAL_RCC_GetSysClockFreq+0x354>)
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003380:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003384:	4b35      	ldr	r3, [pc, #212]	; (800345c <HAL_RCC_GetSysClockFreq+0x354>)
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d06b      	beq.n	8003468 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003390:	4b32      	ldr	r3, [pc, #200]	; (800345c <HAL_RCC_GetSysClockFreq+0x354>)
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	099b      	lsrs	r3, r3, #6
 8003396:	2200      	movs	r2, #0
 8003398:	66bb      	str	r3, [r7, #104]	; 0x68
 800339a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800339c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800339e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033a2:	663b      	str	r3, [r7, #96]	; 0x60
 80033a4:	2300      	movs	r3, #0
 80033a6:	667b      	str	r3, [r7, #100]	; 0x64
 80033a8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80033ac:	4622      	mov	r2, r4
 80033ae:	462b      	mov	r3, r5
 80033b0:	f04f 0000 	mov.w	r0, #0
 80033b4:	f04f 0100 	mov.w	r1, #0
 80033b8:	0159      	lsls	r1, r3, #5
 80033ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033be:	0150      	lsls	r0, r2, #5
 80033c0:	4602      	mov	r2, r0
 80033c2:	460b      	mov	r3, r1
 80033c4:	4621      	mov	r1, r4
 80033c6:	1a51      	subs	r1, r2, r1
 80033c8:	61b9      	str	r1, [r7, #24]
 80033ca:	4629      	mov	r1, r5
 80033cc:	eb63 0301 	sbc.w	r3, r3, r1
 80033d0:	61fb      	str	r3, [r7, #28]
 80033d2:	f04f 0200 	mov.w	r2, #0
 80033d6:	f04f 0300 	mov.w	r3, #0
 80033da:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80033de:	4659      	mov	r1, fp
 80033e0:	018b      	lsls	r3, r1, #6
 80033e2:	4651      	mov	r1, sl
 80033e4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033e8:	4651      	mov	r1, sl
 80033ea:	018a      	lsls	r2, r1, #6
 80033ec:	4651      	mov	r1, sl
 80033ee:	ebb2 0801 	subs.w	r8, r2, r1
 80033f2:	4659      	mov	r1, fp
 80033f4:	eb63 0901 	sbc.w	r9, r3, r1
 80033f8:	f04f 0200 	mov.w	r2, #0
 80033fc:	f04f 0300 	mov.w	r3, #0
 8003400:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003404:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003408:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800340c:	4690      	mov	r8, r2
 800340e:	4699      	mov	r9, r3
 8003410:	4623      	mov	r3, r4
 8003412:	eb18 0303 	adds.w	r3, r8, r3
 8003416:	613b      	str	r3, [r7, #16]
 8003418:	462b      	mov	r3, r5
 800341a:	eb49 0303 	adc.w	r3, r9, r3
 800341e:	617b      	str	r3, [r7, #20]
 8003420:	f04f 0200 	mov.w	r2, #0
 8003424:	f04f 0300 	mov.w	r3, #0
 8003428:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800342c:	4629      	mov	r1, r5
 800342e:	024b      	lsls	r3, r1, #9
 8003430:	4621      	mov	r1, r4
 8003432:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003436:	4621      	mov	r1, r4
 8003438:	024a      	lsls	r2, r1, #9
 800343a:	4610      	mov	r0, r2
 800343c:	4619      	mov	r1, r3
 800343e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003442:	2200      	movs	r2, #0
 8003444:	65bb      	str	r3, [r7, #88]	; 0x58
 8003446:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003448:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800344c:	f7fd fbcc 	bl	8000be8 <__aeabi_uldivmod>
 8003450:	4602      	mov	r2, r0
 8003452:	460b      	mov	r3, r1
 8003454:	4613      	mov	r3, r2
 8003456:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800345a:	e065      	b.n	8003528 <HAL_RCC_GetSysClockFreq+0x420>
 800345c:	40023800 	.word	0x40023800
 8003460:	00f42400 	.word	0x00f42400
 8003464:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003468:	4b3d      	ldr	r3, [pc, #244]	; (8003560 <HAL_RCC_GetSysClockFreq+0x458>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	099b      	lsrs	r3, r3, #6
 800346e:	2200      	movs	r2, #0
 8003470:	4618      	mov	r0, r3
 8003472:	4611      	mov	r1, r2
 8003474:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003478:	653b      	str	r3, [r7, #80]	; 0x50
 800347a:	2300      	movs	r3, #0
 800347c:	657b      	str	r3, [r7, #84]	; 0x54
 800347e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003482:	4642      	mov	r2, r8
 8003484:	464b      	mov	r3, r9
 8003486:	f04f 0000 	mov.w	r0, #0
 800348a:	f04f 0100 	mov.w	r1, #0
 800348e:	0159      	lsls	r1, r3, #5
 8003490:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003494:	0150      	lsls	r0, r2, #5
 8003496:	4602      	mov	r2, r0
 8003498:	460b      	mov	r3, r1
 800349a:	4641      	mov	r1, r8
 800349c:	1a51      	subs	r1, r2, r1
 800349e:	60b9      	str	r1, [r7, #8]
 80034a0:	4649      	mov	r1, r9
 80034a2:	eb63 0301 	sbc.w	r3, r3, r1
 80034a6:	60fb      	str	r3, [r7, #12]
 80034a8:	f04f 0200 	mov.w	r2, #0
 80034ac:	f04f 0300 	mov.w	r3, #0
 80034b0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80034b4:	4659      	mov	r1, fp
 80034b6:	018b      	lsls	r3, r1, #6
 80034b8:	4651      	mov	r1, sl
 80034ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034be:	4651      	mov	r1, sl
 80034c0:	018a      	lsls	r2, r1, #6
 80034c2:	4651      	mov	r1, sl
 80034c4:	1a54      	subs	r4, r2, r1
 80034c6:	4659      	mov	r1, fp
 80034c8:	eb63 0501 	sbc.w	r5, r3, r1
 80034cc:	f04f 0200 	mov.w	r2, #0
 80034d0:	f04f 0300 	mov.w	r3, #0
 80034d4:	00eb      	lsls	r3, r5, #3
 80034d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034da:	00e2      	lsls	r2, r4, #3
 80034dc:	4614      	mov	r4, r2
 80034de:	461d      	mov	r5, r3
 80034e0:	4643      	mov	r3, r8
 80034e2:	18e3      	adds	r3, r4, r3
 80034e4:	603b      	str	r3, [r7, #0]
 80034e6:	464b      	mov	r3, r9
 80034e8:	eb45 0303 	adc.w	r3, r5, r3
 80034ec:	607b      	str	r3, [r7, #4]
 80034ee:	f04f 0200 	mov.w	r2, #0
 80034f2:	f04f 0300 	mov.w	r3, #0
 80034f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034fa:	4629      	mov	r1, r5
 80034fc:	028b      	lsls	r3, r1, #10
 80034fe:	4621      	mov	r1, r4
 8003500:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003504:	4621      	mov	r1, r4
 8003506:	028a      	lsls	r2, r1, #10
 8003508:	4610      	mov	r0, r2
 800350a:	4619      	mov	r1, r3
 800350c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003510:	2200      	movs	r2, #0
 8003512:	64bb      	str	r3, [r7, #72]	; 0x48
 8003514:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003516:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800351a:	f7fd fb65 	bl	8000be8 <__aeabi_uldivmod>
 800351e:	4602      	mov	r2, r0
 8003520:	460b      	mov	r3, r1
 8003522:	4613      	mov	r3, r2
 8003524:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003528:	4b0d      	ldr	r3, [pc, #52]	; (8003560 <HAL_RCC_GetSysClockFreq+0x458>)
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	0f1b      	lsrs	r3, r3, #28
 800352e:	f003 0307 	and.w	r3, r3, #7
 8003532:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003536:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800353a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800353e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003542:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003546:	e003      	b.n	8003550 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003548:	4b06      	ldr	r3, [pc, #24]	; (8003564 <HAL_RCC_GetSysClockFreq+0x45c>)
 800354a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800354e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003550:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003554:	4618      	mov	r0, r3
 8003556:	37b8      	adds	r7, #184	; 0xb8
 8003558:	46bd      	mov	sp, r7
 800355a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800355e:	bf00      	nop
 8003560:	40023800 	.word	0x40023800
 8003564:	00f42400 	.word	0x00f42400

08003568 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b086      	sub	sp, #24
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e28d      	b.n	8003a96 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	2b00      	cmp	r3, #0
 8003584:	f000 8083 	beq.w	800368e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003588:	4b94      	ldr	r3, [pc, #592]	; (80037dc <HAL_RCC_OscConfig+0x274>)
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f003 030c 	and.w	r3, r3, #12
 8003590:	2b04      	cmp	r3, #4
 8003592:	d019      	beq.n	80035c8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003594:	4b91      	ldr	r3, [pc, #580]	; (80037dc <HAL_RCC_OscConfig+0x274>)
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800359c:	2b08      	cmp	r3, #8
 800359e:	d106      	bne.n	80035ae <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80035a0:	4b8e      	ldr	r3, [pc, #568]	; (80037dc <HAL_RCC_OscConfig+0x274>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035ac:	d00c      	beq.n	80035c8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035ae:	4b8b      	ldr	r3, [pc, #556]	; (80037dc <HAL_RCC_OscConfig+0x274>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80035b6:	2b0c      	cmp	r3, #12
 80035b8:	d112      	bne.n	80035e0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035ba:	4b88      	ldr	r3, [pc, #544]	; (80037dc <HAL_RCC_OscConfig+0x274>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035c6:	d10b      	bne.n	80035e0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c8:	4b84      	ldr	r3, [pc, #528]	; (80037dc <HAL_RCC_OscConfig+0x274>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d05b      	beq.n	800368c <HAL_RCC_OscConfig+0x124>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d157      	bne.n	800368c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e25a      	b.n	8003a96 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035e8:	d106      	bne.n	80035f8 <HAL_RCC_OscConfig+0x90>
 80035ea:	4b7c      	ldr	r3, [pc, #496]	; (80037dc <HAL_RCC_OscConfig+0x274>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a7b      	ldr	r2, [pc, #492]	; (80037dc <HAL_RCC_OscConfig+0x274>)
 80035f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035f4:	6013      	str	r3, [r2, #0]
 80035f6:	e01d      	b.n	8003634 <HAL_RCC_OscConfig+0xcc>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003600:	d10c      	bne.n	800361c <HAL_RCC_OscConfig+0xb4>
 8003602:	4b76      	ldr	r3, [pc, #472]	; (80037dc <HAL_RCC_OscConfig+0x274>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a75      	ldr	r2, [pc, #468]	; (80037dc <HAL_RCC_OscConfig+0x274>)
 8003608:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800360c:	6013      	str	r3, [r2, #0]
 800360e:	4b73      	ldr	r3, [pc, #460]	; (80037dc <HAL_RCC_OscConfig+0x274>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a72      	ldr	r2, [pc, #456]	; (80037dc <HAL_RCC_OscConfig+0x274>)
 8003614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003618:	6013      	str	r3, [r2, #0]
 800361a:	e00b      	b.n	8003634 <HAL_RCC_OscConfig+0xcc>
 800361c:	4b6f      	ldr	r3, [pc, #444]	; (80037dc <HAL_RCC_OscConfig+0x274>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a6e      	ldr	r2, [pc, #440]	; (80037dc <HAL_RCC_OscConfig+0x274>)
 8003622:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003626:	6013      	str	r3, [r2, #0]
 8003628:	4b6c      	ldr	r3, [pc, #432]	; (80037dc <HAL_RCC_OscConfig+0x274>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a6b      	ldr	r2, [pc, #428]	; (80037dc <HAL_RCC_OscConfig+0x274>)
 800362e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003632:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d013      	beq.n	8003664 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800363c:	f7fe faa0 	bl	8001b80 <HAL_GetTick>
 8003640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003642:	e008      	b.n	8003656 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003644:	f7fe fa9c 	bl	8001b80 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b64      	cmp	r3, #100	; 0x64
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e21f      	b.n	8003a96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003656:	4b61      	ldr	r3, [pc, #388]	; (80037dc <HAL_RCC_OscConfig+0x274>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d0f0      	beq.n	8003644 <HAL_RCC_OscConfig+0xdc>
 8003662:	e014      	b.n	800368e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003664:	f7fe fa8c 	bl	8001b80 <HAL_GetTick>
 8003668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800366a:	e008      	b.n	800367e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800366c:	f7fe fa88 	bl	8001b80 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b64      	cmp	r3, #100	; 0x64
 8003678:	d901      	bls.n	800367e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e20b      	b.n	8003a96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800367e:	4b57      	ldr	r3, [pc, #348]	; (80037dc <HAL_RCC_OscConfig+0x274>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1f0      	bne.n	800366c <HAL_RCC_OscConfig+0x104>
 800368a:	e000      	b.n	800368e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800368c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d06f      	beq.n	800377a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800369a:	4b50      	ldr	r3, [pc, #320]	; (80037dc <HAL_RCC_OscConfig+0x274>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f003 030c 	and.w	r3, r3, #12
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d017      	beq.n	80036d6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80036a6:	4b4d      	ldr	r3, [pc, #308]	; (80037dc <HAL_RCC_OscConfig+0x274>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80036ae:	2b08      	cmp	r3, #8
 80036b0:	d105      	bne.n	80036be <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80036b2:	4b4a      	ldr	r3, [pc, #296]	; (80037dc <HAL_RCC_OscConfig+0x274>)
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00b      	beq.n	80036d6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036be:	4b47      	ldr	r3, [pc, #284]	; (80037dc <HAL_RCC_OscConfig+0x274>)
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80036c6:	2b0c      	cmp	r3, #12
 80036c8:	d11c      	bne.n	8003704 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036ca:	4b44      	ldr	r3, [pc, #272]	; (80037dc <HAL_RCC_OscConfig+0x274>)
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d116      	bne.n	8003704 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036d6:	4b41      	ldr	r3, [pc, #260]	; (80037dc <HAL_RCC_OscConfig+0x274>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d005      	beq.n	80036ee <HAL_RCC_OscConfig+0x186>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d001      	beq.n	80036ee <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e1d3      	b.n	8003a96 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ee:	4b3b      	ldr	r3, [pc, #236]	; (80037dc <HAL_RCC_OscConfig+0x274>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	00db      	lsls	r3, r3, #3
 80036fc:	4937      	ldr	r1, [pc, #220]	; (80037dc <HAL_RCC_OscConfig+0x274>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003702:	e03a      	b.n	800377a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d020      	beq.n	800374e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800370c:	4b34      	ldr	r3, [pc, #208]	; (80037e0 <HAL_RCC_OscConfig+0x278>)
 800370e:	2201      	movs	r2, #1
 8003710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003712:	f7fe fa35 	bl	8001b80 <HAL_GetTick>
 8003716:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003718:	e008      	b.n	800372c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800371a:	f7fe fa31 	bl	8001b80 <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	2b02      	cmp	r3, #2
 8003726:	d901      	bls.n	800372c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e1b4      	b.n	8003a96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800372c:	4b2b      	ldr	r3, [pc, #172]	; (80037dc <HAL_RCC_OscConfig+0x274>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0302 	and.w	r3, r3, #2
 8003734:	2b00      	cmp	r3, #0
 8003736:	d0f0      	beq.n	800371a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003738:	4b28      	ldr	r3, [pc, #160]	; (80037dc <HAL_RCC_OscConfig+0x274>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	00db      	lsls	r3, r3, #3
 8003746:	4925      	ldr	r1, [pc, #148]	; (80037dc <HAL_RCC_OscConfig+0x274>)
 8003748:	4313      	orrs	r3, r2
 800374a:	600b      	str	r3, [r1, #0]
 800374c:	e015      	b.n	800377a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800374e:	4b24      	ldr	r3, [pc, #144]	; (80037e0 <HAL_RCC_OscConfig+0x278>)
 8003750:	2200      	movs	r2, #0
 8003752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003754:	f7fe fa14 	bl	8001b80 <HAL_GetTick>
 8003758:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800375a:	e008      	b.n	800376e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800375c:	f7fe fa10 	bl	8001b80 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b02      	cmp	r3, #2
 8003768:	d901      	bls.n	800376e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e193      	b.n	8003a96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800376e:	4b1b      	ldr	r3, [pc, #108]	; (80037dc <HAL_RCC_OscConfig+0x274>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d1f0      	bne.n	800375c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0308 	and.w	r3, r3, #8
 8003782:	2b00      	cmp	r3, #0
 8003784:	d036      	beq.n	80037f4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	695b      	ldr	r3, [r3, #20]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d016      	beq.n	80037bc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800378e:	4b15      	ldr	r3, [pc, #84]	; (80037e4 <HAL_RCC_OscConfig+0x27c>)
 8003790:	2201      	movs	r2, #1
 8003792:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003794:	f7fe f9f4 	bl	8001b80 <HAL_GetTick>
 8003798:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800379a:	e008      	b.n	80037ae <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800379c:	f7fe f9f0 	bl	8001b80 <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d901      	bls.n	80037ae <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e173      	b.n	8003a96 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037ae:	4b0b      	ldr	r3, [pc, #44]	; (80037dc <HAL_RCC_OscConfig+0x274>)
 80037b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d0f0      	beq.n	800379c <HAL_RCC_OscConfig+0x234>
 80037ba:	e01b      	b.n	80037f4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037bc:	4b09      	ldr	r3, [pc, #36]	; (80037e4 <HAL_RCC_OscConfig+0x27c>)
 80037be:	2200      	movs	r2, #0
 80037c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c2:	f7fe f9dd 	bl	8001b80 <HAL_GetTick>
 80037c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037c8:	e00e      	b.n	80037e8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037ca:	f7fe f9d9 	bl	8001b80 <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d907      	bls.n	80037e8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e15c      	b.n	8003a96 <HAL_RCC_OscConfig+0x52e>
 80037dc:	40023800 	.word	0x40023800
 80037e0:	42470000 	.word	0x42470000
 80037e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037e8:	4b8a      	ldr	r3, [pc, #552]	; (8003a14 <HAL_RCC_OscConfig+0x4ac>)
 80037ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d1ea      	bne.n	80037ca <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0304 	and.w	r3, r3, #4
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	f000 8097 	beq.w	8003930 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003802:	2300      	movs	r3, #0
 8003804:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003806:	4b83      	ldr	r3, [pc, #524]	; (8003a14 <HAL_RCC_OscConfig+0x4ac>)
 8003808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d10f      	bne.n	8003832 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003812:	2300      	movs	r3, #0
 8003814:	60bb      	str	r3, [r7, #8]
 8003816:	4b7f      	ldr	r3, [pc, #508]	; (8003a14 <HAL_RCC_OscConfig+0x4ac>)
 8003818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381a:	4a7e      	ldr	r2, [pc, #504]	; (8003a14 <HAL_RCC_OscConfig+0x4ac>)
 800381c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003820:	6413      	str	r3, [r2, #64]	; 0x40
 8003822:	4b7c      	ldr	r3, [pc, #496]	; (8003a14 <HAL_RCC_OscConfig+0x4ac>)
 8003824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800382a:	60bb      	str	r3, [r7, #8]
 800382c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800382e:	2301      	movs	r3, #1
 8003830:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003832:	4b79      	ldr	r3, [pc, #484]	; (8003a18 <HAL_RCC_OscConfig+0x4b0>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800383a:	2b00      	cmp	r3, #0
 800383c:	d118      	bne.n	8003870 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800383e:	4b76      	ldr	r3, [pc, #472]	; (8003a18 <HAL_RCC_OscConfig+0x4b0>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a75      	ldr	r2, [pc, #468]	; (8003a18 <HAL_RCC_OscConfig+0x4b0>)
 8003844:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003848:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800384a:	f7fe f999 	bl	8001b80 <HAL_GetTick>
 800384e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003850:	e008      	b.n	8003864 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003852:	f7fe f995 	bl	8001b80 <HAL_GetTick>
 8003856:	4602      	mov	r2, r0
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	2b02      	cmp	r3, #2
 800385e:	d901      	bls.n	8003864 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	e118      	b.n	8003a96 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003864:	4b6c      	ldr	r3, [pc, #432]	; (8003a18 <HAL_RCC_OscConfig+0x4b0>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800386c:	2b00      	cmp	r3, #0
 800386e:	d0f0      	beq.n	8003852 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d106      	bne.n	8003886 <HAL_RCC_OscConfig+0x31e>
 8003878:	4b66      	ldr	r3, [pc, #408]	; (8003a14 <HAL_RCC_OscConfig+0x4ac>)
 800387a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387c:	4a65      	ldr	r2, [pc, #404]	; (8003a14 <HAL_RCC_OscConfig+0x4ac>)
 800387e:	f043 0301 	orr.w	r3, r3, #1
 8003882:	6713      	str	r3, [r2, #112]	; 0x70
 8003884:	e01c      	b.n	80038c0 <HAL_RCC_OscConfig+0x358>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	2b05      	cmp	r3, #5
 800388c:	d10c      	bne.n	80038a8 <HAL_RCC_OscConfig+0x340>
 800388e:	4b61      	ldr	r3, [pc, #388]	; (8003a14 <HAL_RCC_OscConfig+0x4ac>)
 8003890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003892:	4a60      	ldr	r2, [pc, #384]	; (8003a14 <HAL_RCC_OscConfig+0x4ac>)
 8003894:	f043 0304 	orr.w	r3, r3, #4
 8003898:	6713      	str	r3, [r2, #112]	; 0x70
 800389a:	4b5e      	ldr	r3, [pc, #376]	; (8003a14 <HAL_RCC_OscConfig+0x4ac>)
 800389c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800389e:	4a5d      	ldr	r2, [pc, #372]	; (8003a14 <HAL_RCC_OscConfig+0x4ac>)
 80038a0:	f043 0301 	orr.w	r3, r3, #1
 80038a4:	6713      	str	r3, [r2, #112]	; 0x70
 80038a6:	e00b      	b.n	80038c0 <HAL_RCC_OscConfig+0x358>
 80038a8:	4b5a      	ldr	r3, [pc, #360]	; (8003a14 <HAL_RCC_OscConfig+0x4ac>)
 80038aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ac:	4a59      	ldr	r2, [pc, #356]	; (8003a14 <HAL_RCC_OscConfig+0x4ac>)
 80038ae:	f023 0301 	bic.w	r3, r3, #1
 80038b2:	6713      	str	r3, [r2, #112]	; 0x70
 80038b4:	4b57      	ldr	r3, [pc, #348]	; (8003a14 <HAL_RCC_OscConfig+0x4ac>)
 80038b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b8:	4a56      	ldr	r2, [pc, #344]	; (8003a14 <HAL_RCC_OscConfig+0x4ac>)
 80038ba:	f023 0304 	bic.w	r3, r3, #4
 80038be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d015      	beq.n	80038f4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038c8:	f7fe f95a 	bl	8001b80 <HAL_GetTick>
 80038cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ce:	e00a      	b.n	80038e6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038d0:	f7fe f956 	bl	8001b80 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	f241 3288 	movw	r2, #5000	; 0x1388
 80038de:	4293      	cmp	r3, r2
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e0d7      	b.n	8003a96 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038e6:	4b4b      	ldr	r3, [pc, #300]	; (8003a14 <HAL_RCC_OscConfig+0x4ac>)
 80038e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d0ee      	beq.n	80038d0 <HAL_RCC_OscConfig+0x368>
 80038f2:	e014      	b.n	800391e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f4:	f7fe f944 	bl	8001b80 <HAL_GetTick>
 80038f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038fa:	e00a      	b.n	8003912 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038fc:	f7fe f940 	bl	8001b80 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	f241 3288 	movw	r2, #5000	; 0x1388
 800390a:	4293      	cmp	r3, r2
 800390c:	d901      	bls.n	8003912 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e0c1      	b.n	8003a96 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003912:	4b40      	ldr	r3, [pc, #256]	; (8003a14 <HAL_RCC_OscConfig+0x4ac>)
 8003914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003916:	f003 0302 	and.w	r3, r3, #2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1ee      	bne.n	80038fc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800391e:	7dfb      	ldrb	r3, [r7, #23]
 8003920:	2b01      	cmp	r3, #1
 8003922:	d105      	bne.n	8003930 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003924:	4b3b      	ldr	r3, [pc, #236]	; (8003a14 <HAL_RCC_OscConfig+0x4ac>)
 8003926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003928:	4a3a      	ldr	r2, [pc, #232]	; (8003a14 <HAL_RCC_OscConfig+0x4ac>)
 800392a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800392e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	2b00      	cmp	r3, #0
 8003936:	f000 80ad 	beq.w	8003a94 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800393a:	4b36      	ldr	r3, [pc, #216]	; (8003a14 <HAL_RCC_OscConfig+0x4ac>)
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f003 030c 	and.w	r3, r3, #12
 8003942:	2b08      	cmp	r3, #8
 8003944:	d060      	beq.n	8003a08 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	2b02      	cmp	r3, #2
 800394c:	d145      	bne.n	80039da <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800394e:	4b33      	ldr	r3, [pc, #204]	; (8003a1c <HAL_RCC_OscConfig+0x4b4>)
 8003950:	2200      	movs	r2, #0
 8003952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003954:	f7fe f914 	bl	8001b80 <HAL_GetTick>
 8003958:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800395a:	e008      	b.n	800396e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800395c:	f7fe f910 	bl	8001b80 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b02      	cmp	r3, #2
 8003968:	d901      	bls.n	800396e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e093      	b.n	8003a96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800396e:	4b29      	ldr	r3, [pc, #164]	; (8003a14 <HAL_RCC_OscConfig+0x4ac>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1f0      	bne.n	800395c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	69da      	ldr	r2, [r3, #28]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a1b      	ldr	r3, [r3, #32]
 8003982:	431a      	orrs	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003988:	019b      	lsls	r3, r3, #6
 800398a:	431a      	orrs	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003990:	085b      	lsrs	r3, r3, #1
 8003992:	3b01      	subs	r3, #1
 8003994:	041b      	lsls	r3, r3, #16
 8003996:	431a      	orrs	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399c:	061b      	lsls	r3, r3, #24
 800399e:	431a      	orrs	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a4:	071b      	lsls	r3, r3, #28
 80039a6:	491b      	ldr	r1, [pc, #108]	; (8003a14 <HAL_RCC_OscConfig+0x4ac>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039ac:	4b1b      	ldr	r3, [pc, #108]	; (8003a1c <HAL_RCC_OscConfig+0x4b4>)
 80039ae:	2201      	movs	r2, #1
 80039b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b2:	f7fe f8e5 	bl	8001b80 <HAL_GetTick>
 80039b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039b8:	e008      	b.n	80039cc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039ba:	f7fe f8e1 	bl	8001b80 <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d901      	bls.n	80039cc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e064      	b.n	8003a96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039cc:	4b11      	ldr	r3, [pc, #68]	; (8003a14 <HAL_RCC_OscConfig+0x4ac>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d0f0      	beq.n	80039ba <HAL_RCC_OscConfig+0x452>
 80039d8:	e05c      	b.n	8003a94 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039da:	4b10      	ldr	r3, [pc, #64]	; (8003a1c <HAL_RCC_OscConfig+0x4b4>)
 80039dc:	2200      	movs	r2, #0
 80039de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e0:	f7fe f8ce 	bl	8001b80 <HAL_GetTick>
 80039e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039e6:	e008      	b.n	80039fa <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039e8:	f7fe f8ca 	bl	8001b80 <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d901      	bls.n	80039fa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e04d      	b.n	8003a96 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039fa:	4b06      	ldr	r3, [pc, #24]	; (8003a14 <HAL_RCC_OscConfig+0x4ac>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1f0      	bne.n	80039e8 <HAL_RCC_OscConfig+0x480>
 8003a06:	e045      	b.n	8003a94 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d107      	bne.n	8003a20 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e040      	b.n	8003a96 <HAL_RCC_OscConfig+0x52e>
 8003a14:	40023800 	.word	0x40023800
 8003a18:	40007000 	.word	0x40007000
 8003a1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a20:	4b1f      	ldr	r3, [pc, #124]	; (8003aa0 <HAL_RCC_OscConfig+0x538>)
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	699b      	ldr	r3, [r3, #24]
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d030      	beq.n	8003a90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d129      	bne.n	8003a90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d122      	bne.n	8003a90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a50:	4013      	ands	r3, r2
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d119      	bne.n	8003a90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a66:	085b      	lsrs	r3, r3, #1
 8003a68:	3b01      	subs	r3, #1
 8003a6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d10f      	bne.n	8003a90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d107      	bne.n	8003a90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d001      	beq.n	8003a94 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e000      	b.n	8003a96 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3718      	adds	r7, #24
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	40023800 	.word	0x40023800

08003aa4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d101      	bne.n	8003ab6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e041      	b.n	8003b3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d106      	bne.n	8003ad0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f7fd fe10 	bl	80016f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	3304      	adds	r3, #4
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	4610      	mov	r0, r2
 8003ae4:	f000 fa10 	bl	8003f08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3708      	adds	r7, #8
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}

08003b42 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b42:	b580      	push	{r7, lr}
 8003b44:	b082      	sub	sp, #8
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d101      	bne.n	8003b54 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e041      	b.n	8003bd8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d106      	bne.n	8003b6e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 f839 	bl	8003be0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2202      	movs	r2, #2
 8003b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	3304      	adds	r3, #4
 8003b7e:	4619      	mov	r1, r3
 8003b80:	4610      	mov	r0, r2
 8003b82:	f000 f9c1 	bl	8003f08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2201      	movs	r2, #1
 8003b92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3708      	adds	r7, #8
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b086      	sub	sp, #24
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c00:	2300      	movs	r3, #0
 8003c02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d101      	bne.n	8003c12 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003c0e:	2302      	movs	r3, #2
 8003c10:	e0ae      	b.n	8003d70 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2b0c      	cmp	r3, #12
 8003c1e:	f200 809f 	bhi.w	8003d60 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003c22:	a201      	add	r2, pc, #4	; (adr r2, 8003c28 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c28:	08003c5d 	.word	0x08003c5d
 8003c2c:	08003d61 	.word	0x08003d61
 8003c30:	08003d61 	.word	0x08003d61
 8003c34:	08003d61 	.word	0x08003d61
 8003c38:	08003c9d 	.word	0x08003c9d
 8003c3c:	08003d61 	.word	0x08003d61
 8003c40:	08003d61 	.word	0x08003d61
 8003c44:	08003d61 	.word	0x08003d61
 8003c48:	08003cdf 	.word	0x08003cdf
 8003c4c:	08003d61 	.word	0x08003d61
 8003c50:	08003d61 	.word	0x08003d61
 8003c54:	08003d61 	.word	0x08003d61
 8003c58:	08003d1f 	.word	0x08003d1f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68b9      	ldr	r1, [r7, #8]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f000 f9f0 	bl	8004048 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	699a      	ldr	r2, [r3, #24]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f042 0208 	orr.w	r2, r2, #8
 8003c76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	699a      	ldr	r2, [r3, #24]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f022 0204 	bic.w	r2, r2, #4
 8003c86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	6999      	ldr	r1, [r3, #24]
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	691a      	ldr	r2, [r3, #16]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	430a      	orrs	r2, r1
 8003c98:	619a      	str	r2, [r3, #24]
      break;
 8003c9a:	e064      	b.n	8003d66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68b9      	ldr	r1, [r7, #8]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f000 fa40 	bl	8004128 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	699a      	ldr	r2, [r3, #24]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	699a      	ldr	r2, [r3, #24]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	6999      	ldr	r1, [r3, #24]
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	021a      	lsls	r2, r3, #8
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	619a      	str	r2, [r3, #24]
      break;
 8003cdc:	e043      	b.n	8003d66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68b9      	ldr	r1, [r7, #8]
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f000 fa95 	bl	8004214 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	69da      	ldr	r2, [r3, #28]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f042 0208 	orr.w	r2, r2, #8
 8003cf8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	69da      	ldr	r2, [r3, #28]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f022 0204 	bic.w	r2, r2, #4
 8003d08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	69d9      	ldr	r1, [r3, #28]
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	691a      	ldr	r2, [r3, #16]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	430a      	orrs	r2, r1
 8003d1a:	61da      	str	r2, [r3, #28]
      break;
 8003d1c:	e023      	b.n	8003d66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68b9      	ldr	r1, [r7, #8]
 8003d24:	4618      	mov	r0, r3
 8003d26:	f000 fae9 	bl	80042fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	69da      	ldr	r2, [r3, #28]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	69da      	ldr	r2, [r3, #28]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	69d9      	ldr	r1, [r3, #28]
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	021a      	lsls	r2, r3, #8
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	61da      	str	r2, [r3, #28]
      break;
 8003d5e:	e002      	b.n	8003d66 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	75fb      	strb	r3, [r7, #23]
      break;
 8003d64:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3718      	adds	r7, #24
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d82:	2300      	movs	r3, #0
 8003d84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d101      	bne.n	8003d94 <HAL_TIM_ConfigClockSource+0x1c>
 8003d90:	2302      	movs	r3, #2
 8003d92:	e0b4      	b.n	8003efe <HAL_TIM_ConfigClockSource+0x186>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2202      	movs	r2, #2
 8003da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003db2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003dba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68ba      	ldr	r2, [r7, #8]
 8003dc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dcc:	d03e      	beq.n	8003e4c <HAL_TIM_ConfigClockSource+0xd4>
 8003dce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dd2:	f200 8087 	bhi.w	8003ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8003dd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dda:	f000 8086 	beq.w	8003eea <HAL_TIM_ConfigClockSource+0x172>
 8003dde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003de2:	d87f      	bhi.n	8003ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8003de4:	2b70      	cmp	r3, #112	; 0x70
 8003de6:	d01a      	beq.n	8003e1e <HAL_TIM_ConfigClockSource+0xa6>
 8003de8:	2b70      	cmp	r3, #112	; 0x70
 8003dea:	d87b      	bhi.n	8003ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8003dec:	2b60      	cmp	r3, #96	; 0x60
 8003dee:	d050      	beq.n	8003e92 <HAL_TIM_ConfigClockSource+0x11a>
 8003df0:	2b60      	cmp	r3, #96	; 0x60
 8003df2:	d877      	bhi.n	8003ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8003df4:	2b50      	cmp	r3, #80	; 0x50
 8003df6:	d03c      	beq.n	8003e72 <HAL_TIM_ConfigClockSource+0xfa>
 8003df8:	2b50      	cmp	r3, #80	; 0x50
 8003dfa:	d873      	bhi.n	8003ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8003dfc:	2b40      	cmp	r3, #64	; 0x40
 8003dfe:	d058      	beq.n	8003eb2 <HAL_TIM_ConfigClockSource+0x13a>
 8003e00:	2b40      	cmp	r3, #64	; 0x40
 8003e02:	d86f      	bhi.n	8003ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8003e04:	2b30      	cmp	r3, #48	; 0x30
 8003e06:	d064      	beq.n	8003ed2 <HAL_TIM_ConfigClockSource+0x15a>
 8003e08:	2b30      	cmp	r3, #48	; 0x30
 8003e0a:	d86b      	bhi.n	8003ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8003e0c:	2b20      	cmp	r3, #32
 8003e0e:	d060      	beq.n	8003ed2 <HAL_TIM_ConfigClockSource+0x15a>
 8003e10:	2b20      	cmp	r3, #32
 8003e12:	d867      	bhi.n	8003ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d05c      	beq.n	8003ed2 <HAL_TIM_ConfigClockSource+0x15a>
 8003e18:	2b10      	cmp	r3, #16
 8003e1a:	d05a      	beq.n	8003ed2 <HAL_TIM_ConfigClockSource+0x15a>
 8003e1c:	e062      	b.n	8003ee4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6818      	ldr	r0, [r3, #0]
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	6899      	ldr	r1, [r3, #8]
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	685a      	ldr	r2, [r3, #4]
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	f000 fb35 	bl	800449c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68ba      	ldr	r2, [r7, #8]
 8003e48:	609a      	str	r2, [r3, #8]
      break;
 8003e4a:	e04f      	b.n	8003eec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6818      	ldr	r0, [r3, #0]
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	6899      	ldr	r1, [r3, #8]
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	685a      	ldr	r2, [r3, #4]
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	f000 fb1e 	bl	800449c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	689a      	ldr	r2, [r3, #8]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e6e:	609a      	str	r2, [r3, #8]
      break;
 8003e70:	e03c      	b.n	8003eec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6818      	ldr	r0, [r3, #0]
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	6859      	ldr	r1, [r3, #4]
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	461a      	mov	r2, r3
 8003e80:	f000 fa92 	bl	80043a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	2150      	movs	r1, #80	; 0x50
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f000 faeb 	bl	8004466 <TIM_ITRx_SetConfig>
      break;
 8003e90:	e02c      	b.n	8003eec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6818      	ldr	r0, [r3, #0]
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	6859      	ldr	r1, [r3, #4]
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	f000 fab1 	bl	8004406 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2160      	movs	r1, #96	; 0x60
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f000 fadb 	bl	8004466 <TIM_ITRx_SetConfig>
      break;
 8003eb0:	e01c      	b.n	8003eec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6818      	ldr	r0, [r3, #0]
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	6859      	ldr	r1, [r3, #4]
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	f000 fa72 	bl	80043a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2140      	movs	r1, #64	; 0x40
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f000 facb 	bl	8004466 <TIM_ITRx_SetConfig>
      break;
 8003ed0:	e00c      	b.n	8003eec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4619      	mov	r1, r3
 8003edc:	4610      	mov	r0, r2
 8003ede:	f000 fac2 	bl	8004466 <TIM_ITRx_SetConfig>
      break;
 8003ee2:	e003      	b.n	8003eec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ee8:	e000      	b.n	8003eec <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003eea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3710      	adds	r7, #16
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
	...

08003f08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b085      	sub	sp, #20
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a40      	ldr	r2, [pc, #256]	; (800401c <TIM_Base_SetConfig+0x114>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d013      	beq.n	8003f48 <TIM_Base_SetConfig+0x40>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f26:	d00f      	beq.n	8003f48 <TIM_Base_SetConfig+0x40>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a3d      	ldr	r2, [pc, #244]	; (8004020 <TIM_Base_SetConfig+0x118>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d00b      	beq.n	8003f48 <TIM_Base_SetConfig+0x40>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a3c      	ldr	r2, [pc, #240]	; (8004024 <TIM_Base_SetConfig+0x11c>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d007      	beq.n	8003f48 <TIM_Base_SetConfig+0x40>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a3b      	ldr	r2, [pc, #236]	; (8004028 <TIM_Base_SetConfig+0x120>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d003      	beq.n	8003f48 <TIM_Base_SetConfig+0x40>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a3a      	ldr	r2, [pc, #232]	; (800402c <TIM_Base_SetConfig+0x124>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d108      	bne.n	8003f5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a2f      	ldr	r2, [pc, #188]	; (800401c <TIM_Base_SetConfig+0x114>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d02b      	beq.n	8003fba <TIM_Base_SetConfig+0xb2>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f68:	d027      	beq.n	8003fba <TIM_Base_SetConfig+0xb2>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a2c      	ldr	r2, [pc, #176]	; (8004020 <TIM_Base_SetConfig+0x118>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d023      	beq.n	8003fba <TIM_Base_SetConfig+0xb2>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a2b      	ldr	r2, [pc, #172]	; (8004024 <TIM_Base_SetConfig+0x11c>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d01f      	beq.n	8003fba <TIM_Base_SetConfig+0xb2>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a2a      	ldr	r2, [pc, #168]	; (8004028 <TIM_Base_SetConfig+0x120>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d01b      	beq.n	8003fba <TIM_Base_SetConfig+0xb2>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a29      	ldr	r2, [pc, #164]	; (800402c <TIM_Base_SetConfig+0x124>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d017      	beq.n	8003fba <TIM_Base_SetConfig+0xb2>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a28      	ldr	r2, [pc, #160]	; (8004030 <TIM_Base_SetConfig+0x128>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d013      	beq.n	8003fba <TIM_Base_SetConfig+0xb2>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a27      	ldr	r2, [pc, #156]	; (8004034 <TIM_Base_SetConfig+0x12c>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d00f      	beq.n	8003fba <TIM_Base_SetConfig+0xb2>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a26      	ldr	r2, [pc, #152]	; (8004038 <TIM_Base_SetConfig+0x130>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d00b      	beq.n	8003fba <TIM_Base_SetConfig+0xb2>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a25      	ldr	r2, [pc, #148]	; (800403c <TIM_Base_SetConfig+0x134>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d007      	beq.n	8003fba <TIM_Base_SetConfig+0xb2>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a24      	ldr	r2, [pc, #144]	; (8004040 <TIM_Base_SetConfig+0x138>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d003      	beq.n	8003fba <TIM_Base_SetConfig+0xb2>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a23      	ldr	r2, [pc, #140]	; (8004044 <TIM_Base_SetConfig+0x13c>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d108      	bne.n	8003fcc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	68fa      	ldr	r2, [r7, #12]
 8003fde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	689a      	ldr	r2, [r3, #8]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a0a      	ldr	r2, [pc, #40]	; (800401c <TIM_Base_SetConfig+0x114>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d003      	beq.n	8004000 <TIM_Base_SetConfig+0xf8>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a0c      	ldr	r2, [pc, #48]	; (800402c <TIM_Base_SetConfig+0x124>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d103      	bne.n	8004008 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	691a      	ldr	r2, [r3, #16]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	615a      	str	r2, [r3, #20]
}
 800400e:	bf00      	nop
 8004010:	3714      	adds	r7, #20
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr
 800401a:	bf00      	nop
 800401c:	40010000 	.word	0x40010000
 8004020:	40000400 	.word	0x40000400
 8004024:	40000800 	.word	0x40000800
 8004028:	40000c00 	.word	0x40000c00
 800402c:	40010400 	.word	0x40010400
 8004030:	40014000 	.word	0x40014000
 8004034:	40014400 	.word	0x40014400
 8004038:	40014800 	.word	0x40014800
 800403c:	40001800 	.word	0x40001800
 8004040:	40001c00 	.word	0x40001c00
 8004044:	40002000 	.word	0x40002000

08004048 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004048:	b480      	push	{r7}
 800404a:	b087      	sub	sp, #28
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a1b      	ldr	r3, [r3, #32]
 8004056:	f023 0201 	bic.w	r2, r3, #1
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a1b      	ldr	r3, [r3, #32]
 8004062:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004076:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f023 0303 	bic.w	r3, r3, #3
 800407e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	4313      	orrs	r3, r2
 8004088:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	f023 0302 	bic.w	r3, r3, #2
 8004090:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	697a      	ldr	r2, [r7, #20]
 8004098:	4313      	orrs	r3, r2
 800409a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a20      	ldr	r2, [pc, #128]	; (8004120 <TIM_OC1_SetConfig+0xd8>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d003      	beq.n	80040ac <TIM_OC1_SetConfig+0x64>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4a1f      	ldr	r2, [pc, #124]	; (8004124 <TIM_OC1_SetConfig+0xdc>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d10c      	bne.n	80040c6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	f023 0308 	bic.w	r3, r3, #8
 80040b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	697a      	ldr	r2, [r7, #20]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	f023 0304 	bic.w	r3, r3, #4
 80040c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a15      	ldr	r2, [pc, #84]	; (8004120 <TIM_OC1_SetConfig+0xd8>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d003      	beq.n	80040d6 <TIM_OC1_SetConfig+0x8e>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a14      	ldr	r2, [pc, #80]	; (8004124 <TIM_OC1_SetConfig+0xdc>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d111      	bne.n	80040fa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	693a      	ldr	r2, [r7, #16]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	699b      	ldr	r3, [r3, #24]
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	693a      	ldr	r2, [r7, #16]
 80040fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	68fa      	ldr	r2, [r7, #12]
 8004104:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	685a      	ldr	r2, [r3, #4]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	697a      	ldr	r2, [r7, #20]
 8004112:	621a      	str	r2, [r3, #32]
}
 8004114:	bf00      	nop
 8004116:	371c      	adds	r7, #28
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr
 8004120:	40010000 	.word	0x40010000
 8004124:	40010400 	.word	0x40010400

08004128 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004128:	b480      	push	{r7}
 800412a:	b087      	sub	sp, #28
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a1b      	ldr	r3, [r3, #32]
 8004136:	f023 0210 	bic.w	r2, r3, #16
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a1b      	ldr	r3, [r3, #32]
 8004142:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004156:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800415e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	021b      	lsls	r3, r3, #8
 8004166:	68fa      	ldr	r2, [r7, #12]
 8004168:	4313      	orrs	r3, r2
 800416a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	f023 0320 	bic.w	r3, r3, #32
 8004172:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	011b      	lsls	r3, r3, #4
 800417a:	697a      	ldr	r2, [r7, #20]
 800417c:	4313      	orrs	r3, r2
 800417e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a22      	ldr	r2, [pc, #136]	; (800420c <TIM_OC2_SetConfig+0xe4>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d003      	beq.n	8004190 <TIM_OC2_SetConfig+0x68>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4a21      	ldr	r2, [pc, #132]	; (8004210 <TIM_OC2_SetConfig+0xe8>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d10d      	bne.n	80041ac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004196:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	011b      	lsls	r3, r3, #4
 800419e:	697a      	ldr	r2, [r7, #20]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a17      	ldr	r2, [pc, #92]	; (800420c <TIM_OC2_SetConfig+0xe4>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d003      	beq.n	80041bc <TIM_OC2_SetConfig+0x94>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a16      	ldr	r2, [pc, #88]	; (8004210 <TIM_OC2_SetConfig+0xe8>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d113      	bne.n	80041e4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	695b      	ldr	r3, [r3, #20]
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	693a      	ldr	r2, [r7, #16]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	699b      	ldr	r3, [r3, #24]
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	693a      	ldr	r2, [r7, #16]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	693a      	ldr	r2, [r7, #16]
 80041e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	685a      	ldr	r2, [r3, #4]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	697a      	ldr	r2, [r7, #20]
 80041fc:	621a      	str	r2, [r3, #32]
}
 80041fe:	bf00      	nop
 8004200:	371c      	adds	r7, #28
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	40010000 	.word	0x40010000
 8004210:	40010400 	.word	0x40010400

08004214 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004214:	b480      	push	{r7}
 8004216:	b087      	sub	sp, #28
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a1b      	ldr	r3, [r3, #32]
 8004222:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a1b      	ldr	r3, [r3, #32]
 800422e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	69db      	ldr	r3, [r3, #28]
 800423a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004242:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f023 0303 	bic.w	r3, r3, #3
 800424a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	4313      	orrs	r3, r2
 8004254:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800425c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	021b      	lsls	r3, r3, #8
 8004264:	697a      	ldr	r2, [r7, #20]
 8004266:	4313      	orrs	r3, r2
 8004268:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a21      	ldr	r2, [pc, #132]	; (80042f4 <TIM_OC3_SetConfig+0xe0>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d003      	beq.n	800427a <TIM_OC3_SetConfig+0x66>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a20      	ldr	r2, [pc, #128]	; (80042f8 <TIM_OC3_SetConfig+0xe4>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d10d      	bne.n	8004296 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004280:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	021b      	lsls	r3, r3, #8
 8004288:	697a      	ldr	r2, [r7, #20]
 800428a:	4313      	orrs	r3, r2
 800428c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004294:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a16      	ldr	r2, [pc, #88]	; (80042f4 <TIM_OC3_SetConfig+0xe0>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d003      	beq.n	80042a6 <TIM_OC3_SetConfig+0x92>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a15      	ldr	r2, [pc, #84]	; (80042f8 <TIM_OC3_SetConfig+0xe4>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d113      	bne.n	80042ce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	011b      	lsls	r3, r3, #4
 80042bc:	693a      	ldr	r2, [r7, #16]
 80042be:	4313      	orrs	r3, r2
 80042c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	699b      	ldr	r3, [r3, #24]
 80042c6:	011b      	lsls	r3, r3, #4
 80042c8:	693a      	ldr	r2, [r7, #16]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	693a      	ldr	r2, [r7, #16]
 80042d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	685a      	ldr	r2, [r3, #4]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	697a      	ldr	r2, [r7, #20]
 80042e6:	621a      	str	r2, [r3, #32]
}
 80042e8:	bf00      	nop
 80042ea:	371c      	adds	r7, #28
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr
 80042f4:	40010000 	.word	0x40010000
 80042f8:	40010400 	.word	0x40010400

080042fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b087      	sub	sp, #28
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a1b      	ldr	r3, [r3, #32]
 8004316:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	69db      	ldr	r3, [r3, #28]
 8004322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800432a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004332:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	021b      	lsls	r3, r3, #8
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	4313      	orrs	r3, r2
 800433e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004346:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	031b      	lsls	r3, r3, #12
 800434e:	693a      	ldr	r2, [r7, #16]
 8004350:	4313      	orrs	r3, r2
 8004352:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4a12      	ldr	r2, [pc, #72]	; (80043a0 <TIM_OC4_SetConfig+0xa4>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d003      	beq.n	8004364 <TIM_OC4_SetConfig+0x68>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4a11      	ldr	r2, [pc, #68]	; (80043a4 <TIM_OC4_SetConfig+0xa8>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d109      	bne.n	8004378 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800436a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	695b      	ldr	r3, [r3, #20]
 8004370:	019b      	lsls	r3, r3, #6
 8004372:	697a      	ldr	r2, [r7, #20]
 8004374:	4313      	orrs	r3, r2
 8004376:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	697a      	ldr	r2, [r7, #20]
 800437c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	68fa      	ldr	r2, [r7, #12]
 8004382:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	685a      	ldr	r2, [r3, #4]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	693a      	ldr	r2, [r7, #16]
 8004390:	621a      	str	r2, [r3, #32]
}
 8004392:	bf00      	nop
 8004394:	371c      	adds	r7, #28
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	40010000 	.word	0x40010000
 80043a4:	40010400 	.word	0x40010400

080043a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b087      	sub	sp, #28
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6a1b      	ldr	r3, [r3, #32]
 80043b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6a1b      	ldr	r3, [r3, #32]
 80043be:	f023 0201 	bic.w	r2, r3, #1
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	011b      	lsls	r3, r3, #4
 80043d8:	693a      	ldr	r2, [r7, #16]
 80043da:	4313      	orrs	r3, r2
 80043dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	f023 030a 	bic.w	r3, r3, #10
 80043e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043e6:	697a      	ldr	r2, [r7, #20]
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	693a      	ldr	r2, [r7, #16]
 80043f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	621a      	str	r2, [r3, #32]
}
 80043fa:	bf00      	nop
 80043fc:	371c      	adds	r7, #28
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr

08004406 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004406:	b480      	push	{r7}
 8004408:	b087      	sub	sp, #28
 800440a:	af00      	add	r7, sp, #0
 800440c:	60f8      	str	r0, [r7, #12]
 800440e:	60b9      	str	r1, [r7, #8]
 8004410:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6a1b      	ldr	r3, [r3, #32]
 8004416:	f023 0210 	bic.w	r2, r3, #16
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6a1b      	ldr	r3, [r3, #32]
 8004428:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004430:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	031b      	lsls	r3, r3, #12
 8004436:	697a      	ldr	r2, [r7, #20]
 8004438:	4313      	orrs	r3, r2
 800443a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004442:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	011b      	lsls	r3, r3, #4
 8004448:	693a      	ldr	r2, [r7, #16]
 800444a:	4313      	orrs	r3, r2
 800444c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	697a      	ldr	r2, [r7, #20]
 8004452:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	621a      	str	r2, [r3, #32]
}
 800445a:	bf00      	nop
 800445c:	371c      	adds	r7, #28
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr

08004466 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004466:	b480      	push	{r7}
 8004468:	b085      	sub	sp, #20
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
 800446e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800447c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800447e:	683a      	ldr	r2, [r7, #0]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	4313      	orrs	r3, r2
 8004484:	f043 0307 	orr.w	r3, r3, #7
 8004488:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	609a      	str	r2, [r3, #8]
}
 8004490:	bf00      	nop
 8004492:	3714      	adds	r7, #20
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800449c:	b480      	push	{r7}
 800449e:	b087      	sub	sp, #28
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
 80044a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	021a      	lsls	r2, r3, #8
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	431a      	orrs	r2, r3
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	697a      	ldr	r2, [r7, #20]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	697a      	ldr	r2, [r7, #20]
 80044ce:	609a      	str	r2, [r3, #8]
}
 80044d0:	bf00      	nop
 80044d2:	371c      	adds	r7, #28
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044dc:	b480      	push	{r7}
 80044de:	b085      	sub	sp, #20
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d101      	bne.n	80044f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044f0:	2302      	movs	r3, #2
 80044f2:	e05a      	b.n	80045aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2202      	movs	r2, #2
 8004500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800451a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68fa      	ldr	r2, [r7, #12]
 8004522:	4313      	orrs	r3, r2
 8004524:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a21      	ldr	r2, [pc, #132]	; (80045b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d022      	beq.n	800457e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004540:	d01d      	beq.n	800457e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a1d      	ldr	r2, [pc, #116]	; (80045bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d018      	beq.n	800457e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a1b      	ldr	r2, [pc, #108]	; (80045c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d013      	beq.n	800457e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a1a      	ldr	r2, [pc, #104]	; (80045c4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d00e      	beq.n	800457e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a18      	ldr	r2, [pc, #96]	; (80045c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d009      	beq.n	800457e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a17      	ldr	r2, [pc, #92]	; (80045cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d004      	beq.n	800457e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a15      	ldr	r2, [pc, #84]	; (80045d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d10c      	bne.n	8004598 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004584:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	68ba      	ldr	r2, [r7, #8]
 800458c:	4313      	orrs	r3, r2
 800458e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68ba      	ldr	r2, [r7, #8]
 8004596:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3714      	adds	r7, #20
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	40010000 	.word	0x40010000
 80045bc:	40000400 	.word	0x40000400
 80045c0:	40000800 	.word	0x40000800
 80045c4:	40000c00 	.word	0x40000c00
 80045c8:	40010400 	.word	0x40010400
 80045cc:	40014000 	.word	0x40014000
 80045d0:	40001800 	.word	0x40001800

080045d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b085      	sub	sp, #20
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80045de:	2300      	movs	r3, #0
 80045e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d101      	bne.n	80045f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80045ec:	2302      	movs	r3, #2
 80045ee:	e03d      	b.n	800466c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	4313      	orrs	r3, r2
 8004604:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	4313      	orrs	r3, r2
 8004612:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	4313      	orrs	r3, r2
 8004620:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4313      	orrs	r3, r2
 800462e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	4313      	orrs	r3, r2
 800463c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	695b      	ldr	r3, [r3, #20]
 8004648:	4313      	orrs	r3, r2
 800464a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	69db      	ldr	r3, [r3, #28]
 8004656:	4313      	orrs	r3, r2
 8004658:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800466a:	2300      	movs	r3, #0
}
 800466c:	4618      	mov	r0, r3
 800466e:	3714      	adds	r7, #20
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d101      	bne.n	800468a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e03f      	b.n	800470a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004690:	b2db      	uxtb	r3, r3
 8004692:	2b00      	cmp	r3, #0
 8004694:	d106      	bne.n	80046a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f7fd f882 	bl	80017a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2224      	movs	r2, #36	; 0x24
 80046a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	68da      	ldr	r2, [r3, #12]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f000 f929 	bl	8004914 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	691a      	ldr	r2, [r3, #16]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	695a      	ldr	r2, [r3, #20]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68da      	ldr	r2, [r3, #12]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2220      	movs	r2, #32
 80046fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2220      	movs	r2, #32
 8004704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004708:	2300      	movs	r3, #0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3708      	adds	r7, #8
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}

08004712 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004712:	b580      	push	{r7, lr}
 8004714:	b08a      	sub	sp, #40	; 0x28
 8004716:	af02      	add	r7, sp, #8
 8004718:	60f8      	str	r0, [r7, #12]
 800471a:	60b9      	str	r1, [r7, #8]
 800471c:	603b      	str	r3, [r7, #0]
 800471e:	4613      	mov	r3, r2
 8004720:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004722:	2300      	movs	r3, #0
 8004724:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800472c:	b2db      	uxtb	r3, r3
 800472e:	2b20      	cmp	r3, #32
 8004730:	d17c      	bne.n	800482c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d002      	beq.n	800473e <HAL_UART_Transmit+0x2c>
 8004738:	88fb      	ldrh	r3, [r7, #6]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d101      	bne.n	8004742 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e075      	b.n	800482e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004748:	2b01      	cmp	r3, #1
 800474a:	d101      	bne.n	8004750 <HAL_UART_Transmit+0x3e>
 800474c:	2302      	movs	r3, #2
 800474e:	e06e      	b.n	800482e <HAL_UART_Transmit+0x11c>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2200      	movs	r2, #0
 800475c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2221      	movs	r2, #33	; 0x21
 8004762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004766:	f7fd fa0b 	bl	8001b80 <HAL_GetTick>
 800476a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	88fa      	ldrh	r2, [r7, #6]
 8004770:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	88fa      	ldrh	r2, [r7, #6]
 8004776:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004780:	d108      	bne.n	8004794 <HAL_UART_Transmit+0x82>
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d104      	bne.n	8004794 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800478a:	2300      	movs	r3, #0
 800478c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	61bb      	str	r3, [r7, #24]
 8004792:	e003      	b.n	800479c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004798:	2300      	movs	r3, #0
 800479a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80047a4:	e02a      	b.n	80047fc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	9300      	str	r3, [sp, #0]
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	2200      	movs	r2, #0
 80047ae:	2180      	movs	r1, #128	; 0x80
 80047b0:	68f8      	ldr	r0, [r7, #12]
 80047b2:	f000 f840 	bl	8004836 <UART_WaitOnFlagUntilTimeout>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d001      	beq.n	80047c0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	e036      	b.n	800482e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d10b      	bne.n	80047de <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	881b      	ldrh	r3, [r3, #0]
 80047ca:	461a      	mov	r2, r3
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	3302      	adds	r3, #2
 80047da:	61bb      	str	r3, [r7, #24]
 80047dc:	e007      	b.n	80047ee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	781a      	ldrb	r2, [r3, #0]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	3301      	adds	r3, #1
 80047ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	3b01      	subs	r3, #1
 80047f6:	b29a      	uxth	r2, r3
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004800:	b29b      	uxth	r3, r3
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1cf      	bne.n	80047a6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	9300      	str	r3, [sp, #0]
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	2200      	movs	r2, #0
 800480e:	2140      	movs	r1, #64	; 0x40
 8004810:	68f8      	ldr	r0, [r7, #12]
 8004812:	f000 f810 	bl	8004836 <UART_WaitOnFlagUntilTimeout>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d001      	beq.n	8004820 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e006      	b.n	800482e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2220      	movs	r2, #32
 8004824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004828:	2300      	movs	r3, #0
 800482a:	e000      	b.n	800482e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800482c:	2302      	movs	r3, #2
  }
}
 800482e:	4618      	mov	r0, r3
 8004830:	3720      	adds	r7, #32
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}

08004836 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004836:	b580      	push	{r7, lr}
 8004838:	b090      	sub	sp, #64	; 0x40
 800483a:	af00      	add	r7, sp, #0
 800483c:	60f8      	str	r0, [r7, #12]
 800483e:	60b9      	str	r1, [r7, #8]
 8004840:	603b      	str	r3, [r7, #0]
 8004842:	4613      	mov	r3, r2
 8004844:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004846:	e050      	b.n	80048ea <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004848:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800484a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800484e:	d04c      	beq.n	80048ea <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004850:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004852:	2b00      	cmp	r3, #0
 8004854:	d007      	beq.n	8004866 <UART_WaitOnFlagUntilTimeout+0x30>
 8004856:	f7fd f993 	bl	8001b80 <HAL_GetTick>
 800485a:	4602      	mov	r2, r0
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004862:	429a      	cmp	r2, r3
 8004864:	d241      	bcs.n	80048ea <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	330c      	adds	r3, #12
 800486c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800486e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004870:	e853 3f00 	ldrex	r3, [r3]
 8004874:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004878:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800487c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	330c      	adds	r3, #12
 8004884:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004886:	637a      	str	r2, [r7, #52]	; 0x34
 8004888:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800488a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800488c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800488e:	e841 2300 	strex	r3, r2, [r1]
 8004892:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004896:	2b00      	cmp	r3, #0
 8004898:	d1e5      	bne.n	8004866 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	3314      	adds	r3, #20
 80048a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	e853 3f00 	ldrex	r3, [r3]
 80048a8:	613b      	str	r3, [r7, #16]
   return(result);
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	f023 0301 	bic.w	r3, r3, #1
 80048b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	3314      	adds	r3, #20
 80048b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048ba:	623a      	str	r2, [r7, #32]
 80048bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048be:	69f9      	ldr	r1, [r7, #28]
 80048c0:	6a3a      	ldr	r2, [r7, #32]
 80048c2:	e841 2300 	strex	r3, r2, [r1]
 80048c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1e5      	bne.n	800489a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2220      	movs	r2, #32
 80048d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2220      	movs	r2, #32
 80048da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e00f      	b.n	800490a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	4013      	ands	r3, r2
 80048f4:	68ba      	ldr	r2, [r7, #8]
 80048f6:	429a      	cmp	r2, r3
 80048f8:	bf0c      	ite	eq
 80048fa:	2301      	moveq	r3, #1
 80048fc:	2300      	movne	r3, #0
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	461a      	mov	r2, r3
 8004902:	79fb      	ldrb	r3, [r7, #7]
 8004904:	429a      	cmp	r2, r3
 8004906:	d09f      	beq.n	8004848 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3740      	adds	r7, #64	; 0x40
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
	...

08004914 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004914:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004918:	b0c0      	sub	sp, #256	; 0x100
 800491a:	af00      	add	r7, sp, #0
 800491c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800492c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004930:	68d9      	ldr	r1, [r3, #12]
 8004932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	ea40 0301 	orr.w	r3, r0, r1
 800493c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800493e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004942:	689a      	ldr	r2, [r3, #8]
 8004944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	431a      	orrs	r2, r3
 800494c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004950:	695b      	ldr	r3, [r3, #20]
 8004952:	431a      	orrs	r2, r3
 8004954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004958:	69db      	ldr	r3, [r3, #28]
 800495a:	4313      	orrs	r3, r2
 800495c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800496c:	f021 010c 	bic.w	r1, r1, #12
 8004970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800497a:	430b      	orrs	r3, r1
 800497c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800497e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800498a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800498e:	6999      	ldr	r1, [r3, #24]
 8004990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	ea40 0301 	orr.w	r3, r0, r1
 800499a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800499c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	4b8f      	ldr	r3, [pc, #572]	; (8004be0 <UART_SetConfig+0x2cc>)
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d005      	beq.n	80049b4 <UART_SetConfig+0xa0>
 80049a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	4b8d      	ldr	r3, [pc, #564]	; (8004be4 <UART_SetConfig+0x2d0>)
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d104      	bne.n	80049be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80049b4:	f7fe fb94 	bl	80030e0 <HAL_RCC_GetPCLK2Freq>
 80049b8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80049bc:	e003      	b.n	80049c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80049be:	f7fe fb7b 	bl	80030b8 <HAL_RCC_GetPCLK1Freq>
 80049c2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049ca:	69db      	ldr	r3, [r3, #28]
 80049cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049d0:	f040 810c 	bne.w	8004bec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80049d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049d8:	2200      	movs	r2, #0
 80049da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80049de:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80049e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80049e6:	4622      	mov	r2, r4
 80049e8:	462b      	mov	r3, r5
 80049ea:	1891      	adds	r1, r2, r2
 80049ec:	65b9      	str	r1, [r7, #88]	; 0x58
 80049ee:	415b      	adcs	r3, r3
 80049f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80049f6:	4621      	mov	r1, r4
 80049f8:	eb12 0801 	adds.w	r8, r2, r1
 80049fc:	4629      	mov	r1, r5
 80049fe:	eb43 0901 	adc.w	r9, r3, r1
 8004a02:	f04f 0200 	mov.w	r2, #0
 8004a06:	f04f 0300 	mov.w	r3, #0
 8004a0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a16:	4690      	mov	r8, r2
 8004a18:	4699      	mov	r9, r3
 8004a1a:	4623      	mov	r3, r4
 8004a1c:	eb18 0303 	adds.w	r3, r8, r3
 8004a20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004a24:	462b      	mov	r3, r5
 8004a26:	eb49 0303 	adc.w	r3, r9, r3
 8004a2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004a3a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004a3e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004a42:	460b      	mov	r3, r1
 8004a44:	18db      	adds	r3, r3, r3
 8004a46:	653b      	str	r3, [r7, #80]	; 0x50
 8004a48:	4613      	mov	r3, r2
 8004a4a:	eb42 0303 	adc.w	r3, r2, r3
 8004a4e:	657b      	str	r3, [r7, #84]	; 0x54
 8004a50:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004a54:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004a58:	f7fc f8c6 	bl	8000be8 <__aeabi_uldivmod>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	460b      	mov	r3, r1
 8004a60:	4b61      	ldr	r3, [pc, #388]	; (8004be8 <UART_SetConfig+0x2d4>)
 8004a62:	fba3 2302 	umull	r2, r3, r3, r2
 8004a66:	095b      	lsrs	r3, r3, #5
 8004a68:	011c      	lsls	r4, r3, #4
 8004a6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a74:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004a78:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004a7c:	4642      	mov	r2, r8
 8004a7e:	464b      	mov	r3, r9
 8004a80:	1891      	adds	r1, r2, r2
 8004a82:	64b9      	str	r1, [r7, #72]	; 0x48
 8004a84:	415b      	adcs	r3, r3
 8004a86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a88:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004a8c:	4641      	mov	r1, r8
 8004a8e:	eb12 0a01 	adds.w	sl, r2, r1
 8004a92:	4649      	mov	r1, r9
 8004a94:	eb43 0b01 	adc.w	fp, r3, r1
 8004a98:	f04f 0200 	mov.w	r2, #0
 8004a9c:	f04f 0300 	mov.w	r3, #0
 8004aa0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004aa4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004aa8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004aac:	4692      	mov	sl, r2
 8004aae:	469b      	mov	fp, r3
 8004ab0:	4643      	mov	r3, r8
 8004ab2:	eb1a 0303 	adds.w	r3, sl, r3
 8004ab6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004aba:	464b      	mov	r3, r9
 8004abc:	eb4b 0303 	adc.w	r3, fp, r3
 8004ac0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ad0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004ad4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004ad8:	460b      	mov	r3, r1
 8004ada:	18db      	adds	r3, r3, r3
 8004adc:	643b      	str	r3, [r7, #64]	; 0x40
 8004ade:	4613      	mov	r3, r2
 8004ae0:	eb42 0303 	adc.w	r3, r2, r3
 8004ae4:	647b      	str	r3, [r7, #68]	; 0x44
 8004ae6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004aea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004aee:	f7fc f87b 	bl	8000be8 <__aeabi_uldivmod>
 8004af2:	4602      	mov	r2, r0
 8004af4:	460b      	mov	r3, r1
 8004af6:	4611      	mov	r1, r2
 8004af8:	4b3b      	ldr	r3, [pc, #236]	; (8004be8 <UART_SetConfig+0x2d4>)
 8004afa:	fba3 2301 	umull	r2, r3, r3, r1
 8004afe:	095b      	lsrs	r3, r3, #5
 8004b00:	2264      	movs	r2, #100	; 0x64
 8004b02:	fb02 f303 	mul.w	r3, r2, r3
 8004b06:	1acb      	subs	r3, r1, r3
 8004b08:	00db      	lsls	r3, r3, #3
 8004b0a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004b0e:	4b36      	ldr	r3, [pc, #216]	; (8004be8 <UART_SetConfig+0x2d4>)
 8004b10:	fba3 2302 	umull	r2, r3, r3, r2
 8004b14:	095b      	lsrs	r3, r3, #5
 8004b16:	005b      	lsls	r3, r3, #1
 8004b18:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b1c:	441c      	add	r4, r3
 8004b1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b22:	2200      	movs	r2, #0
 8004b24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b28:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004b2c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004b30:	4642      	mov	r2, r8
 8004b32:	464b      	mov	r3, r9
 8004b34:	1891      	adds	r1, r2, r2
 8004b36:	63b9      	str	r1, [r7, #56]	; 0x38
 8004b38:	415b      	adcs	r3, r3
 8004b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004b40:	4641      	mov	r1, r8
 8004b42:	1851      	adds	r1, r2, r1
 8004b44:	6339      	str	r1, [r7, #48]	; 0x30
 8004b46:	4649      	mov	r1, r9
 8004b48:	414b      	adcs	r3, r1
 8004b4a:	637b      	str	r3, [r7, #52]	; 0x34
 8004b4c:	f04f 0200 	mov.w	r2, #0
 8004b50:	f04f 0300 	mov.w	r3, #0
 8004b54:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004b58:	4659      	mov	r1, fp
 8004b5a:	00cb      	lsls	r3, r1, #3
 8004b5c:	4651      	mov	r1, sl
 8004b5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b62:	4651      	mov	r1, sl
 8004b64:	00ca      	lsls	r2, r1, #3
 8004b66:	4610      	mov	r0, r2
 8004b68:	4619      	mov	r1, r3
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	4642      	mov	r2, r8
 8004b6e:	189b      	adds	r3, r3, r2
 8004b70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b74:	464b      	mov	r3, r9
 8004b76:	460a      	mov	r2, r1
 8004b78:	eb42 0303 	adc.w	r3, r2, r3
 8004b7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b8c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004b90:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004b94:	460b      	mov	r3, r1
 8004b96:	18db      	adds	r3, r3, r3
 8004b98:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	eb42 0303 	adc.w	r3, r2, r3
 8004ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ba2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ba6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004baa:	f7fc f81d 	bl	8000be8 <__aeabi_uldivmod>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	4b0d      	ldr	r3, [pc, #52]	; (8004be8 <UART_SetConfig+0x2d4>)
 8004bb4:	fba3 1302 	umull	r1, r3, r3, r2
 8004bb8:	095b      	lsrs	r3, r3, #5
 8004bba:	2164      	movs	r1, #100	; 0x64
 8004bbc:	fb01 f303 	mul.w	r3, r1, r3
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	00db      	lsls	r3, r3, #3
 8004bc4:	3332      	adds	r3, #50	; 0x32
 8004bc6:	4a08      	ldr	r2, [pc, #32]	; (8004be8 <UART_SetConfig+0x2d4>)
 8004bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bcc:	095b      	lsrs	r3, r3, #5
 8004bce:	f003 0207 	and.w	r2, r3, #7
 8004bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4422      	add	r2, r4
 8004bda:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004bdc:	e105      	b.n	8004dea <UART_SetConfig+0x4d6>
 8004bde:	bf00      	nop
 8004be0:	40011000 	.word	0x40011000
 8004be4:	40011400 	.word	0x40011400
 8004be8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004bec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004bf6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004bfa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004bfe:	4642      	mov	r2, r8
 8004c00:	464b      	mov	r3, r9
 8004c02:	1891      	adds	r1, r2, r2
 8004c04:	6239      	str	r1, [r7, #32]
 8004c06:	415b      	adcs	r3, r3
 8004c08:	627b      	str	r3, [r7, #36]	; 0x24
 8004c0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c0e:	4641      	mov	r1, r8
 8004c10:	1854      	adds	r4, r2, r1
 8004c12:	4649      	mov	r1, r9
 8004c14:	eb43 0501 	adc.w	r5, r3, r1
 8004c18:	f04f 0200 	mov.w	r2, #0
 8004c1c:	f04f 0300 	mov.w	r3, #0
 8004c20:	00eb      	lsls	r3, r5, #3
 8004c22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c26:	00e2      	lsls	r2, r4, #3
 8004c28:	4614      	mov	r4, r2
 8004c2a:	461d      	mov	r5, r3
 8004c2c:	4643      	mov	r3, r8
 8004c2e:	18e3      	adds	r3, r4, r3
 8004c30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004c34:	464b      	mov	r3, r9
 8004c36:	eb45 0303 	adc.w	r3, r5, r3
 8004c3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c4a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c4e:	f04f 0200 	mov.w	r2, #0
 8004c52:	f04f 0300 	mov.w	r3, #0
 8004c56:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004c5a:	4629      	mov	r1, r5
 8004c5c:	008b      	lsls	r3, r1, #2
 8004c5e:	4621      	mov	r1, r4
 8004c60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c64:	4621      	mov	r1, r4
 8004c66:	008a      	lsls	r2, r1, #2
 8004c68:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004c6c:	f7fb ffbc 	bl	8000be8 <__aeabi_uldivmod>
 8004c70:	4602      	mov	r2, r0
 8004c72:	460b      	mov	r3, r1
 8004c74:	4b60      	ldr	r3, [pc, #384]	; (8004df8 <UART_SetConfig+0x4e4>)
 8004c76:	fba3 2302 	umull	r2, r3, r3, r2
 8004c7a:	095b      	lsrs	r3, r3, #5
 8004c7c:	011c      	lsls	r4, r3, #4
 8004c7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c82:	2200      	movs	r2, #0
 8004c84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c88:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004c8c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004c90:	4642      	mov	r2, r8
 8004c92:	464b      	mov	r3, r9
 8004c94:	1891      	adds	r1, r2, r2
 8004c96:	61b9      	str	r1, [r7, #24]
 8004c98:	415b      	adcs	r3, r3
 8004c9a:	61fb      	str	r3, [r7, #28]
 8004c9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ca0:	4641      	mov	r1, r8
 8004ca2:	1851      	adds	r1, r2, r1
 8004ca4:	6139      	str	r1, [r7, #16]
 8004ca6:	4649      	mov	r1, r9
 8004ca8:	414b      	adcs	r3, r1
 8004caa:	617b      	str	r3, [r7, #20]
 8004cac:	f04f 0200 	mov.w	r2, #0
 8004cb0:	f04f 0300 	mov.w	r3, #0
 8004cb4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004cb8:	4659      	mov	r1, fp
 8004cba:	00cb      	lsls	r3, r1, #3
 8004cbc:	4651      	mov	r1, sl
 8004cbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cc2:	4651      	mov	r1, sl
 8004cc4:	00ca      	lsls	r2, r1, #3
 8004cc6:	4610      	mov	r0, r2
 8004cc8:	4619      	mov	r1, r3
 8004cca:	4603      	mov	r3, r0
 8004ccc:	4642      	mov	r2, r8
 8004cce:	189b      	adds	r3, r3, r2
 8004cd0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004cd4:	464b      	mov	r3, r9
 8004cd6:	460a      	mov	r2, r1
 8004cd8:	eb42 0303 	adc.w	r3, r2, r3
 8004cdc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	67bb      	str	r3, [r7, #120]	; 0x78
 8004cea:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004cec:	f04f 0200 	mov.w	r2, #0
 8004cf0:	f04f 0300 	mov.w	r3, #0
 8004cf4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004cf8:	4649      	mov	r1, r9
 8004cfa:	008b      	lsls	r3, r1, #2
 8004cfc:	4641      	mov	r1, r8
 8004cfe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d02:	4641      	mov	r1, r8
 8004d04:	008a      	lsls	r2, r1, #2
 8004d06:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004d0a:	f7fb ff6d 	bl	8000be8 <__aeabi_uldivmod>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	460b      	mov	r3, r1
 8004d12:	4b39      	ldr	r3, [pc, #228]	; (8004df8 <UART_SetConfig+0x4e4>)
 8004d14:	fba3 1302 	umull	r1, r3, r3, r2
 8004d18:	095b      	lsrs	r3, r3, #5
 8004d1a:	2164      	movs	r1, #100	; 0x64
 8004d1c:	fb01 f303 	mul.w	r3, r1, r3
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	011b      	lsls	r3, r3, #4
 8004d24:	3332      	adds	r3, #50	; 0x32
 8004d26:	4a34      	ldr	r2, [pc, #208]	; (8004df8 <UART_SetConfig+0x4e4>)
 8004d28:	fba2 2303 	umull	r2, r3, r2, r3
 8004d2c:	095b      	lsrs	r3, r3, #5
 8004d2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d32:	441c      	add	r4, r3
 8004d34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d38:	2200      	movs	r2, #0
 8004d3a:	673b      	str	r3, [r7, #112]	; 0x70
 8004d3c:	677a      	str	r2, [r7, #116]	; 0x74
 8004d3e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004d42:	4642      	mov	r2, r8
 8004d44:	464b      	mov	r3, r9
 8004d46:	1891      	adds	r1, r2, r2
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	415b      	adcs	r3, r3
 8004d4c:	60fb      	str	r3, [r7, #12]
 8004d4e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d52:	4641      	mov	r1, r8
 8004d54:	1851      	adds	r1, r2, r1
 8004d56:	6039      	str	r1, [r7, #0]
 8004d58:	4649      	mov	r1, r9
 8004d5a:	414b      	adcs	r3, r1
 8004d5c:	607b      	str	r3, [r7, #4]
 8004d5e:	f04f 0200 	mov.w	r2, #0
 8004d62:	f04f 0300 	mov.w	r3, #0
 8004d66:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d6a:	4659      	mov	r1, fp
 8004d6c:	00cb      	lsls	r3, r1, #3
 8004d6e:	4651      	mov	r1, sl
 8004d70:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d74:	4651      	mov	r1, sl
 8004d76:	00ca      	lsls	r2, r1, #3
 8004d78:	4610      	mov	r0, r2
 8004d7a:	4619      	mov	r1, r3
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	4642      	mov	r2, r8
 8004d80:	189b      	adds	r3, r3, r2
 8004d82:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d84:	464b      	mov	r3, r9
 8004d86:	460a      	mov	r2, r1
 8004d88:	eb42 0303 	adc.w	r3, r2, r3
 8004d8c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	663b      	str	r3, [r7, #96]	; 0x60
 8004d98:	667a      	str	r2, [r7, #100]	; 0x64
 8004d9a:	f04f 0200 	mov.w	r2, #0
 8004d9e:	f04f 0300 	mov.w	r3, #0
 8004da2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004da6:	4649      	mov	r1, r9
 8004da8:	008b      	lsls	r3, r1, #2
 8004daa:	4641      	mov	r1, r8
 8004dac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004db0:	4641      	mov	r1, r8
 8004db2:	008a      	lsls	r2, r1, #2
 8004db4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004db8:	f7fb ff16 	bl	8000be8 <__aeabi_uldivmod>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	460b      	mov	r3, r1
 8004dc0:	4b0d      	ldr	r3, [pc, #52]	; (8004df8 <UART_SetConfig+0x4e4>)
 8004dc2:	fba3 1302 	umull	r1, r3, r3, r2
 8004dc6:	095b      	lsrs	r3, r3, #5
 8004dc8:	2164      	movs	r1, #100	; 0x64
 8004dca:	fb01 f303 	mul.w	r3, r1, r3
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	011b      	lsls	r3, r3, #4
 8004dd2:	3332      	adds	r3, #50	; 0x32
 8004dd4:	4a08      	ldr	r2, [pc, #32]	; (8004df8 <UART_SetConfig+0x4e4>)
 8004dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dda:	095b      	lsrs	r3, r3, #5
 8004ddc:	f003 020f 	and.w	r2, r3, #15
 8004de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4422      	add	r2, r4
 8004de8:	609a      	str	r2, [r3, #8]
}
 8004dea:	bf00      	nop
 8004dec:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004df0:	46bd      	mov	sp, r7
 8004df2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004df6:	bf00      	nop
 8004df8:	51eb851f 	.word	0x51eb851f

08004dfc <__errno>:
 8004dfc:	4b01      	ldr	r3, [pc, #4]	; (8004e04 <__errno+0x8>)
 8004dfe:	6818      	ldr	r0, [r3, #0]
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	2000000c 	.word	0x2000000c

08004e08 <__libc_init_array>:
 8004e08:	b570      	push	{r4, r5, r6, lr}
 8004e0a:	4d0d      	ldr	r5, [pc, #52]	; (8004e40 <__libc_init_array+0x38>)
 8004e0c:	4c0d      	ldr	r4, [pc, #52]	; (8004e44 <__libc_init_array+0x3c>)
 8004e0e:	1b64      	subs	r4, r4, r5
 8004e10:	10a4      	asrs	r4, r4, #2
 8004e12:	2600      	movs	r6, #0
 8004e14:	42a6      	cmp	r6, r4
 8004e16:	d109      	bne.n	8004e2c <__libc_init_array+0x24>
 8004e18:	4d0b      	ldr	r5, [pc, #44]	; (8004e48 <__libc_init_array+0x40>)
 8004e1a:	4c0c      	ldr	r4, [pc, #48]	; (8004e4c <__libc_init_array+0x44>)
 8004e1c:	f002 ff02 	bl	8007c24 <_init>
 8004e20:	1b64      	subs	r4, r4, r5
 8004e22:	10a4      	asrs	r4, r4, #2
 8004e24:	2600      	movs	r6, #0
 8004e26:	42a6      	cmp	r6, r4
 8004e28:	d105      	bne.n	8004e36 <__libc_init_array+0x2e>
 8004e2a:	bd70      	pop	{r4, r5, r6, pc}
 8004e2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e30:	4798      	blx	r3
 8004e32:	3601      	adds	r6, #1
 8004e34:	e7ee      	b.n	8004e14 <__libc_init_array+0xc>
 8004e36:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e3a:	4798      	blx	r3
 8004e3c:	3601      	adds	r6, #1
 8004e3e:	e7f2      	b.n	8004e26 <__libc_init_array+0x1e>
 8004e40:	080080cc 	.word	0x080080cc
 8004e44:	080080cc 	.word	0x080080cc
 8004e48:	080080cc 	.word	0x080080cc
 8004e4c:	080080d0 	.word	0x080080d0

08004e50 <memcpy>:
 8004e50:	440a      	add	r2, r1
 8004e52:	4291      	cmp	r1, r2
 8004e54:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e58:	d100      	bne.n	8004e5c <memcpy+0xc>
 8004e5a:	4770      	bx	lr
 8004e5c:	b510      	push	{r4, lr}
 8004e5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e66:	4291      	cmp	r1, r2
 8004e68:	d1f9      	bne.n	8004e5e <memcpy+0xe>
 8004e6a:	bd10      	pop	{r4, pc}

08004e6c <memset>:
 8004e6c:	4402      	add	r2, r0
 8004e6e:	4603      	mov	r3, r0
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d100      	bne.n	8004e76 <memset+0xa>
 8004e74:	4770      	bx	lr
 8004e76:	f803 1b01 	strb.w	r1, [r3], #1
 8004e7a:	e7f9      	b.n	8004e70 <memset+0x4>

08004e7c <__cvt>:
 8004e7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e80:	ec55 4b10 	vmov	r4, r5, d0
 8004e84:	2d00      	cmp	r5, #0
 8004e86:	460e      	mov	r6, r1
 8004e88:	4619      	mov	r1, r3
 8004e8a:	462b      	mov	r3, r5
 8004e8c:	bfbb      	ittet	lt
 8004e8e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004e92:	461d      	movlt	r5, r3
 8004e94:	2300      	movge	r3, #0
 8004e96:	232d      	movlt	r3, #45	; 0x2d
 8004e98:	700b      	strb	r3, [r1, #0]
 8004e9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e9c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004ea0:	4691      	mov	r9, r2
 8004ea2:	f023 0820 	bic.w	r8, r3, #32
 8004ea6:	bfbc      	itt	lt
 8004ea8:	4622      	movlt	r2, r4
 8004eaa:	4614      	movlt	r4, r2
 8004eac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004eb0:	d005      	beq.n	8004ebe <__cvt+0x42>
 8004eb2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004eb6:	d100      	bne.n	8004eba <__cvt+0x3e>
 8004eb8:	3601      	adds	r6, #1
 8004eba:	2102      	movs	r1, #2
 8004ebc:	e000      	b.n	8004ec0 <__cvt+0x44>
 8004ebe:	2103      	movs	r1, #3
 8004ec0:	ab03      	add	r3, sp, #12
 8004ec2:	9301      	str	r3, [sp, #4]
 8004ec4:	ab02      	add	r3, sp, #8
 8004ec6:	9300      	str	r3, [sp, #0]
 8004ec8:	ec45 4b10 	vmov	d0, r4, r5
 8004ecc:	4653      	mov	r3, sl
 8004ece:	4632      	mov	r2, r6
 8004ed0:	f000 fcea 	bl	80058a8 <_dtoa_r>
 8004ed4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004ed8:	4607      	mov	r7, r0
 8004eda:	d102      	bne.n	8004ee2 <__cvt+0x66>
 8004edc:	f019 0f01 	tst.w	r9, #1
 8004ee0:	d022      	beq.n	8004f28 <__cvt+0xac>
 8004ee2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004ee6:	eb07 0906 	add.w	r9, r7, r6
 8004eea:	d110      	bne.n	8004f0e <__cvt+0x92>
 8004eec:	783b      	ldrb	r3, [r7, #0]
 8004eee:	2b30      	cmp	r3, #48	; 0x30
 8004ef0:	d10a      	bne.n	8004f08 <__cvt+0x8c>
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	4620      	mov	r0, r4
 8004ef8:	4629      	mov	r1, r5
 8004efa:	f7fb fe05 	bl	8000b08 <__aeabi_dcmpeq>
 8004efe:	b918      	cbnz	r0, 8004f08 <__cvt+0x8c>
 8004f00:	f1c6 0601 	rsb	r6, r6, #1
 8004f04:	f8ca 6000 	str.w	r6, [sl]
 8004f08:	f8da 3000 	ldr.w	r3, [sl]
 8004f0c:	4499      	add	r9, r3
 8004f0e:	2200      	movs	r2, #0
 8004f10:	2300      	movs	r3, #0
 8004f12:	4620      	mov	r0, r4
 8004f14:	4629      	mov	r1, r5
 8004f16:	f7fb fdf7 	bl	8000b08 <__aeabi_dcmpeq>
 8004f1a:	b108      	cbz	r0, 8004f20 <__cvt+0xa4>
 8004f1c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004f20:	2230      	movs	r2, #48	; 0x30
 8004f22:	9b03      	ldr	r3, [sp, #12]
 8004f24:	454b      	cmp	r3, r9
 8004f26:	d307      	bcc.n	8004f38 <__cvt+0xbc>
 8004f28:	9b03      	ldr	r3, [sp, #12]
 8004f2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f2c:	1bdb      	subs	r3, r3, r7
 8004f2e:	4638      	mov	r0, r7
 8004f30:	6013      	str	r3, [r2, #0]
 8004f32:	b004      	add	sp, #16
 8004f34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f38:	1c59      	adds	r1, r3, #1
 8004f3a:	9103      	str	r1, [sp, #12]
 8004f3c:	701a      	strb	r2, [r3, #0]
 8004f3e:	e7f0      	b.n	8004f22 <__cvt+0xa6>

08004f40 <__exponent>:
 8004f40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f42:	4603      	mov	r3, r0
 8004f44:	2900      	cmp	r1, #0
 8004f46:	bfb8      	it	lt
 8004f48:	4249      	neglt	r1, r1
 8004f4a:	f803 2b02 	strb.w	r2, [r3], #2
 8004f4e:	bfb4      	ite	lt
 8004f50:	222d      	movlt	r2, #45	; 0x2d
 8004f52:	222b      	movge	r2, #43	; 0x2b
 8004f54:	2909      	cmp	r1, #9
 8004f56:	7042      	strb	r2, [r0, #1]
 8004f58:	dd2a      	ble.n	8004fb0 <__exponent+0x70>
 8004f5a:	f10d 0407 	add.w	r4, sp, #7
 8004f5e:	46a4      	mov	ip, r4
 8004f60:	270a      	movs	r7, #10
 8004f62:	46a6      	mov	lr, r4
 8004f64:	460a      	mov	r2, r1
 8004f66:	fb91 f6f7 	sdiv	r6, r1, r7
 8004f6a:	fb07 1516 	mls	r5, r7, r6, r1
 8004f6e:	3530      	adds	r5, #48	; 0x30
 8004f70:	2a63      	cmp	r2, #99	; 0x63
 8004f72:	f104 34ff 	add.w	r4, r4, #4294967295
 8004f76:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004f7a:	4631      	mov	r1, r6
 8004f7c:	dcf1      	bgt.n	8004f62 <__exponent+0x22>
 8004f7e:	3130      	adds	r1, #48	; 0x30
 8004f80:	f1ae 0502 	sub.w	r5, lr, #2
 8004f84:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004f88:	1c44      	adds	r4, r0, #1
 8004f8a:	4629      	mov	r1, r5
 8004f8c:	4561      	cmp	r1, ip
 8004f8e:	d30a      	bcc.n	8004fa6 <__exponent+0x66>
 8004f90:	f10d 0209 	add.w	r2, sp, #9
 8004f94:	eba2 020e 	sub.w	r2, r2, lr
 8004f98:	4565      	cmp	r5, ip
 8004f9a:	bf88      	it	hi
 8004f9c:	2200      	movhi	r2, #0
 8004f9e:	4413      	add	r3, r2
 8004fa0:	1a18      	subs	r0, r3, r0
 8004fa2:	b003      	add	sp, #12
 8004fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fa6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004faa:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004fae:	e7ed      	b.n	8004f8c <__exponent+0x4c>
 8004fb0:	2330      	movs	r3, #48	; 0x30
 8004fb2:	3130      	adds	r1, #48	; 0x30
 8004fb4:	7083      	strb	r3, [r0, #2]
 8004fb6:	70c1      	strb	r1, [r0, #3]
 8004fb8:	1d03      	adds	r3, r0, #4
 8004fba:	e7f1      	b.n	8004fa0 <__exponent+0x60>

08004fbc <_printf_float>:
 8004fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fc0:	ed2d 8b02 	vpush	{d8}
 8004fc4:	b08d      	sub	sp, #52	; 0x34
 8004fc6:	460c      	mov	r4, r1
 8004fc8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004fcc:	4616      	mov	r6, r2
 8004fce:	461f      	mov	r7, r3
 8004fd0:	4605      	mov	r5, r0
 8004fd2:	f001 fa57 	bl	8006484 <_localeconv_r>
 8004fd6:	f8d0 a000 	ldr.w	sl, [r0]
 8004fda:	4650      	mov	r0, sl
 8004fdc:	f7fb f918 	bl	8000210 <strlen>
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	930a      	str	r3, [sp, #40]	; 0x28
 8004fe4:	6823      	ldr	r3, [r4, #0]
 8004fe6:	9305      	str	r3, [sp, #20]
 8004fe8:	f8d8 3000 	ldr.w	r3, [r8]
 8004fec:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004ff0:	3307      	adds	r3, #7
 8004ff2:	f023 0307 	bic.w	r3, r3, #7
 8004ff6:	f103 0208 	add.w	r2, r3, #8
 8004ffa:	f8c8 2000 	str.w	r2, [r8]
 8004ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005002:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005006:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800500a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800500e:	9307      	str	r3, [sp, #28]
 8005010:	f8cd 8018 	str.w	r8, [sp, #24]
 8005014:	ee08 0a10 	vmov	s16, r0
 8005018:	4b9f      	ldr	r3, [pc, #636]	; (8005298 <_printf_float+0x2dc>)
 800501a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800501e:	f04f 32ff 	mov.w	r2, #4294967295
 8005022:	f7fb fda3 	bl	8000b6c <__aeabi_dcmpun>
 8005026:	bb88      	cbnz	r0, 800508c <_printf_float+0xd0>
 8005028:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800502c:	4b9a      	ldr	r3, [pc, #616]	; (8005298 <_printf_float+0x2dc>)
 800502e:	f04f 32ff 	mov.w	r2, #4294967295
 8005032:	f7fb fd7d 	bl	8000b30 <__aeabi_dcmple>
 8005036:	bb48      	cbnz	r0, 800508c <_printf_float+0xd0>
 8005038:	2200      	movs	r2, #0
 800503a:	2300      	movs	r3, #0
 800503c:	4640      	mov	r0, r8
 800503e:	4649      	mov	r1, r9
 8005040:	f7fb fd6c 	bl	8000b1c <__aeabi_dcmplt>
 8005044:	b110      	cbz	r0, 800504c <_printf_float+0x90>
 8005046:	232d      	movs	r3, #45	; 0x2d
 8005048:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800504c:	4b93      	ldr	r3, [pc, #588]	; (800529c <_printf_float+0x2e0>)
 800504e:	4894      	ldr	r0, [pc, #592]	; (80052a0 <_printf_float+0x2e4>)
 8005050:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005054:	bf94      	ite	ls
 8005056:	4698      	movls	r8, r3
 8005058:	4680      	movhi	r8, r0
 800505a:	2303      	movs	r3, #3
 800505c:	6123      	str	r3, [r4, #16]
 800505e:	9b05      	ldr	r3, [sp, #20]
 8005060:	f023 0204 	bic.w	r2, r3, #4
 8005064:	6022      	str	r2, [r4, #0]
 8005066:	f04f 0900 	mov.w	r9, #0
 800506a:	9700      	str	r7, [sp, #0]
 800506c:	4633      	mov	r3, r6
 800506e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005070:	4621      	mov	r1, r4
 8005072:	4628      	mov	r0, r5
 8005074:	f000 f9d8 	bl	8005428 <_printf_common>
 8005078:	3001      	adds	r0, #1
 800507a:	f040 8090 	bne.w	800519e <_printf_float+0x1e2>
 800507e:	f04f 30ff 	mov.w	r0, #4294967295
 8005082:	b00d      	add	sp, #52	; 0x34
 8005084:	ecbd 8b02 	vpop	{d8}
 8005088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800508c:	4642      	mov	r2, r8
 800508e:	464b      	mov	r3, r9
 8005090:	4640      	mov	r0, r8
 8005092:	4649      	mov	r1, r9
 8005094:	f7fb fd6a 	bl	8000b6c <__aeabi_dcmpun>
 8005098:	b140      	cbz	r0, 80050ac <_printf_float+0xf0>
 800509a:	464b      	mov	r3, r9
 800509c:	2b00      	cmp	r3, #0
 800509e:	bfbc      	itt	lt
 80050a0:	232d      	movlt	r3, #45	; 0x2d
 80050a2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80050a6:	487f      	ldr	r0, [pc, #508]	; (80052a4 <_printf_float+0x2e8>)
 80050a8:	4b7f      	ldr	r3, [pc, #508]	; (80052a8 <_printf_float+0x2ec>)
 80050aa:	e7d1      	b.n	8005050 <_printf_float+0x94>
 80050ac:	6863      	ldr	r3, [r4, #4]
 80050ae:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80050b2:	9206      	str	r2, [sp, #24]
 80050b4:	1c5a      	adds	r2, r3, #1
 80050b6:	d13f      	bne.n	8005138 <_printf_float+0x17c>
 80050b8:	2306      	movs	r3, #6
 80050ba:	6063      	str	r3, [r4, #4]
 80050bc:	9b05      	ldr	r3, [sp, #20]
 80050be:	6861      	ldr	r1, [r4, #4]
 80050c0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80050c4:	2300      	movs	r3, #0
 80050c6:	9303      	str	r3, [sp, #12]
 80050c8:	ab0a      	add	r3, sp, #40	; 0x28
 80050ca:	e9cd b301 	strd	fp, r3, [sp, #4]
 80050ce:	ab09      	add	r3, sp, #36	; 0x24
 80050d0:	ec49 8b10 	vmov	d0, r8, r9
 80050d4:	9300      	str	r3, [sp, #0]
 80050d6:	6022      	str	r2, [r4, #0]
 80050d8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80050dc:	4628      	mov	r0, r5
 80050de:	f7ff fecd 	bl	8004e7c <__cvt>
 80050e2:	9b06      	ldr	r3, [sp, #24]
 80050e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80050e6:	2b47      	cmp	r3, #71	; 0x47
 80050e8:	4680      	mov	r8, r0
 80050ea:	d108      	bne.n	80050fe <_printf_float+0x142>
 80050ec:	1cc8      	adds	r0, r1, #3
 80050ee:	db02      	blt.n	80050f6 <_printf_float+0x13a>
 80050f0:	6863      	ldr	r3, [r4, #4]
 80050f2:	4299      	cmp	r1, r3
 80050f4:	dd41      	ble.n	800517a <_printf_float+0x1be>
 80050f6:	f1ab 0b02 	sub.w	fp, fp, #2
 80050fa:	fa5f fb8b 	uxtb.w	fp, fp
 80050fe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005102:	d820      	bhi.n	8005146 <_printf_float+0x18a>
 8005104:	3901      	subs	r1, #1
 8005106:	465a      	mov	r2, fp
 8005108:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800510c:	9109      	str	r1, [sp, #36]	; 0x24
 800510e:	f7ff ff17 	bl	8004f40 <__exponent>
 8005112:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005114:	1813      	adds	r3, r2, r0
 8005116:	2a01      	cmp	r2, #1
 8005118:	4681      	mov	r9, r0
 800511a:	6123      	str	r3, [r4, #16]
 800511c:	dc02      	bgt.n	8005124 <_printf_float+0x168>
 800511e:	6822      	ldr	r2, [r4, #0]
 8005120:	07d2      	lsls	r2, r2, #31
 8005122:	d501      	bpl.n	8005128 <_printf_float+0x16c>
 8005124:	3301      	adds	r3, #1
 8005126:	6123      	str	r3, [r4, #16]
 8005128:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800512c:	2b00      	cmp	r3, #0
 800512e:	d09c      	beq.n	800506a <_printf_float+0xae>
 8005130:	232d      	movs	r3, #45	; 0x2d
 8005132:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005136:	e798      	b.n	800506a <_printf_float+0xae>
 8005138:	9a06      	ldr	r2, [sp, #24]
 800513a:	2a47      	cmp	r2, #71	; 0x47
 800513c:	d1be      	bne.n	80050bc <_printf_float+0x100>
 800513e:	2b00      	cmp	r3, #0
 8005140:	d1bc      	bne.n	80050bc <_printf_float+0x100>
 8005142:	2301      	movs	r3, #1
 8005144:	e7b9      	b.n	80050ba <_printf_float+0xfe>
 8005146:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800514a:	d118      	bne.n	800517e <_printf_float+0x1c2>
 800514c:	2900      	cmp	r1, #0
 800514e:	6863      	ldr	r3, [r4, #4]
 8005150:	dd0b      	ble.n	800516a <_printf_float+0x1ae>
 8005152:	6121      	str	r1, [r4, #16]
 8005154:	b913      	cbnz	r3, 800515c <_printf_float+0x1a0>
 8005156:	6822      	ldr	r2, [r4, #0]
 8005158:	07d0      	lsls	r0, r2, #31
 800515a:	d502      	bpl.n	8005162 <_printf_float+0x1a6>
 800515c:	3301      	adds	r3, #1
 800515e:	440b      	add	r3, r1
 8005160:	6123      	str	r3, [r4, #16]
 8005162:	65a1      	str	r1, [r4, #88]	; 0x58
 8005164:	f04f 0900 	mov.w	r9, #0
 8005168:	e7de      	b.n	8005128 <_printf_float+0x16c>
 800516a:	b913      	cbnz	r3, 8005172 <_printf_float+0x1b6>
 800516c:	6822      	ldr	r2, [r4, #0]
 800516e:	07d2      	lsls	r2, r2, #31
 8005170:	d501      	bpl.n	8005176 <_printf_float+0x1ba>
 8005172:	3302      	adds	r3, #2
 8005174:	e7f4      	b.n	8005160 <_printf_float+0x1a4>
 8005176:	2301      	movs	r3, #1
 8005178:	e7f2      	b.n	8005160 <_printf_float+0x1a4>
 800517a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800517e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005180:	4299      	cmp	r1, r3
 8005182:	db05      	blt.n	8005190 <_printf_float+0x1d4>
 8005184:	6823      	ldr	r3, [r4, #0]
 8005186:	6121      	str	r1, [r4, #16]
 8005188:	07d8      	lsls	r0, r3, #31
 800518a:	d5ea      	bpl.n	8005162 <_printf_float+0x1a6>
 800518c:	1c4b      	adds	r3, r1, #1
 800518e:	e7e7      	b.n	8005160 <_printf_float+0x1a4>
 8005190:	2900      	cmp	r1, #0
 8005192:	bfd4      	ite	le
 8005194:	f1c1 0202 	rsble	r2, r1, #2
 8005198:	2201      	movgt	r2, #1
 800519a:	4413      	add	r3, r2
 800519c:	e7e0      	b.n	8005160 <_printf_float+0x1a4>
 800519e:	6823      	ldr	r3, [r4, #0]
 80051a0:	055a      	lsls	r2, r3, #21
 80051a2:	d407      	bmi.n	80051b4 <_printf_float+0x1f8>
 80051a4:	6923      	ldr	r3, [r4, #16]
 80051a6:	4642      	mov	r2, r8
 80051a8:	4631      	mov	r1, r6
 80051aa:	4628      	mov	r0, r5
 80051ac:	47b8      	blx	r7
 80051ae:	3001      	adds	r0, #1
 80051b0:	d12c      	bne.n	800520c <_printf_float+0x250>
 80051b2:	e764      	b.n	800507e <_printf_float+0xc2>
 80051b4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80051b8:	f240 80e0 	bls.w	800537c <_printf_float+0x3c0>
 80051bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80051c0:	2200      	movs	r2, #0
 80051c2:	2300      	movs	r3, #0
 80051c4:	f7fb fca0 	bl	8000b08 <__aeabi_dcmpeq>
 80051c8:	2800      	cmp	r0, #0
 80051ca:	d034      	beq.n	8005236 <_printf_float+0x27a>
 80051cc:	4a37      	ldr	r2, [pc, #220]	; (80052ac <_printf_float+0x2f0>)
 80051ce:	2301      	movs	r3, #1
 80051d0:	4631      	mov	r1, r6
 80051d2:	4628      	mov	r0, r5
 80051d4:	47b8      	blx	r7
 80051d6:	3001      	adds	r0, #1
 80051d8:	f43f af51 	beq.w	800507e <_printf_float+0xc2>
 80051dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80051e0:	429a      	cmp	r2, r3
 80051e2:	db02      	blt.n	80051ea <_printf_float+0x22e>
 80051e4:	6823      	ldr	r3, [r4, #0]
 80051e6:	07d8      	lsls	r0, r3, #31
 80051e8:	d510      	bpl.n	800520c <_printf_float+0x250>
 80051ea:	ee18 3a10 	vmov	r3, s16
 80051ee:	4652      	mov	r2, sl
 80051f0:	4631      	mov	r1, r6
 80051f2:	4628      	mov	r0, r5
 80051f4:	47b8      	blx	r7
 80051f6:	3001      	adds	r0, #1
 80051f8:	f43f af41 	beq.w	800507e <_printf_float+0xc2>
 80051fc:	f04f 0800 	mov.w	r8, #0
 8005200:	f104 091a 	add.w	r9, r4, #26
 8005204:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005206:	3b01      	subs	r3, #1
 8005208:	4543      	cmp	r3, r8
 800520a:	dc09      	bgt.n	8005220 <_printf_float+0x264>
 800520c:	6823      	ldr	r3, [r4, #0]
 800520e:	079b      	lsls	r3, r3, #30
 8005210:	f100 8105 	bmi.w	800541e <_printf_float+0x462>
 8005214:	68e0      	ldr	r0, [r4, #12]
 8005216:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005218:	4298      	cmp	r0, r3
 800521a:	bfb8      	it	lt
 800521c:	4618      	movlt	r0, r3
 800521e:	e730      	b.n	8005082 <_printf_float+0xc6>
 8005220:	2301      	movs	r3, #1
 8005222:	464a      	mov	r2, r9
 8005224:	4631      	mov	r1, r6
 8005226:	4628      	mov	r0, r5
 8005228:	47b8      	blx	r7
 800522a:	3001      	adds	r0, #1
 800522c:	f43f af27 	beq.w	800507e <_printf_float+0xc2>
 8005230:	f108 0801 	add.w	r8, r8, #1
 8005234:	e7e6      	b.n	8005204 <_printf_float+0x248>
 8005236:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005238:	2b00      	cmp	r3, #0
 800523a:	dc39      	bgt.n	80052b0 <_printf_float+0x2f4>
 800523c:	4a1b      	ldr	r2, [pc, #108]	; (80052ac <_printf_float+0x2f0>)
 800523e:	2301      	movs	r3, #1
 8005240:	4631      	mov	r1, r6
 8005242:	4628      	mov	r0, r5
 8005244:	47b8      	blx	r7
 8005246:	3001      	adds	r0, #1
 8005248:	f43f af19 	beq.w	800507e <_printf_float+0xc2>
 800524c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005250:	4313      	orrs	r3, r2
 8005252:	d102      	bne.n	800525a <_printf_float+0x29e>
 8005254:	6823      	ldr	r3, [r4, #0]
 8005256:	07d9      	lsls	r1, r3, #31
 8005258:	d5d8      	bpl.n	800520c <_printf_float+0x250>
 800525a:	ee18 3a10 	vmov	r3, s16
 800525e:	4652      	mov	r2, sl
 8005260:	4631      	mov	r1, r6
 8005262:	4628      	mov	r0, r5
 8005264:	47b8      	blx	r7
 8005266:	3001      	adds	r0, #1
 8005268:	f43f af09 	beq.w	800507e <_printf_float+0xc2>
 800526c:	f04f 0900 	mov.w	r9, #0
 8005270:	f104 0a1a 	add.w	sl, r4, #26
 8005274:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005276:	425b      	negs	r3, r3
 8005278:	454b      	cmp	r3, r9
 800527a:	dc01      	bgt.n	8005280 <_printf_float+0x2c4>
 800527c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800527e:	e792      	b.n	80051a6 <_printf_float+0x1ea>
 8005280:	2301      	movs	r3, #1
 8005282:	4652      	mov	r2, sl
 8005284:	4631      	mov	r1, r6
 8005286:	4628      	mov	r0, r5
 8005288:	47b8      	blx	r7
 800528a:	3001      	adds	r0, #1
 800528c:	f43f aef7 	beq.w	800507e <_printf_float+0xc2>
 8005290:	f109 0901 	add.w	r9, r9, #1
 8005294:	e7ee      	b.n	8005274 <_printf_float+0x2b8>
 8005296:	bf00      	nop
 8005298:	7fefffff 	.word	0x7fefffff
 800529c:	08007cec 	.word	0x08007cec
 80052a0:	08007cf0 	.word	0x08007cf0
 80052a4:	08007cf8 	.word	0x08007cf8
 80052a8:	08007cf4 	.word	0x08007cf4
 80052ac:	08007cfc 	.word	0x08007cfc
 80052b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80052b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80052b4:	429a      	cmp	r2, r3
 80052b6:	bfa8      	it	ge
 80052b8:	461a      	movge	r2, r3
 80052ba:	2a00      	cmp	r2, #0
 80052bc:	4691      	mov	r9, r2
 80052be:	dc37      	bgt.n	8005330 <_printf_float+0x374>
 80052c0:	f04f 0b00 	mov.w	fp, #0
 80052c4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80052c8:	f104 021a 	add.w	r2, r4, #26
 80052cc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80052ce:	9305      	str	r3, [sp, #20]
 80052d0:	eba3 0309 	sub.w	r3, r3, r9
 80052d4:	455b      	cmp	r3, fp
 80052d6:	dc33      	bgt.n	8005340 <_printf_float+0x384>
 80052d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80052dc:	429a      	cmp	r2, r3
 80052de:	db3b      	blt.n	8005358 <_printf_float+0x39c>
 80052e0:	6823      	ldr	r3, [r4, #0]
 80052e2:	07da      	lsls	r2, r3, #31
 80052e4:	d438      	bmi.n	8005358 <_printf_float+0x39c>
 80052e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052e8:	9a05      	ldr	r2, [sp, #20]
 80052ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80052ec:	1a9a      	subs	r2, r3, r2
 80052ee:	eba3 0901 	sub.w	r9, r3, r1
 80052f2:	4591      	cmp	r9, r2
 80052f4:	bfa8      	it	ge
 80052f6:	4691      	movge	r9, r2
 80052f8:	f1b9 0f00 	cmp.w	r9, #0
 80052fc:	dc35      	bgt.n	800536a <_printf_float+0x3ae>
 80052fe:	f04f 0800 	mov.w	r8, #0
 8005302:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005306:	f104 0a1a 	add.w	sl, r4, #26
 800530a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800530e:	1a9b      	subs	r3, r3, r2
 8005310:	eba3 0309 	sub.w	r3, r3, r9
 8005314:	4543      	cmp	r3, r8
 8005316:	f77f af79 	ble.w	800520c <_printf_float+0x250>
 800531a:	2301      	movs	r3, #1
 800531c:	4652      	mov	r2, sl
 800531e:	4631      	mov	r1, r6
 8005320:	4628      	mov	r0, r5
 8005322:	47b8      	blx	r7
 8005324:	3001      	adds	r0, #1
 8005326:	f43f aeaa 	beq.w	800507e <_printf_float+0xc2>
 800532a:	f108 0801 	add.w	r8, r8, #1
 800532e:	e7ec      	b.n	800530a <_printf_float+0x34e>
 8005330:	4613      	mov	r3, r2
 8005332:	4631      	mov	r1, r6
 8005334:	4642      	mov	r2, r8
 8005336:	4628      	mov	r0, r5
 8005338:	47b8      	blx	r7
 800533a:	3001      	adds	r0, #1
 800533c:	d1c0      	bne.n	80052c0 <_printf_float+0x304>
 800533e:	e69e      	b.n	800507e <_printf_float+0xc2>
 8005340:	2301      	movs	r3, #1
 8005342:	4631      	mov	r1, r6
 8005344:	4628      	mov	r0, r5
 8005346:	9205      	str	r2, [sp, #20]
 8005348:	47b8      	blx	r7
 800534a:	3001      	adds	r0, #1
 800534c:	f43f ae97 	beq.w	800507e <_printf_float+0xc2>
 8005350:	9a05      	ldr	r2, [sp, #20]
 8005352:	f10b 0b01 	add.w	fp, fp, #1
 8005356:	e7b9      	b.n	80052cc <_printf_float+0x310>
 8005358:	ee18 3a10 	vmov	r3, s16
 800535c:	4652      	mov	r2, sl
 800535e:	4631      	mov	r1, r6
 8005360:	4628      	mov	r0, r5
 8005362:	47b8      	blx	r7
 8005364:	3001      	adds	r0, #1
 8005366:	d1be      	bne.n	80052e6 <_printf_float+0x32a>
 8005368:	e689      	b.n	800507e <_printf_float+0xc2>
 800536a:	9a05      	ldr	r2, [sp, #20]
 800536c:	464b      	mov	r3, r9
 800536e:	4442      	add	r2, r8
 8005370:	4631      	mov	r1, r6
 8005372:	4628      	mov	r0, r5
 8005374:	47b8      	blx	r7
 8005376:	3001      	adds	r0, #1
 8005378:	d1c1      	bne.n	80052fe <_printf_float+0x342>
 800537a:	e680      	b.n	800507e <_printf_float+0xc2>
 800537c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800537e:	2a01      	cmp	r2, #1
 8005380:	dc01      	bgt.n	8005386 <_printf_float+0x3ca>
 8005382:	07db      	lsls	r3, r3, #31
 8005384:	d538      	bpl.n	80053f8 <_printf_float+0x43c>
 8005386:	2301      	movs	r3, #1
 8005388:	4642      	mov	r2, r8
 800538a:	4631      	mov	r1, r6
 800538c:	4628      	mov	r0, r5
 800538e:	47b8      	blx	r7
 8005390:	3001      	adds	r0, #1
 8005392:	f43f ae74 	beq.w	800507e <_printf_float+0xc2>
 8005396:	ee18 3a10 	vmov	r3, s16
 800539a:	4652      	mov	r2, sl
 800539c:	4631      	mov	r1, r6
 800539e:	4628      	mov	r0, r5
 80053a0:	47b8      	blx	r7
 80053a2:	3001      	adds	r0, #1
 80053a4:	f43f ae6b 	beq.w	800507e <_printf_float+0xc2>
 80053a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80053ac:	2200      	movs	r2, #0
 80053ae:	2300      	movs	r3, #0
 80053b0:	f7fb fbaa 	bl	8000b08 <__aeabi_dcmpeq>
 80053b4:	b9d8      	cbnz	r0, 80053ee <_printf_float+0x432>
 80053b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053b8:	f108 0201 	add.w	r2, r8, #1
 80053bc:	3b01      	subs	r3, #1
 80053be:	4631      	mov	r1, r6
 80053c0:	4628      	mov	r0, r5
 80053c2:	47b8      	blx	r7
 80053c4:	3001      	adds	r0, #1
 80053c6:	d10e      	bne.n	80053e6 <_printf_float+0x42a>
 80053c8:	e659      	b.n	800507e <_printf_float+0xc2>
 80053ca:	2301      	movs	r3, #1
 80053cc:	4652      	mov	r2, sl
 80053ce:	4631      	mov	r1, r6
 80053d0:	4628      	mov	r0, r5
 80053d2:	47b8      	blx	r7
 80053d4:	3001      	adds	r0, #1
 80053d6:	f43f ae52 	beq.w	800507e <_printf_float+0xc2>
 80053da:	f108 0801 	add.w	r8, r8, #1
 80053de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053e0:	3b01      	subs	r3, #1
 80053e2:	4543      	cmp	r3, r8
 80053e4:	dcf1      	bgt.n	80053ca <_printf_float+0x40e>
 80053e6:	464b      	mov	r3, r9
 80053e8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80053ec:	e6dc      	b.n	80051a8 <_printf_float+0x1ec>
 80053ee:	f04f 0800 	mov.w	r8, #0
 80053f2:	f104 0a1a 	add.w	sl, r4, #26
 80053f6:	e7f2      	b.n	80053de <_printf_float+0x422>
 80053f8:	2301      	movs	r3, #1
 80053fa:	4642      	mov	r2, r8
 80053fc:	e7df      	b.n	80053be <_printf_float+0x402>
 80053fe:	2301      	movs	r3, #1
 8005400:	464a      	mov	r2, r9
 8005402:	4631      	mov	r1, r6
 8005404:	4628      	mov	r0, r5
 8005406:	47b8      	blx	r7
 8005408:	3001      	adds	r0, #1
 800540a:	f43f ae38 	beq.w	800507e <_printf_float+0xc2>
 800540e:	f108 0801 	add.w	r8, r8, #1
 8005412:	68e3      	ldr	r3, [r4, #12]
 8005414:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005416:	1a5b      	subs	r3, r3, r1
 8005418:	4543      	cmp	r3, r8
 800541a:	dcf0      	bgt.n	80053fe <_printf_float+0x442>
 800541c:	e6fa      	b.n	8005214 <_printf_float+0x258>
 800541e:	f04f 0800 	mov.w	r8, #0
 8005422:	f104 0919 	add.w	r9, r4, #25
 8005426:	e7f4      	b.n	8005412 <_printf_float+0x456>

08005428 <_printf_common>:
 8005428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800542c:	4616      	mov	r6, r2
 800542e:	4699      	mov	r9, r3
 8005430:	688a      	ldr	r2, [r1, #8]
 8005432:	690b      	ldr	r3, [r1, #16]
 8005434:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005438:	4293      	cmp	r3, r2
 800543a:	bfb8      	it	lt
 800543c:	4613      	movlt	r3, r2
 800543e:	6033      	str	r3, [r6, #0]
 8005440:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005444:	4607      	mov	r7, r0
 8005446:	460c      	mov	r4, r1
 8005448:	b10a      	cbz	r2, 800544e <_printf_common+0x26>
 800544a:	3301      	adds	r3, #1
 800544c:	6033      	str	r3, [r6, #0]
 800544e:	6823      	ldr	r3, [r4, #0]
 8005450:	0699      	lsls	r1, r3, #26
 8005452:	bf42      	ittt	mi
 8005454:	6833      	ldrmi	r3, [r6, #0]
 8005456:	3302      	addmi	r3, #2
 8005458:	6033      	strmi	r3, [r6, #0]
 800545a:	6825      	ldr	r5, [r4, #0]
 800545c:	f015 0506 	ands.w	r5, r5, #6
 8005460:	d106      	bne.n	8005470 <_printf_common+0x48>
 8005462:	f104 0a19 	add.w	sl, r4, #25
 8005466:	68e3      	ldr	r3, [r4, #12]
 8005468:	6832      	ldr	r2, [r6, #0]
 800546a:	1a9b      	subs	r3, r3, r2
 800546c:	42ab      	cmp	r3, r5
 800546e:	dc26      	bgt.n	80054be <_printf_common+0x96>
 8005470:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005474:	1e13      	subs	r3, r2, #0
 8005476:	6822      	ldr	r2, [r4, #0]
 8005478:	bf18      	it	ne
 800547a:	2301      	movne	r3, #1
 800547c:	0692      	lsls	r2, r2, #26
 800547e:	d42b      	bmi.n	80054d8 <_printf_common+0xb0>
 8005480:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005484:	4649      	mov	r1, r9
 8005486:	4638      	mov	r0, r7
 8005488:	47c0      	blx	r8
 800548a:	3001      	adds	r0, #1
 800548c:	d01e      	beq.n	80054cc <_printf_common+0xa4>
 800548e:	6823      	ldr	r3, [r4, #0]
 8005490:	68e5      	ldr	r5, [r4, #12]
 8005492:	6832      	ldr	r2, [r6, #0]
 8005494:	f003 0306 	and.w	r3, r3, #6
 8005498:	2b04      	cmp	r3, #4
 800549a:	bf08      	it	eq
 800549c:	1aad      	subeq	r5, r5, r2
 800549e:	68a3      	ldr	r3, [r4, #8]
 80054a0:	6922      	ldr	r2, [r4, #16]
 80054a2:	bf0c      	ite	eq
 80054a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054a8:	2500      	movne	r5, #0
 80054aa:	4293      	cmp	r3, r2
 80054ac:	bfc4      	itt	gt
 80054ae:	1a9b      	subgt	r3, r3, r2
 80054b0:	18ed      	addgt	r5, r5, r3
 80054b2:	2600      	movs	r6, #0
 80054b4:	341a      	adds	r4, #26
 80054b6:	42b5      	cmp	r5, r6
 80054b8:	d11a      	bne.n	80054f0 <_printf_common+0xc8>
 80054ba:	2000      	movs	r0, #0
 80054bc:	e008      	b.n	80054d0 <_printf_common+0xa8>
 80054be:	2301      	movs	r3, #1
 80054c0:	4652      	mov	r2, sl
 80054c2:	4649      	mov	r1, r9
 80054c4:	4638      	mov	r0, r7
 80054c6:	47c0      	blx	r8
 80054c8:	3001      	adds	r0, #1
 80054ca:	d103      	bne.n	80054d4 <_printf_common+0xac>
 80054cc:	f04f 30ff 	mov.w	r0, #4294967295
 80054d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054d4:	3501      	adds	r5, #1
 80054d6:	e7c6      	b.n	8005466 <_printf_common+0x3e>
 80054d8:	18e1      	adds	r1, r4, r3
 80054da:	1c5a      	adds	r2, r3, #1
 80054dc:	2030      	movs	r0, #48	; 0x30
 80054de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80054e2:	4422      	add	r2, r4
 80054e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80054e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80054ec:	3302      	adds	r3, #2
 80054ee:	e7c7      	b.n	8005480 <_printf_common+0x58>
 80054f0:	2301      	movs	r3, #1
 80054f2:	4622      	mov	r2, r4
 80054f4:	4649      	mov	r1, r9
 80054f6:	4638      	mov	r0, r7
 80054f8:	47c0      	blx	r8
 80054fa:	3001      	adds	r0, #1
 80054fc:	d0e6      	beq.n	80054cc <_printf_common+0xa4>
 80054fe:	3601      	adds	r6, #1
 8005500:	e7d9      	b.n	80054b6 <_printf_common+0x8e>
	...

08005504 <_printf_i>:
 8005504:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005508:	7e0f      	ldrb	r7, [r1, #24]
 800550a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800550c:	2f78      	cmp	r7, #120	; 0x78
 800550e:	4691      	mov	r9, r2
 8005510:	4680      	mov	r8, r0
 8005512:	460c      	mov	r4, r1
 8005514:	469a      	mov	sl, r3
 8005516:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800551a:	d807      	bhi.n	800552c <_printf_i+0x28>
 800551c:	2f62      	cmp	r7, #98	; 0x62
 800551e:	d80a      	bhi.n	8005536 <_printf_i+0x32>
 8005520:	2f00      	cmp	r7, #0
 8005522:	f000 80d8 	beq.w	80056d6 <_printf_i+0x1d2>
 8005526:	2f58      	cmp	r7, #88	; 0x58
 8005528:	f000 80a3 	beq.w	8005672 <_printf_i+0x16e>
 800552c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005530:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005534:	e03a      	b.n	80055ac <_printf_i+0xa8>
 8005536:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800553a:	2b15      	cmp	r3, #21
 800553c:	d8f6      	bhi.n	800552c <_printf_i+0x28>
 800553e:	a101      	add	r1, pc, #4	; (adr r1, 8005544 <_printf_i+0x40>)
 8005540:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005544:	0800559d 	.word	0x0800559d
 8005548:	080055b1 	.word	0x080055b1
 800554c:	0800552d 	.word	0x0800552d
 8005550:	0800552d 	.word	0x0800552d
 8005554:	0800552d 	.word	0x0800552d
 8005558:	0800552d 	.word	0x0800552d
 800555c:	080055b1 	.word	0x080055b1
 8005560:	0800552d 	.word	0x0800552d
 8005564:	0800552d 	.word	0x0800552d
 8005568:	0800552d 	.word	0x0800552d
 800556c:	0800552d 	.word	0x0800552d
 8005570:	080056bd 	.word	0x080056bd
 8005574:	080055e1 	.word	0x080055e1
 8005578:	0800569f 	.word	0x0800569f
 800557c:	0800552d 	.word	0x0800552d
 8005580:	0800552d 	.word	0x0800552d
 8005584:	080056df 	.word	0x080056df
 8005588:	0800552d 	.word	0x0800552d
 800558c:	080055e1 	.word	0x080055e1
 8005590:	0800552d 	.word	0x0800552d
 8005594:	0800552d 	.word	0x0800552d
 8005598:	080056a7 	.word	0x080056a7
 800559c:	682b      	ldr	r3, [r5, #0]
 800559e:	1d1a      	adds	r2, r3, #4
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	602a      	str	r2, [r5, #0]
 80055a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80055ac:	2301      	movs	r3, #1
 80055ae:	e0a3      	b.n	80056f8 <_printf_i+0x1f4>
 80055b0:	6820      	ldr	r0, [r4, #0]
 80055b2:	6829      	ldr	r1, [r5, #0]
 80055b4:	0606      	lsls	r6, r0, #24
 80055b6:	f101 0304 	add.w	r3, r1, #4
 80055ba:	d50a      	bpl.n	80055d2 <_printf_i+0xce>
 80055bc:	680e      	ldr	r6, [r1, #0]
 80055be:	602b      	str	r3, [r5, #0]
 80055c0:	2e00      	cmp	r6, #0
 80055c2:	da03      	bge.n	80055cc <_printf_i+0xc8>
 80055c4:	232d      	movs	r3, #45	; 0x2d
 80055c6:	4276      	negs	r6, r6
 80055c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055cc:	485e      	ldr	r0, [pc, #376]	; (8005748 <_printf_i+0x244>)
 80055ce:	230a      	movs	r3, #10
 80055d0:	e019      	b.n	8005606 <_printf_i+0x102>
 80055d2:	680e      	ldr	r6, [r1, #0]
 80055d4:	602b      	str	r3, [r5, #0]
 80055d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80055da:	bf18      	it	ne
 80055dc:	b236      	sxthne	r6, r6
 80055de:	e7ef      	b.n	80055c0 <_printf_i+0xbc>
 80055e0:	682b      	ldr	r3, [r5, #0]
 80055e2:	6820      	ldr	r0, [r4, #0]
 80055e4:	1d19      	adds	r1, r3, #4
 80055e6:	6029      	str	r1, [r5, #0]
 80055e8:	0601      	lsls	r1, r0, #24
 80055ea:	d501      	bpl.n	80055f0 <_printf_i+0xec>
 80055ec:	681e      	ldr	r6, [r3, #0]
 80055ee:	e002      	b.n	80055f6 <_printf_i+0xf2>
 80055f0:	0646      	lsls	r6, r0, #25
 80055f2:	d5fb      	bpl.n	80055ec <_printf_i+0xe8>
 80055f4:	881e      	ldrh	r6, [r3, #0]
 80055f6:	4854      	ldr	r0, [pc, #336]	; (8005748 <_printf_i+0x244>)
 80055f8:	2f6f      	cmp	r7, #111	; 0x6f
 80055fa:	bf0c      	ite	eq
 80055fc:	2308      	moveq	r3, #8
 80055fe:	230a      	movne	r3, #10
 8005600:	2100      	movs	r1, #0
 8005602:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005606:	6865      	ldr	r5, [r4, #4]
 8005608:	60a5      	str	r5, [r4, #8]
 800560a:	2d00      	cmp	r5, #0
 800560c:	bfa2      	ittt	ge
 800560e:	6821      	ldrge	r1, [r4, #0]
 8005610:	f021 0104 	bicge.w	r1, r1, #4
 8005614:	6021      	strge	r1, [r4, #0]
 8005616:	b90e      	cbnz	r6, 800561c <_printf_i+0x118>
 8005618:	2d00      	cmp	r5, #0
 800561a:	d04d      	beq.n	80056b8 <_printf_i+0x1b4>
 800561c:	4615      	mov	r5, r2
 800561e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005622:	fb03 6711 	mls	r7, r3, r1, r6
 8005626:	5dc7      	ldrb	r7, [r0, r7]
 8005628:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800562c:	4637      	mov	r7, r6
 800562e:	42bb      	cmp	r3, r7
 8005630:	460e      	mov	r6, r1
 8005632:	d9f4      	bls.n	800561e <_printf_i+0x11a>
 8005634:	2b08      	cmp	r3, #8
 8005636:	d10b      	bne.n	8005650 <_printf_i+0x14c>
 8005638:	6823      	ldr	r3, [r4, #0]
 800563a:	07de      	lsls	r6, r3, #31
 800563c:	d508      	bpl.n	8005650 <_printf_i+0x14c>
 800563e:	6923      	ldr	r3, [r4, #16]
 8005640:	6861      	ldr	r1, [r4, #4]
 8005642:	4299      	cmp	r1, r3
 8005644:	bfde      	ittt	le
 8005646:	2330      	movle	r3, #48	; 0x30
 8005648:	f805 3c01 	strble.w	r3, [r5, #-1]
 800564c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005650:	1b52      	subs	r2, r2, r5
 8005652:	6122      	str	r2, [r4, #16]
 8005654:	f8cd a000 	str.w	sl, [sp]
 8005658:	464b      	mov	r3, r9
 800565a:	aa03      	add	r2, sp, #12
 800565c:	4621      	mov	r1, r4
 800565e:	4640      	mov	r0, r8
 8005660:	f7ff fee2 	bl	8005428 <_printf_common>
 8005664:	3001      	adds	r0, #1
 8005666:	d14c      	bne.n	8005702 <_printf_i+0x1fe>
 8005668:	f04f 30ff 	mov.w	r0, #4294967295
 800566c:	b004      	add	sp, #16
 800566e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005672:	4835      	ldr	r0, [pc, #212]	; (8005748 <_printf_i+0x244>)
 8005674:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005678:	6829      	ldr	r1, [r5, #0]
 800567a:	6823      	ldr	r3, [r4, #0]
 800567c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005680:	6029      	str	r1, [r5, #0]
 8005682:	061d      	lsls	r5, r3, #24
 8005684:	d514      	bpl.n	80056b0 <_printf_i+0x1ac>
 8005686:	07df      	lsls	r7, r3, #31
 8005688:	bf44      	itt	mi
 800568a:	f043 0320 	orrmi.w	r3, r3, #32
 800568e:	6023      	strmi	r3, [r4, #0]
 8005690:	b91e      	cbnz	r6, 800569a <_printf_i+0x196>
 8005692:	6823      	ldr	r3, [r4, #0]
 8005694:	f023 0320 	bic.w	r3, r3, #32
 8005698:	6023      	str	r3, [r4, #0]
 800569a:	2310      	movs	r3, #16
 800569c:	e7b0      	b.n	8005600 <_printf_i+0xfc>
 800569e:	6823      	ldr	r3, [r4, #0]
 80056a0:	f043 0320 	orr.w	r3, r3, #32
 80056a4:	6023      	str	r3, [r4, #0]
 80056a6:	2378      	movs	r3, #120	; 0x78
 80056a8:	4828      	ldr	r0, [pc, #160]	; (800574c <_printf_i+0x248>)
 80056aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80056ae:	e7e3      	b.n	8005678 <_printf_i+0x174>
 80056b0:	0659      	lsls	r1, r3, #25
 80056b2:	bf48      	it	mi
 80056b4:	b2b6      	uxthmi	r6, r6
 80056b6:	e7e6      	b.n	8005686 <_printf_i+0x182>
 80056b8:	4615      	mov	r5, r2
 80056ba:	e7bb      	b.n	8005634 <_printf_i+0x130>
 80056bc:	682b      	ldr	r3, [r5, #0]
 80056be:	6826      	ldr	r6, [r4, #0]
 80056c0:	6961      	ldr	r1, [r4, #20]
 80056c2:	1d18      	adds	r0, r3, #4
 80056c4:	6028      	str	r0, [r5, #0]
 80056c6:	0635      	lsls	r5, r6, #24
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	d501      	bpl.n	80056d0 <_printf_i+0x1cc>
 80056cc:	6019      	str	r1, [r3, #0]
 80056ce:	e002      	b.n	80056d6 <_printf_i+0x1d2>
 80056d0:	0670      	lsls	r0, r6, #25
 80056d2:	d5fb      	bpl.n	80056cc <_printf_i+0x1c8>
 80056d4:	8019      	strh	r1, [r3, #0]
 80056d6:	2300      	movs	r3, #0
 80056d8:	6123      	str	r3, [r4, #16]
 80056da:	4615      	mov	r5, r2
 80056dc:	e7ba      	b.n	8005654 <_printf_i+0x150>
 80056de:	682b      	ldr	r3, [r5, #0]
 80056e0:	1d1a      	adds	r2, r3, #4
 80056e2:	602a      	str	r2, [r5, #0]
 80056e4:	681d      	ldr	r5, [r3, #0]
 80056e6:	6862      	ldr	r2, [r4, #4]
 80056e8:	2100      	movs	r1, #0
 80056ea:	4628      	mov	r0, r5
 80056ec:	f7fa fd98 	bl	8000220 <memchr>
 80056f0:	b108      	cbz	r0, 80056f6 <_printf_i+0x1f2>
 80056f2:	1b40      	subs	r0, r0, r5
 80056f4:	6060      	str	r0, [r4, #4]
 80056f6:	6863      	ldr	r3, [r4, #4]
 80056f8:	6123      	str	r3, [r4, #16]
 80056fa:	2300      	movs	r3, #0
 80056fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005700:	e7a8      	b.n	8005654 <_printf_i+0x150>
 8005702:	6923      	ldr	r3, [r4, #16]
 8005704:	462a      	mov	r2, r5
 8005706:	4649      	mov	r1, r9
 8005708:	4640      	mov	r0, r8
 800570a:	47d0      	blx	sl
 800570c:	3001      	adds	r0, #1
 800570e:	d0ab      	beq.n	8005668 <_printf_i+0x164>
 8005710:	6823      	ldr	r3, [r4, #0]
 8005712:	079b      	lsls	r3, r3, #30
 8005714:	d413      	bmi.n	800573e <_printf_i+0x23a>
 8005716:	68e0      	ldr	r0, [r4, #12]
 8005718:	9b03      	ldr	r3, [sp, #12]
 800571a:	4298      	cmp	r0, r3
 800571c:	bfb8      	it	lt
 800571e:	4618      	movlt	r0, r3
 8005720:	e7a4      	b.n	800566c <_printf_i+0x168>
 8005722:	2301      	movs	r3, #1
 8005724:	4632      	mov	r2, r6
 8005726:	4649      	mov	r1, r9
 8005728:	4640      	mov	r0, r8
 800572a:	47d0      	blx	sl
 800572c:	3001      	adds	r0, #1
 800572e:	d09b      	beq.n	8005668 <_printf_i+0x164>
 8005730:	3501      	adds	r5, #1
 8005732:	68e3      	ldr	r3, [r4, #12]
 8005734:	9903      	ldr	r1, [sp, #12]
 8005736:	1a5b      	subs	r3, r3, r1
 8005738:	42ab      	cmp	r3, r5
 800573a:	dcf2      	bgt.n	8005722 <_printf_i+0x21e>
 800573c:	e7eb      	b.n	8005716 <_printf_i+0x212>
 800573e:	2500      	movs	r5, #0
 8005740:	f104 0619 	add.w	r6, r4, #25
 8005744:	e7f5      	b.n	8005732 <_printf_i+0x22e>
 8005746:	bf00      	nop
 8005748:	08007cfe 	.word	0x08007cfe
 800574c:	08007d0f 	.word	0x08007d0f

08005750 <siprintf>:
 8005750:	b40e      	push	{r1, r2, r3}
 8005752:	b500      	push	{lr}
 8005754:	b09c      	sub	sp, #112	; 0x70
 8005756:	ab1d      	add	r3, sp, #116	; 0x74
 8005758:	9002      	str	r0, [sp, #8]
 800575a:	9006      	str	r0, [sp, #24]
 800575c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005760:	4809      	ldr	r0, [pc, #36]	; (8005788 <siprintf+0x38>)
 8005762:	9107      	str	r1, [sp, #28]
 8005764:	9104      	str	r1, [sp, #16]
 8005766:	4909      	ldr	r1, [pc, #36]	; (800578c <siprintf+0x3c>)
 8005768:	f853 2b04 	ldr.w	r2, [r3], #4
 800576c:	9105      	str	r1, [sp, #20]
 800576e:	6800      	ldr	r0, [r0, #0]
 8005770:	9301      	str	r3, [sp, #4]
 8005772:	a902      	add	r1, sp, #8
 8005774:	f001 fb68 	bl	8006e48 <_svfiprintf_r>
 8005778:	9b02      	ldr	r3, [sp, #8]
 800577a:	2200      	movs	r2, #0
 800577c:	701a      	strb	r2, [r3, #0]
 800577e:	b01c      	add	sp, #112	; 0x70
 8005780:	f85d eb04 	ldr.w	lr, [sp], #4
 8005784:	b003      	add	sp, #12
 8005786:	4770      	bx	lr
 8005788:	2000000c 	.word	0x2000000c
 800578c:	ffff0208 	.word	0xffff0208

08005790 <quorem>:
 8005790:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005794:	6903      	ldr	r3, [r0, #16]
 8005796:	690c      	ldr	r4, [r1, #16]
 8005798:	42a3      	cmp	r3, r4
 800579a:	4607      	mov	r7, r0
 800579c:	f2c0 8081 	blt.w	80058a2 <quorem+0x112>
 80057a0:	3c01      	subs	r4, #1
 80057a2:	f101 0814 	add.w	r8, r1, #20
 80057a6:	f100 0514 	add.w	r5, r0, #20
 80057aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80057ae:	9301      	str	r3, [sp, #4]
 80057b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80057b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80057b8:	3301      	adds	r3, #1
 80057ba:	429a      	cmp	r2, r3
 80057bc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80057c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80057c4:	fbb2 f6f3 	udiv	r6, r2, r3
 80057c8:	d331      	bcc.n	800582e <quorem+0x9e>
 80057ca:	f04f 0e00 	mov.w	lr, #0
 80057ce:	4640      	mov	r0, r8
 80057d0:	46ac      	mov	ip, r5
 80057d2:	46f2      	mov	sl, lr
 80057d4:	f850 2b04 	ldr.w	r2, [r0], #4
 80057d8:	b293      	uxth	r3, r2
 80057da:	fb06 e303 	mla	r3, r6, r3, lr
 80057de:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	ebaa 0303 	sub.w	r3, sl, r3
 80057e8:	f8dc a000 	ldr.w	sl, [ip]
 80057ec:	0c12      	lsrs	r2, r2, #16
 80057ee:	fa13 f38a 	uxtah	r3, r3, sl
 80057f2:	fb06 e202 	mla	r2, r6, r2, lr
 80057f6:	9300      	str	r3, [sp, #0]
 80057f8:	9b00      	ldr	r3, [sp, #0]
 80057fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80057fe:	b292      	uxth	r2, r2
 8005800:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005804:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005808:	f8bd 3000 	ldrh.w	r3, [sp]
 800580c:	4581      	cmp	r9, r0
 800580e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005812:	f84c 3b04 	str.w	r3, [ip], #4
 8005816:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800581a:	d2db      	bcs.n	80057d4 <quorem+0x44>
 800581c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005820:	b92b      	cbnz	r3, 800582e <quorem+0x9e>
 8005822:	9b01      	ldr	r3, [sp, #4]
 8005824:	3b04      	subs	r3, #4
 8005826:	429d      	cmp	r5, r3
 8005828:	461a      	mov	r2, r3
 800582a:	d32e      	bcc.n	800588a <quorem+0xfa>
 800582c:	613c      	str	r4, [r7, #16]
 800582e:	4638      	mov	r0, r7
 8005830:	f001 f8b6 	bl	80069a0 <__mcmp>
 8005834:	2800      	cmp	r0, #0
 8005836:	db24      	blt.n	8005882 <quorem+0xf2>
 8005838:	3601      	adds	r6, #1
 800583a:	4628      	mov	r0, r5
 800583c:	f04f 0c00 	mov.w	ip, #0
 8005840:	f858 2b04 	ldr.w	r2, [r8], #4
 8005844:	f8d0 e000 	ldr.w	lr, [r0]
 8005848:	b293      	uxth	r3, r2
 800584a:	ebac 0303 	sub.w	r3, ip, r3
 800584e:	0c12      	lsrs	r2, r2, #16
 8005850:	fa13 f38e 	uxtah	r3, r3, lr
 8005854:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005858:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800585c:	b29b      	uxth	r3, r3
 800585e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005862:	45c1      	cmp	r9, r8
 8005864:	f840 3b04 	str.w	r3, [r0], #4
 8005868:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800586c:	d2e8      	bcs.n	8005840 <quorem+0xb0>
 800586e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005872:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005876:	b922      	cbnz	r2, 8005882 <quorem+0xf2>
 8005878:	3b04      	subs	r3, #4
 800587a:	429d      	cmp	r5, r3
 800587c:	461a      	mov	r2, r3
 800587e:	d30a      	bcc.n	8005896 <quorem+0x106>
 8005880:	613c      	str	r4, [r7, #16]
 8005882:	4630      	mov	r0, r6
 8005884:	b003      	add	sp, #12
 8005886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800588a:	6812      	ldr	r2, [r2, #0]
 800588c:	3b04      	subs	r3, #4
 800588e:	2a00      	cmp	r2, #0
 8005890:	d1cc      	bne.n	800582c <quorem+0x9c>
 8005892:	3c01      	subs	r4, #1
 8005894:	e7c7      	b.n	8005826 <quorem+0x96>
 8005896:	6812      	ldr	r2, [r2, #0]
 8005898:	3b04      	subs	r3, #4
 800589a:	2a00      	cmp	r2, #0
 800589c:	d1f0      	bne.n	8005880 <quorem+0xf0>
 800589e:	3c01      	subs	r4, #1
 80058a0:	e7eb      	b.n	800587a <quorem+0xea>
 80058a2:	2000      	movs	r0, #0
 80058a4:	e7ee      	b.n	8005884 <quorem+0xf4>
	...

080058a8 <_dtoa_r>:
 80058a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058ac:	ed2d 8b04 	vpush	{d8-d9}
 80058b0:	ec57 6b10 	vmov	r6, r7, d0
 80058b4:	b093      	sub	sp, #76	; 0x4c
 80058b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80058b8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80058bc:	9106      	str	r1, [sp, #24]
 80058be:	ee10 aa10 	vmov	sl, s0
 80058c2:	4604      	mov	r4, r0
 80058c4:	9209      	str	r2, [sp, #36]	; 0x24
 80058c6:	930c      	str	r3, [sp, #48]	; 0x30
 80058c8:	46bb      	mov	fp, r7
 80058ca:	b975      	cbnz	r5, 80058ea <_dtoa_r+0x42>
 80058cc:	2010      	movs	r0, #16
 80058ce:	f000 fddd 	bl	800648c <malloc>
 80058d2:	4602      	mov	r2, r0
 80058d4:	6260      	str	r0, [r4, #36]	; 0x24
 80058d6:	b920      	cbnz	r0, 80058e2 <_dtoa_r+0x3a>
 80058d8:	4ba7      	ldr	r3, [pc, #668]	; (8005b78 <_dtoa_r+0x2d0>)
 80058da:	21ea      	movs	r1, #234	; 0xea
 80058dc:	48a7      	ldr	r0, [pc, #668]	; (8005b7c <_dtoa_r+0x2d4>)
 80058de:	f001 fbc3 	bl	8007068 <__assert_func>
 80058e2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80058e6:	6005      	str	r5, [r0, #0]
 80058e8:	60c5      	str	r5, [r0, #12]
 80058ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058ec:	6819      	ldr	r1, [r3, #0]
 80058ee:	b151      	cbz	r1, 8005906 <_dtoa_r+0x5e>
 80058f0:	685a      	ldr	r2, [r3, #4]
 80058f2:	604a      	str	r2, [r1, #4]
 80058f4:	2301      	movs	r3, #1
 80058f6:	4093      	lsls	r3, r2
 80058f8:	608b      	str	r3, [r1, #8]
 80058fa:	4620      	mov	r0, r4
 80058fc:	f000 fe0e 	bl	800651c <_Bfree>
 8005900:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005902:	2200      	movs	r2, #0
 8005904:	601a      	str	r2, [r3, #0]
 8005906:	1e3b      	subs	r3, r7, #0
 8005908:	bfaa      	itet	ge
 800590a:	2300      	movge	r3, #0
 800590c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005910:	f8c8 3000 	strge.w	r3, [r8]
 8005914:	4b9a      	ldr	r3, [pc, #616]	; (8005b80 <_dtoa_r+0x2d8>)
 8005916:	bfbc      	itt	lt
 8005918:	2201      	movlt	r2, #1
 800591a:	f8c8 2000 	strlt.w	r2, [r8]
 800591e:	ea33 030b 	bics.w	r3, r3, fp
 8005922:	d11b      	bne.n	800595c <_dtoa_r+0xb4>
 8005924:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005926:	f242 730f 	movw	r3, #9999	; 0x270f
 800592a:	6013      	str	r3, [r2, #0]
 800592c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005930:	4333      	orrs	r3, r6
 8005932:	f000 8592 	beq.w	800645a <_dtoa_r+0xbb2>
 8005936:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005938:	b963      	cbnz	r3, 8005954 <_dtoa_r+0xac>
 800593a:	4b92      	ldr	r3, [pc, #584]	; (8005b84 <_dtoa_r+0x2dc>)
 800593c:	e022      	b.n	8005984 <_dtoa_r+0xdc>
 800593e:	4b92      	ldr	r3, [pc, #584]	; (8005b88 <_dtoa_r+0x2e0>)
 8005940:	9301      	str	r3, [sp, #4]
 8005942:	3308      	adds	r3, #8
 8005944:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005946:	6013      	str	r3, [r2, #0]
 8005948:	9801      	ldr	r0, [sp, #4]
 800594a:	b013      	add	sp, #76	; 0x4c
 800594c:	ecbd 8b04 	vpop	{d8-d9}
 8005950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005954:	4b8b      	ldr	r3, [pc, #556]	; (8005b84 <_dtoa_r+0x2dc>)
 8005956:	9301      	str	r3, [sp, #4]
 8005958:	3303      	adds	r3, #3
 800595a:	e7f3      	b.n	8005944 <_dtoa_r+0x9c>
 800595c:	2200      	movs	r2, #0
 800595e:	2300      	movs	r3, #0
 8005960:	4650      	mov	r0, sl
 8005962:	4659      	mov	r1, fp
 8005964:	f7fb f8d0 	bl	8000b08 <__aeabi_dcmpeq>
 8005968:	ec4b ab19 	vmov	d9, sl, fp
 800596c:	4680      	mov	r8, r0
 800596e:	b158      	cbz	r0, 8005988 <_dtoa_r+0xe0>
 8005970:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005972:	2301      	movs	r3, #1
 8005974:	6013      	str	r3, [r2, #0]
 8005976:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005978:	2b00      	cmp	r3, #0
 800597a:	f000 856b 	beq.w	8006454 <_dtoa_r+0xbac>
 800597e:	4883      	ldr	r0, [pc, #524]	; (8005b8c <_dtoa_r+0x2e4>)
 8005980:	6018      	str	r0, [r3, #0]
 8005982:	1e43      	subs	r3, r0, #1
 8005984:	9301      	str	r3, [sp, #4]
 8005986:	e7df      	b.n	8005948 <_dtoa_r+0xa0>
 8005988:	ec4b ab10 	vmov	d0, sl, fp
 800598c:	aa10      	add	r2, sp, #64	; 0x40
 800598e:	a911      	add	r1, sp, #68	; 0x44
 8005990:	4620      	mov	r0, r4
 8005992:	f001 f8ab 	bl	8006aec <__d2b>
 8005996:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800599a:	ee08 0a10 	vmov	s16, r0
 800599e:	2d00      	cmp	r5, #0
 80059a0:	f000 8084 	beq.w	8005aac <_dtoa_r+0x204>
 80059a4:	ee19 3a90 	vmov	r3, s19
 80059a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80059ac:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80059b0:	4656      	mov	r6, sl
 80059b2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80059b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80059ba:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80059be:	4b74      	ldr	r3, [pc, #464]	; (8005b90 <_dtoa_r+0x2e8>)
 80059c0:	2200      	movs	r2, #0
 80059c2:	4630      	mov	r0, r6
 80059c4:	4639      	mov	r1, r7
 80059c6:	f7fa fc7f 	bl	80002c8 <__aeabi_dsub>
 80059ca:	a365      	add	r3, pc, #404	; (adr r3, 8005b60 <_dtoa_r+0x2b8>)
 80059cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d0:	f7fa fe32 	bl	8000638 <__aeabi_dmul>
 80059d4:	a364      	add	r3, pc, #400	; (adr r3, 8005b68 <_dtoa_r+0x2c0>)
 80059d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059da:	f7fa fc77 	bl	80002cc <__adddf3>
 80059de:	4606      	mov	r6, r0
 80059e0:	4628      	mov	r0, r5
 80059e2:	460f      	mov	r7, r1
 80059e4:	f7fa fdbe 	bl	8000564 <__aeabi_i2d>
 80059e8:	a361      	add	r3, pc, #388	; (adr r3, 8005b70 <_dtoa_r+0x2c8>)
 80059ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ee:	f7fa fe23 	bl	8000638 <__aeabi_dmul>
 80059f2:	4602      	mov	r2, r0
 80059f4:	460b      	mov	r3, r1
 80059f6:	4630      	mov	r0, r6
 80059f8:	4639      	mov	r1, r7
 80059fa:	f7fa fc67 	bl	80002cc <__adddf3>
 80059fe:	4606      	mov	r6, r0
 8005a00:	460f      	mov	r7, r1
 8005a02:	f7fb f8c9 	bl	8000b98 <__aeabi_d2iz>
 8005a06:	2200      	movs	r2, #0
 8005a08:	9000      	str	r0, [sp, #0]
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	4630      	mov	r0, r6
 8005a0e:	4639      	mov	r1, r7
 8005a10:	f7fb f884 	bl	8000b1c <__aeabi_dcmplt>
 8005a14:	b150      	cbz	r0, 8005a2c <_dtoa_r+0x184>
 8005a16:	9800      	ldr	r0, [sp, #0]
 8005a18:	f7fa fda4 	bl	8000564 <__aeabi_i2d>
 8005a1c:	4632      	mov	r2, r6
 8005a1e:	463b      	mov	r3, r7
 8005a20:	f7fb f872 	bl	8000b08 <__aeabi_dcmpeq>
 8005a24:	b910      	cbnz	r0, 8005a2c <_dtoa_r+0x184>
 8005a26:	9b00      	ldr	r3, [sp, #0]
 8005a28:	3b01      	subs	r3, #1
 8005a2a:	9300      	str	r3, [sp, #0]
 8005a2c:	9b00      	ldr	r3, [sp, #0]
 8005a2e:	2b16      	cmp	r3, #22
 8005a30:	d85a      	bhi.n	8005ae8 <_dtoa_r+0x240>
 8005a32:	9a00      	ldr	r2, [sp, #0]
 8005a34:	4b57      	ldr	r3, [pc, #348]	; (8005b94 <_dtoa_r+0x2ec>)
 8005a36:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a3e:	ec51 0b19 	vmov	r0, r1, d9
 8005a42:	f7fb f86b 	bl	8000b1c <__aeabi_dcmplt>
 8005a46:	2800      	cmp	r0, #0
 8005a48:	d050      	beq.n	8005aec <_dtoa_r+0x244>
 8005a4a:	9b00      	ldr	r3, [sp, #0]
 8005a4c:	3b01      	subs	r3, #1
 8005a4e:	9300      	str	r3, [sp, #0]
 8005a50:	2300      	movs	r3, #0
 8005a52:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005a56:	1b5d      	subs	r5, r3, r5
 8005a58:	1e6b      	subs	r3, r5, #1
 8005a5a:	9305      	str	r3, [sp, #20]
 8005a5c:	bf45      	ittet	mi
 8005a5e:	f1c5 0301 	rsbmi	r3, r5, #1
 8005a62:	9304      	strmi	r3, [sp, #16]
 8005a64:	2300      	movpl	r3, #0
 8005a66:	2300      	movmi	r3, #0
 8005a68:	bf4c      	ite	mi
 8005a6a:	9305      	strmi	r3, [sp, #20]
 8005a6c:	9304      	strpl	r3, [sp, #16]
 8005a6e:	9b00      	ldr	r3, [sp, #0]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	db3d      	blt.n	8005af0 <_dtoa_r+0x248>
 8005a74:	9b05      	ldr	r3, [sp, #20]
 8005a76:	9a00      	ldr	r2, [sp, #0]
 8005a78:	920a      	str	r2, [sp, #40]	; 0x28
 8005a7a:	4413      	add	r3, r2
 8005a7c:	9305      	str	r3, [sp, #20]
 8005a7e:	2300      	movs	r3, #0
 8005a80:	9307      	str	r3, [sp, #28]
 8005a82:	9b06      	ldr	r3, [sp, #24]
 8005a84:	2b09      	cmp	r3, #9
 8005a86:	f200 8089 	bhi.w	8005b9c <_dtoa_r+0x2f4>
 8005a8a:	2b05      	cmp	r3, #5
 8005a8c:	bfc4      	itt	gt
 8005a8e:	3b04      	subgt	r3, #4
 8005a90:	9306      	strgt	r3, [sp, #24]
 8005a92:	9b06      	ldr	r3, [sp, #24]
 8005a94:	f1a3 0302 	sub.w	r3, r3, #2
 8005a98:	bfcc      	ite	gt
 8005a9a:	2500      	movgt	r5, #0
 8005a9c:	2501      	movle	r5, #1
 8005a9e:	2b03      	cmp	r3, #3
 8005aa0:	f200 8087 	bhi.w	8005bb2 <_dtoa_r+0x30a>
 8005aa4:	e8df f003 	tbb	[pc, r3]
 8005aa8:	59383a2d 	.word	0x59383a2d
 8005aac:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005ab0:	441d      	add	r5, r3
 8005ab2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005ab6:	2b20      	cmp	r3, #32
 8005ab8:	bfc1      	itttt	gt
 8005aba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005abe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005ac2:	fa0b f303 	lslgt.w	r3, fp, r3
 8005ac6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005aca:	bfda      	itte	le
 8005acc:	f1c3 0320 	rsble	r3, r3, #32
 8005ad0:	fa06 f003 	lslle.w	r0, r6, r3
 8005ad4:	4318      	orrgt	r0, r3
 8005ad6:	f7fa fd35 	bl	8000544 <__aeabi_ui2d>
 8005ada:	2301      	movs	r3, #1
 8005adc:	4606      	mov	r6, r0
 8005ade:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005ae2:	3d01      	subs	r5, #1
 8005ae4:	930e      	str	r3, [sp, #56]	; 0x38
 8005ae6:	e76a      	b.n	80059be <_dtoa_r+0x116>
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e7b2      	b.n	8005a52 <_dtoa_r+0x1aa>
 8005aec:	900b      	str	r0, [sp, #44]	; 0x2c
 8005aee:	e7b1      	b.n	8005a54 <_dtoa_r+0x1ac>
 8005af0:	9b04      	ldr	r3, [sp, #16]
 8005af2:	9a00      	ldr	r2, [sp, #0]
 8005af4:	1a9b      	subs	r3, r3, r2
 8005af6:	9304      	str	r3, [sp, #16]
 8005af8:	4253      	negs	r3, r2
 8005afa:	9307      	str	r3, [sp, #28]
 8005afc:	2300      	movs	r3, #0
 8005afe:	930a      	str	r3, [sp, #40]	; 0x28
 8005b00:	e7bf      	b.n	8005a82 <_dtoa_r+0x1da>
 8005b02:	2300      	movs	r3, #0
 8005b04:	9308      	str	r3, [sp, #32]
 8005b06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	dc55      	bgt.n	8005bb8 <_dtoa_r+0x310>
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005b12:	461a      	mov	r2, r3
 8005b14:	9209      	str	r2, [sp, #36]	; 0x24
 8005b16:	e00c      	b.n	8005b32 <_dtoa_r+0x28a>
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e7f3      	b.n	8005b04 <_dtoa_r+0x25c>
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b20:	9308      	str	r3, [sp, #32]
 8005b22:	9b00      	ldr	r3, [sp, #0]
 8005b24:	4413      	add	r3, r2
 8005b26:	9302      	str	r3, [sp, #8]
 8005b28:	3301      	adds	r3, #1
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	9303      	str	r3, [sp, #12]
 8005b2e:	bfb8      	it	lt
 8005b30:	2301      	movlt	r3, #1
 8005b32:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005b34:	2200      	movs	r2, #0
 8005b36:	6042      	str	r2, [r0, #4]
 8005b38:	2204      	movs	r2, #4
 8005b3a:	f102 0614 	add.w	r6, r2, #20
 8005b3e:	429e      	cmp	r6, r3
 8005b40:	6841      	ldr	r1, [r0, #4]
 8005b42:	d93d      	bls.n	8005bc0 <_dtoa_r+0x318>
 8005b44:	4620      	mov	r0, r4
 8005b46:	f000 fca9 	bl	800649c <_Balloc>
 8005b4a:	9001      	str	r0, [sp, #4]
 8005b4c:	2800      	cmp	r0, #0
 8005b4e:	d13b      	bne.n	8005bc8 <_dtoa_r+0x320>
 8005b50:	4b11      	ldr	r3, [pc, #68]	; (8005b98 <_dtoa_r+0x2f0>)
 8005b52:	4602      	mov	r2, r0
 8005b54:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005b58:	e6c0      	b.n	80058dc <_dtoa_r+0x34>
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e7df      	b.n	8005b1e <_dtoa_r+0x276>
 8005b5e:	bf00      	nop
 8005b60:	636f4361 	.word	0x636f4361
 8005b64:	3fd287a7 	.word	0x3fd287a7
 8005b68:	8b60c8b3 	.word	0x8b60c8b3
 8005b6c:	3fc68a28 	.word	0x3fc68a28
 8005b70:	509f79fb 	.word	0x509f79fb
 8005b74:	3fd34413 	.word	0x3fd34413
 8005b78:	08007d2d 	.word	0x08007d2d
 8005b7c:	08007d44 	.word	0x08007d44
 8005b80:	7ff00000 	.word	0x7ff00000
 8005b84:	08007d29 	.word	0x08007d29
 8005b88:	08007d20 	.word	0x08007d20
 8005b8c:	08007cfd 	.word	0x08007cfd
 8005b90:	3ff80000 	.word	0x3ff80000
 8005b94:	08007e38 	.word	0x08007e38
 8005b98:	08007d9f 	.word	0x08007d9f
 8005b9c:	2501      	movs	r5, #1
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	9306      	str	r3, [sp, #24]
 8005ba2:	9508      	str	r5, [sp, #32]
 8005ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8005ba8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005bac:	2200      	movs	r2, #0
 8005bae:	2312      	movs	r3, #18
 8005bb0:	e7b0      	b.n	8005b14 <_dtoa_r+0x26c>
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	9308      	str	r3, [sp, #32]
 8005bb6:	e7f5      	b.n	8005ba4 <_dtoa_r+0x2fc>
 8005bb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005bbe:	e7b8      	b.n	8005b32 <_dtoa_r+0x28a>
 8005bc0:	3101      	adds	r1, #1
 8005bc2:	6041      	str	r1, [r0, #4]
 8005bc4:	0052      	lsls	r2, r2, #1
 8005bc6:	e7b8      	b.n	8005b3a <_dtoa_r+0x292>
 8005bc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005bca:	9a01      	ldr	r2, [sp, #4]
 8005bcc:	601a      	str	r2, [r3, #0]
 8005bce:	9b03      	ldr	r3, [sp, #12]
 8005bd0:	2b0e      	cmp	r3, #14
 8005bd2:	f200 809d 	bhi.w	8005d10 <_dtoa_r+0x468>
 8005bd6:	2d00      	cmp	r5, #0
 8005bd8:	f000 809a 	beq.w	8005d10 <_dtoa_r+0x468>
 8005bdc:	9b00      	ldr	r3, [sp, #0]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	dd32      	ble.n	8005c48 <_dtoa_r+0x3a0>
 8005be2:	4ab7      	ldr	r2, [pc, #732]	; (8005ec0 <_dtoa_r+0x618>)
 8005be4:	f003 030f 	and.w	r3, r3, #15
 8005be8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005bec:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005bf0:	9b00      	ldr	r3, [sp, #0]
 8005bf2:	05d8      	lsls	r0, r3, #23
 8005bf4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005bf8:	d516      	bpl.n	8005c28 <_dtoa_r+0x380>
 8005bfa:	4bb2      	ldr	r3, [pc, #712]	; (8005ec4 <_dtoa_r+0x61c>)
 8005bfc:	ec51 0b19 	vmov	r0, r1, d9
 8005c00:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005c04:	f7fa fe42 	bl	800088c <__aeabi_ddiv>
 8005c08:	f007 070f 	and.w	r7, r7, #15
 8005c0c:	4682      	mov	sl, r0
 8005c0e:	468b      	mov	fp, r1
 8005c10:	2503      	movs	r5, #3
 8005c12:	4eac      	ldr	r6, [pc, #688]	; (8005ec4 <_dtoa_r+0x61c>)
 8005c14:	b957      	cbnz	r7, 8005c2c <_dtoa_r+0x384>
 8005c16:	4642      	mov	r2, r8
 8005c18:	464b      	mov	r3, r9
 8005c1a:	4650      	mov	r0, sl
 8005c1c:	4659      	mov	r1, fp
 8005c1e:	f7fa fe35 	bl	800088c <__aeabi_ddiv>
 8005c22:	4682      	mov	sl, r0
 8005c24:	468b      	mov	fp, r1
 8005c26:	e028      	b.n	8005c7a <_dtoa_r+0x3d2>
 8005c28:	2502      	movs	r5, #2
 8005c2a:	e7f2      	b.n	8005c12 <_dtoa_r+0x36a>
 8005c2c:	07f9      	lsls	r1, r7, #31
 8005c2e:	d508      	bpl.n	8005c42 <_dtoa_r+0x39a>
 8005c30:	4640      	mov	r0, r8
 8005c32:	4649      	mov	r1, r9
 8005c34:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005c38:	f7fa fcfe 	bl	8000638 <__aeabi_dmul>
 8005c3c:	3501      	adds	r5, #1
 8005c3e:	4680      	mov	r8, r0
 8005c40:	4689      	mov	r9, r1
 8005c42:	107f      	asrs	r7, r7, #1
 8005c44:	3608      	adds	r6, #8
 8005c46:	e7e5      	b.n	8005c14 <_dtoa_r+0x36c>
 8005c48:	f000 809b 	beq.w	8005d82 <_dtoa_r+0x4da>
 8005c4c:	9b00      	ldr	r3, [sp, #0]
 8005c4e:	4f9d      	ldr	r7, [pc, #628]	; (8005ec4 <_dtoa_r+0x61c>)
 8005c50:	425e      	negs	r6, r3
 8005c52:	4b9b      	ldr	r3, [pc, #620]	; (8005ec0 <_dtoa_r+0x618>)
 8005c54:	f006 020f 	and.w	r2, r6, #15
 8005c58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c60:	ec51 0b19 	vmov	r0, r1, d9
 8005c64:	f7fa fce8 	bl	8000638 <__aeabi_dmul>
 8005c68:	1136      	asrs	r6, r6, #4
 8005c6a:	4682      	mov	sl, r0
 8005c6c:	468b      	mov	fp, r1
 8005c6e:	2300      	movs	r3, #0
 8005c70:	2502      	movs	r5, #2
 8005c72:	2e00      	cmp	r6, #0
 8005c74:	d17a      	bne.n	8005d6c <_dtoa_r+0x4c4>
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d1d3      	bne.n	8005c22 <_dtoa_r+0x37a>
 8005c7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	f000 8082 	beq.w	8005d86 <_dtoa_r+0x4de>
 8005c82:	4b91      	ldr	r3, [pc, #580]	; (8005ec8 <_dtoa_r+0x620>)
 8005c84:	2200      	movs	r2, #0
 8005c86:	4650      	mov	r0, sl
 8005c88:	4659      	mov	r1, fp
 8005c8a:	f7fa ff47 	bl	8000b1c <__aeabi_dcmplt>
 8005c8e:	2800      	cmp	r0, #0
 8005c90:	d079      	beq.n	8005d86 <_dtoa_r+0x4de>
 8005c92:	9b03      	ldr	r3, [sp, #12]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d076      	beq.n	8005d86 <_dtoa_r+0x4de>
 8005c98:	9b02      	ldr	r3, [sp, #8]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	dd36      	ble.n	8005d0c <_dtoa_r+0x464>
 8005c9e:	9b00      	ldr	r3, [sp, #0]
 8005ca0:	4650      	mov	r0, sl
 8005ca2:	4659      	mov	r1, fp
 8005ca4:	1e5f      	subs	r7, r3, #1
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	4b88      	ldr	r3, [pc, #544]	; (8005ecc <_dtoa_r+0x624>)
 8005caa:	f7fa fcc5 	bl	8000638 <__aeabi_dmul>
 8005cae:	9e02      	ldr	r6, [sp, #8]
 8005cb0:	4682      	mov	sl, r0
 8005cb2:	468b      	mov	fp, r1
 8005cb4:	3501      	adds	r5, #1
 8005cb6:	4628      	mov	r0, r5
 8005cb8:	f7fa fc54 	bl	8000564 <__aeabi_i2d>
 8005cbc:	4652      	mov	r2, sl
 8005cbe:	465b      	mov	r3, fp
 8005cc0:	f7fa fcba 	bl	8000638 <__aeabi_dmul>
 8005cc4:	4b82      	ldr	r3, [pc, #520]	; (8005ed0 <_dtoa_r+0x628>)
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f7fa fb00 	bl	80002cc <__adddf3>
 8005ccc:	46d0      	mov	r8, sl
 8005cce:	46d9      	mov	r9, fp
 8005cd0:	4682      	mov	sl, r0
 8005cd2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005cd6:	2e00      	cmp	r6, #0
 8005cd8:	d158      	bne.n	8005d8c <_dtoa_r+0x4e4>
 8005cda:	4b7e      	ldr	r3, [pc, #504]	; (8005ed4 <_dtoa_r+0x62c>)
 8005cdc:	2200      	movs	r2, #0
 8005cde:	4640      	mov	r0, r8
 8005ce0:	4649      	mov	r1, r9
 8005ce2:	f7fa faf1 	bl	80002c8 <__aeabi_dsub>
 8005ce6:	4652      	mov	r2, sl
 8005ce8:	465b      	mov	r3, fp
 8005cea:	4680      	mov	r8, r0
 8005cec:	4689      	mov	r9, r1
 8005cee:	f7fa ff33 	bl	8000b58 <__aeabi_dcmpgt>
 8005cf2:	2800      	cmp	r0, #0
 8005cf4:	f040 8295 	bne.w	8006222 <_dtoa_r+0x97a>
 8005cf8:	4652      	mov	r2, sl
 8005cfa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005cfe:	4640      	mov	r0, r8
 8005d00:	4649      	mov	r1, r9
 8005d02:	f7fa ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8005d06:	2800      	cmp	r0, #0
 8005d08:	f040 8289 	bne.w	800621e <_dtoa_r+0x976>
 8005d0c:	ec5b ab19 	vmov	sl, fp, d9
 8005d10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	f2c0 8148 	blt.w	8005fa8 <_dtoa_r+0x700>
 8005d18:	9a00      	ldr	r2, [sp, #0]
 8005d1a:	2a0e      	cmp	r2, #14
 8005d1c:	f300 8144 	bgt.w	8005fa8 <_dtoa_r+0x700>
 8005d20:	4b67      	ldr	r3, [pc, #412]	; (8005ec0 <_dtoa_r+0x618>)
 8005d22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d26:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005d2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	f280 80d5 	bge.w	8005edc <_dtoa_r+0x634>
 8005d32:	9b03      	ldr	r3, [sp, #12]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	f300 80d1 	bgt.w	8005edc <_dtoa_r+0x634>
 8005d3a:	f040 826f 	bne.w	800621c <_dtoa_r+0x974>
 8005d3e:	4b65      	ldr	r3, [pc, #404]	; (8005ed4 <_dtoa_r+0x62c>)
 8005d40:	2200      	movs	r2, #0
 8005d42:	4640      	mov	r0, r8
 8005d44:	4649      	mov	r1, r9
 8005d46:	f7fa fc77 	bl	8000638 <__aeabi_dmul>
 8005d4a:	4652      	mov	r2, sl
 8005d4c:	465b      	mov	r3, fp
 8005d4e:	f7fa fef9 	bl	8000b44 <__aeabi_dcmpge>
 8005d52:	9e03      	ldr	r6, [sp, #12]
 8005d54:	4637      	mov	r7, r6
 8005d56:	2800      	cmp	r0, #0
 8005d58:	f040 8245 	bne.w	80061e6 <_dtoa_r+0x93e>
 8005d5c:	9d01      	ldr	r5, [sp, #4]
 8005d5e:	2331      	movs	r3, #49	; 0x31
 8005d60:	f805 3b01 	strb.w	r3, [r5], #1
 8005d64:	9b00      	ldr	r3, [sp, #0]
 8005d66:	3301      	adds	r3, #1
 8005d68:	9300      	str	r3, [sp, #0]
 8005d6a:	e240      	b.n	80061ee <_dtoa_r+0x946>
 8005d6c:	07f2      	lsls	r2, r6, #31
 8005d6e:	d505      	bpl.n	8005d7c <_dtoa_r+0x4d4>
 8005d70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d74:	f7fa fc60 	bl	8000638 <__aeabi_dmul>
 8005d78:	3501      	adds	r5, #1
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	1076      	asrs	r6, r6, #1
 8005d7e:	3708      	adds	r7, #8
 8005d80:	e777      	b.n	8005c72 <_dtoa_r+0x3ca>
 8005d82:	2502      	movs	r5, #2
 8005d84:	e779      	b.n	8005c7a <_dtoa_r+0x3d2>
 8005d86:	9f00      	ldr	r7, [sp, #0]
 8005d88:	9e03      	ldr	r6, [sp, #12]
 8005d8a:	e794      	b.n	8005cb6 <_dtoa_r+0x40e>
 8005d8c:	9901      	ldr	r1, [sp, #4]
 8005d8e:	4b4c      	ldr	r3, [pc, #304]	; (8005ec0 <_dtoa_r+0x618>)
 8005d90:	4431      	add	r1, r6
 8005d92:	910d      	str	r1, [sp, #52]	; 0x34
 8005d94:	9908      	ldr	r1, [sp, #32]
 8005d96:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005d9a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005d9e:	2900      	cmp	r1, #0
 8005da0:	d043      	beq.n	8005e2a <_dtoa_r+0x582>
 8005da2:	494d      	ldr	r1, [pc, #308]	; (8005ed8 <_dtoa_r+0x630>)
 8005da4:	2000      	movs	r0, #0
 8005da6:	f7fa fd71 	bl	800088c <__aeabi_ddiv>
 8005daa:	4652      	mov	r2, sl
 8005dac:	465b      	mov	r3, fp
 8005dae:	f7fa fa8b 	bl	80002c8 <__aeabi_dsub>
 8005db2:	9d01      	ldr	r5, [sp, #4]
 8005db4:	4682      	mov	sl, r0
 8005db6:	468b      	mov	fp, r1
 8005db8:	4649      	mov	r1, r9
 8005dba:	4640      	mov	r0, r8
 8005dbc:	f7fa feec 	bl	8000b98 <__aeabi_d2iz>
 8005dc0:	4606      	mov	r6, r0
 8005dc2:	f7fa fbcf 	bl	8000564 <__aeabi_i2d>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	460b      	mov	r3, r1
 8005dca:	4640      	mov	r0, r8
 8005dcc:	4649      	mov	r1, r9
 8005dce:	f7fa fa7b 	bl	80002c8 <__aeabi_dsub>
 8005dd2:	3630      	adds	r6, #48	; 0x30
 8005dd4:	f805 6b01 	strb.w	r6, [r5], #1
 8005dd8:	4652      	mov	r2, sl
 8005dda:	465b      	mov	r3, fp
 8005ddc:	4680      	mov	r8, r0
 8005dde:	4689      	mov	r9, r1
 8005de0:	f7fa fe9c 	bl	8000b1c <__aeabi_dcmplt>
 8005de4:	2800      	cmp	r0, #0
 8005de6:	d163      	bne.n	8005eb0 <_dtoa_r+0x608>
 8005de8:	4642      	mov	r2, r8
 8005dea:	464b      	mov	r3, r9
 8005dec:	4936      	ldr	r1, [pc, #216]	; (8005ec8 <_dtoa_r+0x620>)
 8005dee:	2000      	movs	r0, #0
 8005df0:	f7fa fa6a 	bl	80002c8 <__aeabi_dsub>
 8005df4:	4652      	mov	r2, sl
 8005df6:	465b      	mov	r3, fp
 8005df8:	f7fa fe90 	bl	8000b1c <__aeabi_dcmplt>
 8005dfc:	2800      	cmp	r0, #0
 8005dfe:	f040 80b5 	bne.w	8005f6c <_dtoa_r+0x6c4>
 8005e02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e04:	429d      	cmp	r5, r3
 8005e06:	d081      	beq.n	8005d0c <_dtoa_r+0x464>
 8005e08:	4b30      	ldr	r3, [pc, #192]	; (8005ecc <_dtoa_r+0x624>)
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	4650      	mov	r0, sl
 8005e0e:	4659      	mov	r1, fp
 8005e10:	f7fa fc12 	bl	8000638 <__aeabi_dmul>
 8005e14:	4b2d      	ldr	r3, [pc, #180]	; (8005ecc <_dtoa_r+0x624>)
 8005e16:	4682      	mov	sl, r0
 8005e18:	468b      	mov	fp, r1
 8005e1a:	4640      	mov	r0, r8
 8005e1c:	4649      	mov	r1, r9
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f7fa fc0a 	bl	8000638 <__aeabi_dmul>
 8005e24:	4680      	mov	r8, r0
 8005e26:	4689      	mov	r9, r1
 8005e28:	e7c6      	b.n	8005db8 <_dtoa_r+0x510>
 8005e2a:	4650      	mov	r0, sl
 8005e2c:	4659      	mov	r1, fp
 8005e2e:	f7fa fc03 	bl	8000638 <__aeabi_dmul>
 8005e32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e34:	9d01      	ldr	r5, [sp, #4]
 8005e36:	930f      	str	r3, [sp, #60]	; 0x3c
 8005e38:	4682      	mov	sl, r0
 8005e3a:	468b      	mov	fp, r1
 8005e3c:	4649      	mov	r1, r9
 8005e3e:	4640      	mov	r0, r8
 8005e40:	f7fa feaa 	bl	8000b98 <__aeabi_d2iz>
 8005e44:	4606      	mov	r6, r0
 8005e46:	f7fa fb8d 	bl	8000564 <__aeabi_i2d>
 8005e4a:	3630      	adds	r6, #48	; 0x30
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	460b      	mov	r3, r1
 8005e50:	4640      	mov	r0, r8
 8005e52:	4649      	mov	r1, r9
 8005e54:	f7fa fa38 	bl	80002c8 <__aeabi_dsub>
 8005e58:	f805 6b01 	strb.w	r6, [r5], #1
 8005e5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e5e:	429d      	cmp	r5, r3
 8005e60:	4680      	mov	r8, r0
 8005e62:	4689      	mov	r9, r1
 8005e64:	f04f 0200 	mov.w	r2, #0
 8005e68:	d124      	bne.n	8005eb4 <_dtoa_r+0x60c>
 8005e6a:	4b1b      	ldr	r3, [pc, #108]	; (8005ed8 <_dtoa_r+0x630>)
 8005e6c:	4650      	mov	r0, sl
 8005e6e:	4659      	mov	r1, fp
 8005e70:	f7fa fa2c 	bl	80002cc <__adddf3>
 8005e74:	4602      	mov	r2, r0
 8005e76:	460b      	mov	r3, r1
 8005e78:	4640      	mov	r0, r8
 8005e7a:	4649      	mov	r1, r9
 8005e7c:	f7fa fe6c 	bl	8000b58 <__aeabi_dcmpgt>
 8005e80:	2800      	cmp	r0, #0
 8005e82:	d173      	bne.n	8005f6c <_dtoa_r+0x6c4>
 8005e84:	4652      	mov	r2, sl
 8005e86:	465b      	mov	r3, fp
 8005e88:	4913      	ldr	r1, [pc, #76]	; (8005ed8 <_dtoa_r+0x630>)
 8005e8a:	2000      	movs	r0, #0
 8005e8c:	f7fa fa1c 	bl	80002c8 <__aeabi_dsub>
 8005e90:	4602      	mov	r2, r0
 8005e92:	460b      	mov	r3, r1
 8005e94:	4640      	mov	r0, r8
 8005e96:	4649      	mov	r1, r9
 8005e98:	f7fa fe40 	bl	8000b1c <__aeabi_dcmplt>
 8005e9c:	2800      	cmp	r0, #0
 8005e9e:	f43f af35 	beq.w	8005d0c <_dtoa_r+0x464>
 8005ea2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005ea4:	1e6b      	subs	r3, r5, #1
 8005ea6:	930f      	str	r3, [sp, #60]	; 0x3c
 8005ea8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005eac:	2b30      	cmp	r3, #48	; 0x30
 8005eae:	d0f8      	beq.n	8005ea2 <_dtoa_r+0x5fa>
 8005eb0:	9700      	str	r7, [sp, #0]
 8005eb2:	e049      	b.n	8005f48 <_dtoa_r+0x6a0>
 8005eb4:	4b05      	ldr	r3, [pc, #20]	; (8005ecc <_dtoa_r+0x624>)
 8005eb6:	f7fa fbbf 	bl	8000638 <__aeabi_dmul>
 8005eba:	4680      	mov	r8, r0
 8005ebc:	4689      	mov	r9, r1
 8005ebe:	e7bd      	b.n	8005e3c <_dtoa_r+0x594>
 8005ec0:	08007e38 	.word	0x08007e38
 8005ec4:	08007e10 	.word	0x08007e10
 8005ec8:	3ff00000 	.word	0x3ff00000
 8005ecc:	40240000 	.word	0x40240000
 8005ed0:	401c0000 	.word	0x401c0000
 8005ed4:	40140000 	.word	0x40140000
 8005ed8:	3fe00000 	.word	0x3fe00000
 8005edc:	9d01      	ldr	r5, [sp, #4]
 8005ede:	4656      	mov	r6, sl
 8005ee0:	465f      	mov	r7, fp
 8005ee2:	4642      	mov	r2, r8
 8005ee4:	464b      	mov	r3, r9
 8005ee6:	4630      	mov	r0, r6
 8005ee8:	4639      	mov	r1, r7
 8005eea:	f7fa fccf 	bl	800088c <__aeabi_ddiv>
 8005eee:	f7fa fe53 	bl	8000b98 <__aeabi_d2iz>
 8005ef2:	4682      	mov	sl, r0
 8005ef4:	f7fa fb36 	bl	8000564 <__aeabi_i2d>
 8005ef8:	4642      	mov	r2, r8
 8005efa:	464b      	mov	r3, r9
 8005efc:	f7fa fb9c 	bl	8000638 <__aeabi_dmul>
 8005f00:	4602      	mov	r2, r0
 8005f02:	460b      	mov	r3, r1
 8005f04:	4630      	mov	r0, r6
 8005f06:	4639      	mov	r1, r7
 8005f08:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8005f0c:	f7fa f9dc 	bl	80002c8 <__aeabi_dsub>
 8005f10:	f805 6b01 	strb.w	r6, [r5], #1
 8005f14:	9e01      	ldr	r6, [sp, #4]
 8005f16:	9f03      	ldr	r7, [sp, #12]
 8005f18:	1bae      	subs	r6, r5, r6
 8005f1a:	42b7      	cmp	r7, r6
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	460b      	mov	r3, r1
 8005f20:	d135      	bne.n	8005f8e <_dtoa_r+0x6e6>
 8005f22:	f7fa f9d3 	bl	80002cc <__adddf3>
 8005f26:	4642      	mov	r2, r8
 8005f28:	464b      	mov	r3, r9
 8005f2a:	4606      	mov	r6, r0
 8005f2c:	460f      	mov	r7, r1
 8005f2e:	f7fa fe13 	bl	8000b58 <__aeabi_dcmpgt>
 8005f32:	b9d0      	cbnz	r0, 8005f6a <_dtoa_r+0x6c2>
 8005f34:	4642      	mov	r2, r8
 8005f36:	464b      	mov	r3, r9
 8005f38:	4630      	mov	r0, r6
 8005f3a:	4639      	mov	r1, r7
 8005f3c:	f7fa fde4 	bl	8000b08 <__aeabi_dcmpeq>
 8005f40:	b110      	cbz	r0, 8005f48 <_dtoa_r+0x6a0>
 8005f42:	f01a 0f01 	tst.w	sl, #1
 8005f46:	d110      	bne.n	8005f6a <_dtoa_r+0x6c2>
 8005f48:	4620      	mov	r0, r4
 8005f4a:	ee18 1a10 	vmov	r1, s16
 8005f4e:	f000 fae5 	bl	800651c <_Bfree>
 8005f52:	2300      	movs	r3, #0
 8005f54:	9800      	ldr	r0, [sp, #0]
 8005f56:	702b      	strb	r3, [r5, #0]
 8005f58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005f5a:	3001      	adds	r0, #1
 8005f5c:	6018      	str	r0, [r3, #0]
 8005f5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	f43f acf1 	beq.w	8005948 <_dtoa_r+0xa0>
 8005f66:	601d      	str	r5, [r3, #0]
 8005f68:	e4ee      	b.n	8005948 <_dtoa_r+0xa0>
 8005f6a:	9f00      	ldr	r7, [sp, #0]
 8005f6c:	462b      	mov	r3, r5
 8005f6e:	461d      	mov	r5, r3
 8005f70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005f74:	2a39      	cmp	r2, #57	; 0x39
 8005f76:	d106      	bne.n	8005f86 <_dtoa_r+0x6de>
 8005f78:	9a01      	ldr	r2, [sp, #4]
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d1f7      	bne.n	8005f6e <_dtoa_r+0x6c6>
 8005f7e:	9901      	ldr	r1, [sp, #4]
 8005f80:	2230      	movs	r2, #48	; 0x30
 8005f82:	3701      	adds	r7, #1
 8005f84:	700a      	strb	r2, [r1, #0]
 8005f86:	781a      	ldrb	r2, [r3, #0]
 8005f88:	3201      	adds	r2, #1
 8005f8a:	701a      	strb	r2, [r3, #0]
 8005f8c:	e790      	b.n	8005eb0 <_dtoa_r+0x608>
 8005f8e:	4ba6      	ldr	r3, [pc, #664]	; (8006228 <_dtoa_r+0x980>)
 8005f90:	2200      	movs	r2, #0
 8005f92:	f7fa fb51 	bl	8000638 <__aeabi_dmul>
 8005f96:	2200      	movs	r2, #0
 8005f98:	2300      	movs	r3, #0
 8005f9a:	4606      	mov	r6, r0
 8005f9c:	460f      	mov	r7, r1
 8005f9e:	f7fa fdb3 	bl	8000b08 <__aeabi_dcmpeq>
 8005fa2:	2800      	cmp	r0, #0
 8005fa4:	d09d      	beq.n	8005ee2 <_dtoa_r+0x63a>
 8005fa6:	e7cf      	b.n	8005f48 <_dtoa_r+0x6a0>
 8005fa8:	9a08      	ldr	r2, [sp, #32]
 8005faa:	2a00      	cmp	r2, #0
 8005fac:	f000 80d7 	beq.w	800615e <_dtoa_r+0x8b6>
 8005fb0:	9a06      	ldr	r2, [sp, #24]
 8005fb2:	2a01      	cmp	r2, #1
 8005fb4:	f300 80ba 	bgt.w	800612c <_dtoa_r+0x884>
 8005fb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005fba:	2a00      	cmp	r2, #0
 8005fbc:	f000 80b2 	beq.w	8006124 <_dtoa_r+0x87c>
 8005fc0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005fc4:	9e07      	ldr	r6, [sp, #28]
 8005fc6:	9d04      	ldr	r5, [sp, #16]
 8005fc8:	9a04      	ldr	r2, [sp, #16]
 8005fca:	441a      	add	r2, r3
 8005fcc:	9204      	str	r2, [sp, #16]
 8005fce:	9a05      	ldr	r2, [sp, #20]
 8005fd0:	2101      	movs	r1, #1
 8005fd2:	441a      	add	r2, r3
 8005fd4:	4620      	mov	r0, r4
 8005fd6:	9205      	str	r2, [sp, #20]
 8005fd8:	f000 fb58 	bl	800668c <__i2b>
 8005fdc:	4607      	mov	r7, r0
 8005fde:	2d00      	cmp	r5, #0
 8005fe0:	dd0c      	ble.n	8005ffc <_dtoa_r+0x754>
 8005fe2:	9b05      	ldr	r3, [sp, #20]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	dd09      	ble.n	8005ffc <_dtoa_r+0x754>
 8005fe8:	42ab      	cmp	r3, r5
 8005fea:	9a04      	ldr	r2, [sp, #16]
 8005fec:	bfa8      	it	ge
 8005fee:	462b      	movge	r3, r5
 8005ff0:	1ad2      	subs	r2, r2, r3
 8005ff2:	9204      	str	r2, [sp, #16]
 8005ff4:	9a05      	ldr	r2, [sp, #20]
 8005ff6:	1aed      	subs	r5, r5, r3
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	9305      	str	r3, [sp, #20]
 8005ffc:	9b07      	ldr	r3, [sp, #28]
 8005ffe:	b31b      	cbz	r3, 8006048 <_dtoa_r+0x7a0>
 8006000:	9b08      	ldr	r3, [sp, #32]
 8006002:	2b00      	cmp	r3, #0
 8006004:	f000 80af 	beq.w	8006166 <_dtoa_r+0x8be>
 8006008:	2e00      	cmp	r6, #0
 800600a:	dd13      	ble.n	8006034 <_dtoa_r+0x78c>
 800600c:	4639      	mov	r1, r7
 800600e:	4632      	mov	r2, r6
 8006010:	4620      	mov	r0, r4
 8006012:	f000 fbfb 	bl	800680c <__pow5mult>
 8006016:	ee18 2a10 	vmov	r2, s16
 800601a:	4601      	mov	r1, r0
 800601c:	4607      	mov	r7, r0
 800601e:	4620      	mov	r0, r4
 8006020:	f000 fb4a 	bl	80066b8 <__multiply>
 8006024:	ee18 1a10 	vmov	r1, s16
 8006028:	4680      	mov	r8, r0
 800602a:	4620      	mov	r0, r4
 800602c:	f000 fa76 	bl	800651c <_Bfree>
 8006030:	ee08 8a10 	vmov	s16, r8
 8006034:	9b07      	ldr	r3, [sp, #28]
 8006036:	1b9a      	subs	r2, r3, r6
 8006038:	d006      	beq.n	8006048 <_dtoa_r+0x7a0>
 800603a:	ee18 1a10 	vmov	r1, s16
 800603e:	4620      	mov	r0, r4
 8006040:	f000 fbe4 	bl	800680c <__pow5mult>
 8006044:	ee08 0a10 	vmov	s16, r0
 8006048:	2101      	movs	r1, #1
 800604a:	4620      	mov	r0, r4
 800604c:	f000 fb1e 	bl	800668c <__i2b>
 8006050:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006052:	2b00      	cmp	r3, #0
 8006054:	4606      	mov	r6, r0
 8006056:	f340 8088 	ble.w	800616a <_dtoa_r+0x8c2>
 800605a:	461a      	mov	r2, r3
 800605c:	4601      	mov	r1, r0
 800605e:	4620      	mov	r0, r4
 8006060:	f000 fbd4 	bl	800680c <__pow5mult>
 8006064:	9b06      	ldr	r3, [sp, #24]
 8006066:	2b01      	cmp	r3, #1
 8006068:	4606      	mov	r6, r0
 800606a:	f340 8081 	ble.w	8006170 <_dtoa_r+0x8c8>
 800606e:	f04f 0800 	mov.w	r8, #0
 8006072:	6933      	ldr	r3, [r6, #16]
 8006074:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006078:	6918      	ldr	r0, [r3, #16]
 800607a:	f000 fab7 	bl	80065ec <__hi0bits>
 800607e:	f1c0 0020 	rsb	r0, r0, #32
 8006082:	9b05      	ldr	r3, [sp, #20]
 8006084:	4418      	add	r0, r3
 8006086:	f010 001f 	ands.w	r0, r0, #31
 800608a:	f000 8092 	beq.w	80061b2 <_dtoa_r+0x90a>
 800608e:	f1c0 0320 	rsb	r3, r0, #32
 8006092:	2b04      	cmp	r3, #4
 8006094:	f340 808a 	ble.w	80061ac <_dtoa_r+0x904>
 8006098:	f1c0 001c 	rsb	r0, r0, #28
 800609c:	9b04      	ldr	r3, [sp, #16]
 800609e:	4403      	add	r3, r0
 80060a0:	9304      	str	r3, [sp, #16]
 80060a2:	9b05      	ldr	r3, [sp, #20]
 80060a4:	4403      	add	r3, r0
 80060a6:	4405      	add	r5, r0
 80060a8:	9305      	str	r3, [sp, #20]
 80060aa:	9b04      	ldr	r3, [sp, #16]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	dd07      	ble.n	80060c0 <_dtoa_r+0x818>
 80060b0:	ee18 1a10 	vmov	r1, s16
 80060b4:	461a      	mov	r2, r3
 80060b6:	4620      	mov	r0, r4
 80060b8:	f000 fc02 	bl	80068c0 <__lshift>
 80060bc:	ee08 0a10 	vmov	s16, r0
 80060c0:	9b05      	ldr	r3, [sp, #20]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	dd05      	ble.n	80060d2 <_dtoa_r+0x82a>
 80060c6:	4631      	mov	r1, r6
 80060c8:	461a      	mov	r2, r3
 80060ca:	4620      	mov	r0, r4
 80060cc:	f000 fbf8 	bl	80068c0 <__lshift>
 80060d0:	4606      	mov	r6, r0
 80060d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d06e      	beq.n	80061b6 <_dtoa_r+0x90e>
 80060d8:	ee18 0a10 	vmov	r0, s16
 80060dc:	4631      	mov	r1, r6
 80060de:	f000 fc5f 	bl	80069a0 <__mcmp>
 80060e2:	2800      	cmp	r0, #0
 80060e4:	da67      	bge.n	80061b6 <_dtoa_r+0x90e>
 80060e6:	9b00      	ldr	r3, [sp, #0]
 80060e8:	3b01      	subs	r3, #1
 80060ea:	ee18 1a10 	vmov	r1, s16
 80060ee:	9300      	str	r3, [sp, #0]
 80060f0:	220a      	movs	r2, #10
 80060f2:	2300      	movs	r3, #0
 80060f4:	4620      	mov	r0, r4
 80060f6:	f000 fa33 	bl	8006560 <__multadd>
 80060fa:	9b08      	ldr	r3, [sp, #32]
 80060fc:	ee08 0a10 	vmov	s16, r0
 8006100:	2b00      	cmp	r3, #0
 8006102:	f000 81b1 	beq.w	8006468 <_dtoa_r+0xbc0>
 8006106:	2300      	movs	r3, #0
 8006108:	4639      	mov	r1, r7
 800610a:	220a      	movs	r2, #10
 800610c:	4620      	mov	r0, r4
 800610e:	f000 fa27 	bl	8006560 <__multadd>
 8006112:	9b02      	ldr	r3, [sp, #8]
 8006114:	2b00      	cmp	r3, #0
 8006116:	4607      	mov	r7, r0
 8006118:	f300 808e 	bgt.w	8006238 <_dtoa_r+0x990>
 800611c:	9b06      	ldr	r3, [sp, #24]
 800611e:	2b02      	cmp	r3, #2
 8006120:	dc51      	bgt.n	80061c6 <_dtoa_r+0x91e>
 8006122:	e089      	b.n	8006238 <_dtoa_r+0x990>
 8006124:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006126:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800612a:	e74b      	b.n	8005fc4 <_dtoa_r+0x71c>
 800612c:	9b03      	ldr	r3, [sp, #12]
 800612e:	1e5e      	subs	r6, r3, #1
 8006130:	9b07      	ldr	r3, [sp, #28]
 8006132:	42b3      	cmp	r3, r6
 8006134:	bfbf      	itttt	lt
 8006136:	9b07      	ldrlt	r3, [sp, #28]
 8006138:	9607      	strlt	r6, [sp, #28]
 800613a:	1af2      	sublt	r2, r6, r3
 800613c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800613e:	bfb6      	itet	lt
 8006140:	189b      	addlt	r3, r3, r2
 8006142:	1b9e      	subge	r6, r3, r6
 8006144:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006146:	9b03      	ldr	r3, [sp, #12]
 8006148:	bfb8      	it	lt
 800614a:	2600      	movlt	r6, #0
 800614c:	2b00      	cmp	r3, #0
 800614e:	bfb7      	itett	lt
 8006150:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006154:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006158:	1a9d      	sublt	r5, r3, r2
 800615a:	2300      	movlt	r3, #0
 800615c:	e734      	b.n	8005fc8 <_dtoa_r+0x720>
 800615e:	9e07      	ldr	r6, [sp, #28]
 8006160:	9d04      	ldr	r5, [sp, #16]
 8006162:	9f08      	ldr	r7, [sp, #32]
 8006164:	e73b      	b.n	8005fde <_dtoa_r+0x736>
 8006166:	9a07      	ldr	r2, [sp, #28]
 8006168:	e767      	b.n	800603a <_dtoa_r+0x792>
 800616a:	9b06      	ldr	r3, [sp, #24]
 800616c:	2b01      	cmp	r3, #1
 800616e:	dc18      	bgt.n	80061a2 <_dtoa_r+0x8fa>
 8006170:	f1ba 0f00 	cmp.w	sl, #0
 8006174:	d115      	bne.n	80061a2 <_dtoa_r+0x8fa>
 8006176:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800617a:	b993      	cbnz	r3, 80061a2 <_dtoa_r+0x8fa>
 800617c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006180:	0d1b      	lsrs	r3, r3, #20
 8006182:	051b      	lsls	r3, r3, #20
 8006184:	b183      	cbz	r3, 80061a8 <_dtoa_r+0x900>
 8006186:	9b04      	ldr	r3, [sp, #16]
 8006188:	3301      	adds	r3, #1
 800618a:	9304      	str	r3, [sp, #16]
 800618c:	9b05      	ldr	r3, [sp, #20]
 800618e:	3301      	adds	r3, #1
 8006190:	9305      	str	r3, [sp, #20]
 8006192:	f04f 0801 	mov.w	r8, #1
 8006196:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006198:	2b00      	cmp	r3, #0
 800619a:	f47f af6a 	bne.w	8006072 <_dtoa_r+0x7ca>
 800619e:	2001      	movs	r0, #1
 80061a0:	e76f      	b.n	8006082 <_dtoa_r+0x7da>
 80061a2:	f04f 0800 	mov.w	r8, #0
 80061a6:	e7f6      	b.n	8006196 <_dtoa_r+0x8ee>
 80061a8:	4698      	mov	r8, r3
 80061aa:	e7f4      	b.n	8006196 <_dtoa_r+0x8ee>
 80061ac:	f43f af7d 	beq.w	80060aa <_dtoa_r+0x802>
 80061b0:	4618      	mov	r0, r3
 80061b2:	301c      	adds	r0, #28
 80061b4:	e772      	b.n	800609c <_dtoa_r+0x7f4>
 80061b6:	9b03      	ldr	r3, [sp, #12]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	dc37      	bgt.n	800622c <_dtoa_r+0x984>
 80061bc:	9b06      	ldr	r3, [sp, #24]
 80061be:	2b02      	cmp	r3, #2
 80061c0:	dd34      	ble.n	800622c <_dtoa_r+0x984>
 80061c2:	9b03      	ldr	r3, [sp, #12]
 80061c4:	9302      	str	r3, [sp, #8]
 80061c6:	9b02      	ldr	r3, [sp, #8]
 80061c8:	b96b      	cbnz	r3, 80061e6 <_dtoa_r+0x93e>
 80061ca:	4631      	mov	r1, r6
 80061cc:	2205      	movs	r2, #5
 80061ce:	4620      	mov	r0, r4
 80061d0:	f000 f9c6 	bl	8006560 <__multadd>
 80061d4:	4601      	mov	r1, r0
 80061d6:	4606      	mov	r6, r0
 80061d8:	ee18 0a10 	vmov	r0, s16
 80061dc:	f000 fbe0 	bl	80069a0 <__mcmp>
 80061e0:	2800      	cmp	r0, #0
 80061e2:	f73f adbb 	bgt.w	8005d5c <_dtoa_r+0x4b4>
 80061e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061e8:	9d01      	ldr	r5, [sp, #4]
 80061ea:	43db      	mvns	r3, r3
 80061ec:	9300      	str	r3, [sp, #0]
 80061ee:	f04f 0800 	mov.w	r8, #0
 80061f2:	4631      	mov	r1, r6
 80061f4:	4620      	mov	r0, r4
 80061f6:	f000 f991 	bl	800651c <_Bfree>
 80061fa:	2f00      	cmp	r7, #0
 80061fc:	f43f aea4 	beq.w	8005f48 <_dtoa_r+0x6a0>
 8006200:	f1b8 0f00 	cmp.w	r8, #0
 8006204:	d005      	beq.n	8006212 <_dtoa_r+0x96a>
 8006206:	45b8      	cmp	r8, r7
 8006208:	d003      	beq.n	8006212 <_dtoa_r+0x96a>
 800620a:	4641      	mov	r1, r8
 800620c:	4620      	mov	r0, r4
 800620e:	f000 f985 	bl	800651c <_Bfree>
 8006212:	4639      	mov	r1, r7
 8006214:	4620      	mov	r0, r4
 8006216:	f000 f981 	bl	800651c <_Bfree>
 800621a:	e695      	b.n	8005f48 <_dtoa_r+0x6a0>
 800621c:	2600      	movs	r6, #0
 800621e:	4637      	mov	r7, r6
 8006220:	e7e1      	b.n	80061e6 <_dtoa_r+0x93e>
 8006222:	9700      	str	r7, [sp, #0]
 8006224:	4637      	mov	r7, r6
 8006226:	e599      	b.n	8005d5c <_dtoa_r+0x4b4>
 8006228:	40240000 	.word	0x40240000
 800622c:	9b08      	ldr	r3, [sp, #32]
 800622e:	2b00      	cmp	r3, #0
 8006230:	f000 80ca 	beq.w	80063c8 <_dtoa_r+0xb20>
 8006234:	9b03      	ldr	r3, [sp, #12]
 8006236:	9302      	str	r3, [sp, #8]
 8006238:	2d00      	cmp	r5, #0
 800623a:	dd05      	ble.n	8006248 <_dtoa_r+0x9a0>
 800623c:	4639      	mov	r1, r7
 800623e:	462a      	mov	r2, r5
 8006240:	4620      	mov	r0, r4
 8006242:	f000 fb3d 	bl	80068c0 <__lshift>
 8006246:	4607      	mov	r7, r0
 8006248:	f1b8 0f00 	cmp.w	r8, #0
 800624c:	d05b      	beq.n	8006306 <_dtoa_r+0xa5e>
 800624e:	6879      	ldr	r1, [r7, #4]
 8006250:	4620      	mov	r0, r4
 8006252:	f000 f923 	bl	800649c <_Balloc>
 8006256:	4605      	mov	r5, r0
 8006258:	b928      	cbnz	r0, 8006266 <_dtoa_r+0x9be>
 800625a:	4b87      	ldr	r3, [pc, #540]	; (8006478 <_dtoa_r+0xbd0>)
 800625c:	4602      	mov	r2, r0
 800625e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006262:	f7ff bb3b 	b.w	80058dc <_dtoa_r+0x34>
 8006266:	693a      	ldr	r2, [r7, #16]
 8006268:	3202      	adds	r2, #2
 800626a:	0092      	lsls	r2, r2, #2
 800626c:	f107 010c 	add.w	r1, r7, #12
 8006270:	300c      	adds	r0, #12
 8006272:	f7fe fded 	bl	8004e50 <memcpy>
 8006276:	2201      	movs	r2, #1
 8006278:	4629      	mov	r1, r5
 800627a:	4620      	mov	r0, r4
 800627c:	f000 fb20 	bl	80068c0 <__lshift>
 8006280:	9b01      	ldr	r3, [sp, #4]
 8006282:	f103 0901 	add.w	r9, r3, #1
 8006286:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800628a:	4413      	add	r3, r2
 800628c:	9305      	str	r3, [sp, #20]
 800628e:	f00a 0301 	and.w	r3, sl, #1
 8006292:	46b8      	mov	r8, r7
 8006294:	9304      	str	r3, [sp, #16]
 8006296:	4607      	mov	r7, r0
 8006298:	4631      	mov	r1, r6
 800629a:	ee18 0a10 	vmov	r0, s16
 800629e:	f7ff fa77 	bl	8005790 <quorem>
 80062a2:	4641      	mov	r1, r8
 80062a4:	9002      	str	r0, [sp, #8]
 80062a6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80062aa:	ee18 0a10 	vmov	r0, s16
 80062ae:	f000 fb77 	bl	80069a0 <__mcmp>
 80062b2:	463a      	mov	r2, r7
 80062b4:	9003      	str	r0, [sp, #12]
 80062b6:	4631      	mov	r1, r6
 80062b8:	4620      	mov	r0, r4
 80062ba:	f000 fb8d 	bl	80069d8 <__mdiff>
 80062be:	68c2      	ldr	r2, [r0, #12]
 80062c0:	f109 3bff 	add.w	fp, r9, #4294967295
 80062c4:	4605      	mov	r5, r0
 80062c6:	bb02      	cbnz	r2, 800630a <_dtoa_r+0xa62>
 80062c8:	4601      	mov	r1, r0
 80062ca:	ee18 0a10 	vmov	r0, s16
 80062ce:	f000 fb67 	bl	80069a0 <__mcmp>
 80062d2:	4602      	mov	r2, r0
 80062d4:	4629      	mov	r1, r5
 80062d6:	4620      	mov	r0, r4
 80062d8:	9207      	str	r2, [sp, #28]
 80062da:	f000 f91f 	bl	800651c <_Bfree>
 80062de:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80062e2:	ea43 0102 	orr.w	r1, r3, r2
 80062e6:	9b04      	ldr	r3, [sp, #16]
 80062e8:	430b      	orrs	r3, r1
 80062ea:	464d      	mov	r5, r9
 80062ec:	d10f      	bne.n	800630e <_dtoa_r+0xa66>
 80062ee:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80062f2:	d02a      	beq.n	800634a <_dtoa_r+0xaa2>
 80062f4:	9b03      	ldr	r3, [sp, #12]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	dd02      	ble.n	8006300 <_dtoa_r+0xa58>
 80062fa:	9b02      	ldr	r3, [sp, #8]
 80062fc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006300:	f88b a000 	strb.w	sl, [fp]
 8006304:	e775      	b.n	80061f2 <_dtoa_r+0x94a>
 8006306:	4638      	mov	r0, r7
 8006308:	e7ba      	b.n	8006280 <_dtoa_r+0x9d8>
 800630a:	2201      	movs	r2, #1
 800630c:	e7e2      	b.n	80062d4 <_dtoa_r+0xa2c>
 800630e:	9b03      	ldr	r3, [sp, #12]
 8006310:	2b00      	cmp	r3, #0
 8006312:	db04      	blt.n	800631e <_dtoa_r+0xa76>
 8006314:	9906      	ldr	r1, [sp, #24]
 8006316:	430b      	orrs	r3, r1
 8006318:	9904      	ldr	r1, [sp, #16]
 800631a:	430b      	orrs	r3, r1
 800631c:	d122      	bne.n	8006364 <_dtoa_r+0xabc>
 800631e:	2a00      	cmp	r2, #0
 8006320:	ddee      	ble.n	8006300 <_dtoa_r+0xa58>
 8006322:	ee18 1a10 	vmov	r1, s16
 8006326:	2201      	movs	r2, #1
 8006328:	4620      	mov	r0, r4
 800632a:	f000 fac9 	bl	80068c0 <__lshift>
 800632e:	4631      	mov	r1, r6
 8006330:	ee08 0a10 	vmov	s16, r0
 8006334:	f000 fb34 	bl	80069a0 <__mcmp>
 8006338:	2800      	cmp	r0, #0
 800633a:	dc03      	bgt.n	8006344 <_dtoa_r+0xa9c>
 800633c:	d1e0      	bne.n	8006300 <_dtoa_r+0xa58>
 800633e:	f01a 0f01 	tst.w	sl, #1
 8006342:	d0dd      	beq.n	8006300 <_dtoa_r+0xa58>
 8006344:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006348:	d1d7      	bne.n	80062fa <_dtoa_r+0xa52>
 800634a:	2339      	movs	r3, #57	; 0x39
 800634c:	f88b 3000 	strb.w	r3, [fp]
 8006350:	462b      	mov	r3, r5
 8006352:	461d      	mov	r5, r3
 8006354:	3b01      	subs	r3, #1
 8006356:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800635a:	2a39      	cmp	r2, #57	; 0x39
 800635c:	d071      	beq.n	8006442 <_dtoa_r+0xb9a>
 800635e:	3201      	adds	r2, #1
 8006360:	701a      	strb	r2, [r3, #0]
 8006362:	e746      	b.n	80061f2 <_dtoa_r+0x94a>
 8006364:	2a00      	cmp	r2, #0
 8006366:	dd07      	ble.n	8006378 <_dtoa_r+0xad0>
 8006368:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800636c:	d0ed      	beq.n	800634a <_dtoa_r+0xaa2>
 800636e:	f10a 0301 	add.w	r3, sl, #1
 8006372:	f88b 3000 	strb.w	r3, [fp]
 8006376:	e73c      	b.n	80061f2 <_dtoa_r+0x94a>
 8006378:	9b05      	ldr	r3, [sp, #20]
 800637a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800637e:	4599      	cmp	r9, r3
 8006380:	d047      	beq.n	8006412 <_dtoa_r+0xb6a>
 8006382:	ee18 1a10 	vmov	r1, s16
 8006386:	2300      	movs	r3, #0
 8006388:	220a      	movs	r2, #10
 800638a:	4620      	mov	r0, r4
 800638c:	f000 f8e8 	bl	8006560 <__multadd>
 8006390:	45b8      	cmp	r8, r7
 8006392:	ee08 0a10 	vmov	s16, r0
 8006396:	f04f 0300 	mov.w	r3, #0
 800639a:	f04f 020a 	mov.w	r2, #10
 800639e:	4641      	mov	r1, r8
 80063a0:	4620      	mov	r0, r4
 80063a2:	d106      	bne.n	80063b2 <_dtoa_r+0xb0a>
 80063a4:	f000 f8dc 	bl	8006560 <__multadd>
 80063a8:	4680      	mov	r8, r0
 80063aa:	4607      	mov	r7, r0
 80063ac:	f109 0901 	add.w	r9, r9, #1
 80063b0:	e772      	b.n	8006298 <_dtoa_r+0x9f0>
 80063b2:	f000 f8d5 	bl	8006560 <__multadd>
 80063b6:	4639      	mov	r1, r7
 80063b8:	4680      	mov	r8, r0
 80063ba:	2300      	movs	r3, #0
 80063bc:	220a      	movs	r2, #10
 80063be:	4620      	mov	r0, r4
 80063c0:	f000 f8ce 	bl	8006560 <__multadd>
 80063c4:	4607      	mov	r7, r0
 80063c6:	e7f1      	b.n	80063ac <_dtoa_r+0xb04>
 80063c8:	9b03      	ldr	r3, [sp, #12]
 80063ca:	9302      	str	r3, [sp, #8]
 80063cc:	9d01      	ldr	r5, [sp, #4]
 80063ce:	ee18 0a10 	vmov	r0, s16
 80063d2:	4631      	mov	r1, r6
 80063d4:	f7ff f9dc 	bl	8005790 <quorem>
 80063d8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80063dc:	9b01      	ldr	r3, [sp, #4]
 80063de:	f805 ab01 	strb.w	sl, [r5], #1
 80063e2:	1aea      	subs	r2, r5, r3
 80063e4:	9b02      	ldr	r3, [sp, #8]
 80063e6:	4293      	cmp	r3, r2
 80063e8:	dd09      	ble.n	80063fe <_dtoa_r+0xb56>
 80063ea:	ee18 1a10 	vmov	r1, s16
 80063ee:	2300      	movs	r3, #0
 80063f0:	220a      	movs	r2, #10
 80063f2:	4620      	mov	r0, r4
 80063f4:	f000 f8b4 	bl	8006560 <__multadd>
 80063f8:	ee08 0a10 	vmov	s16, r0
 80063fc:	e7e7      	b.n	80063ce <_dtoa_r+0xb26>
 80063fe:	9b02      	ldr	r3, [sp, #8]
 8006400:	2b00      	cmp	r3, #0
 8006402:	bfc8      	it	gt
 8006404:	461d      	movgt	r5, r3
 8006406:	9b01      	ldr	r3, [sp, #4]
 8006408:	bfd8      	it	le
 800640a:	2501      	movle	r5, #1
 800640c:	441d      	add	r5, r3
 800640e:	f04f 0800 	mov.w	r8, #0
 8006412:	ee18 1a10 	vmov	r1, s16
 8006416:	2201      	movs	r2, #1
 8006418:	4620      	mov	r0, r4
 800641a:	f000 fa51 	bl	80068c0 <__lshift>
 800641e:	4631      	mov	r1, r6
 8006420:	ee08 0a10 	vmov	s16, r0
 8006424:	f000 fabc 	bl	80069a0 <__mcmp>
 8006428:	2800      	cmp	r0, #0
 800642a:	dc91      	bgt.n	8006350 <_dtoa_r+0xaa8>
 800642c:	d102      	bne.n	8006434 <_dtoa_r+0xb8c>
 800642e:	f01a 0f01 	tst.w	sl, #1
 8006432:	d18d      	bne.n	8006350 <_dtoa_r+0xaa8>
 8006434:	462b      	mov	r3, r5
 8006436:	461d      	mov	r5, r3
 8006438:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800643c:	2a30      	cmp	r2, #48	; 0x30
 800643e:	d0fa      	beq.n	8006436 <_dtoa_r+0xb8e>
 8006440:	e6d7      	b.n	80061f2 <_dtoa_r+0x94a>
 8006442:	9a01      	ldr	r2, [sp, #4]
 8006444:	429a      	cmp	r2, r3
 8006446:	d184      	bne.n	8006352 <_dtoa_r+0xaaa>
 8006448:	9b00      	ldr	r3, [sp, #0]
 800644a:	3301      	adds	r3, #1
 800644c:	9300      	str	r3, [sp, #0]
 800644e:	2331      	movs	r3, #49	; 0x31
 8006450:	7013      	strb	r3, [r2, #0]
 8006452:	e6ce      	b.n	80061f2 <_dtoa_r+0x94a>
 8006454:	4b09      	ldr	r3, [pc, #36]	; (800647c <_dtoa_r+0xbd4>)
 8006456:	f7ff ba95 	b.w	8005984 <_dtoa_r+0xdc>
 800645a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800645c:	2b00      	cmp	r3, #0
 800645e:	f47f aa6e 	bne.w	800593e <_dtoa_r+0x96>
 8006462:	4b07      	ldr	r3, [pc, #28]	; (8006480 <_dtoa_r+0xbd8>)
 8006464:	f7ff ba8e 	b.w	8005984 <_dtoa_r+0xdc>
 8006468:	9b02      	ldr	r3, [sp, #8]
 800646a:	2b00      	cmp	r3, #0
 800646c:	dcae      	bgt.n	80063cc <_dtoa_r+0xb24>
 800646e:	9b06      	ldr	r3, [sp, #24]
 8006470:	2b02      	cmp	r3, #2
 8006472:	f73f aea8 	bgt.w	80061c6 <_dtoa_r+0x91e>
 8006476:	e7a9      	b.n	80063cc <_dtoa_r+0xb24>
 8006478:	08007d9f 	.word	0x08007d9f
 800647c:	08007cfc 	.word	0x08007cfc
 8006480:	08007d20 	.word	0x08007d20

08006484 <_localeconv_r>:
 8006484:	4800      	ldr	r0, [pc, #0]	; (8006488 <_localeconv_r+0x4>)
 8006486:	4770      	bx	lr
 8006488:	20000160 	.word	0x20000160

0800648c <malloc>:
 800648c:	4b02      	ldr	r3, [pc, #8]	; (8006498 <malloc+0xc>)
 800648e:	4601      	mov	r1, r0
 8006490:	6818      	ldr	r0, [r3, #0]
 8006492:	f000 bc09 	b.w	8006ca8 <_malloc_r>
 8006496:	bf00      	nop
 8006498:	2000000c 	.word	0x2000000c

0800649c <_Balloc>:
 800649c:	b570      	push	{r4, r5, r6, lr}
 800649e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80064a0:	4604      	mov	r4, r0
 80064a2:	460d      	mov	r5, r1
 80064a4:	b976      	cbnz	r6, 80064c4 <_Balloc+0x28>
 80064a6:	2010      	movs	r0, #16
 80064a8:	f7ff fff0 	bl	800648c <malloc>
 80064ac:	4602      	mov	r2, r0
 80064ae:	6260      	str	r0, [r4, #36]	; 0x24
 80064b0:	b920      	cbnz	r0, 80064bc <_Balloc+0x20>
 80064b2:	4b18      	ldr	r3, [pc, #96]	; (8006514 <_Balloc+0x78>)
 80064b4:	4818      	ldr	r0, [pc, #96]	; (8006518 <_Balloc+0x7c>)
 80064b6:	2166      	movs	r1, #102	; 0x66
 80064b8:	f000 fdd6 	bl	8007068 <__assert_func>
 80064bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80064c0:	6006      	str	r6, [r0, #0]
 80064c2:	60c6      	str	r6, [r0, #12]
 80064c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80064c6:	68f3      	ldr	r3, [r6, #12]
 80064c8:	b183      	cbz	r3, 80064ec <_Balloc+0x50>
 80064ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80064d2:	b9b8      	cbnz	r0, 8006504 <_Balloc+0x68>
 80064d4:	2101      	movs	r1, #1
 80064d6:	fa01 f605 	lsl.w	r6, r1, r5
 80064da:	1d72      	adds	r2, r6, #5
 80064dc:	0092      	lsls	r2, r2, #2
 80064de:	4620      	mov	r0, r4
 80064e0:	f000 fb60 	bl	8006ba4 <_calloc_r>
 80064e4:	b160      	cbz	r0, 8006500 <_Balloc+0x64>
 80064e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80064ea:	e00e      	b.n	800650a <_Balloc+0x6e>
 80064ec:	2221      	movs	r2, #33	; 0x21
 80064ee:	2104      	movs	r1, #4
 80064f0:	4620      	mov	r0, r4
 80064f2:	f000 fb57 	bl	8006ba4 <_calloc_r>
 80064f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064f8:	60f0      	str	r0, [r6, #12]
 80064fa:	68db      	ldr	r3, [r3, #12]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d1e4      	bne.n	80064ca <_Balloc+0x2e>
 8006500:	2000      	movs	r0, #0
 8006502:	bd70      	pop	{r4, r5, r6, pc}
 8006504:	6802      	ldr	r2, [r0, #0]
 8006506:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800650a:	2300      	movs	r3, #0
 800650c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006510:	e7f7      	b.n	8006502 <_Balloc+0x66>
 8006512:	bf00      	nop
 8006514:	08007d2d 	.word	0x08007d2d
 8006518:	08007db0 	.word	0x08007db0

0800651c <_Bfree>:
 800651c:	b570      	push	{r4, r5, r6, lr}
 800651e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006520:	4605      	mov	r5, r0
 8006522:	460c      	mov	r4, r1
 8006524:	b976      	cbnz	r6, 8006544 <_Bfree+0x28>
 8006526:	2010      	movs	r0, #16
 8006528:	f7ff ffb0 	bl	800648c <malloc>
 800652c:	4602      	mov	r2, r0
 800652e:	6268      	str	r0, [r5, #36]	; 0x24
 8006530:	b920      	cbnz	r0, 800653c <_Bfree+0x20>
 8006532:	4b09      	ldr	r3, [pc, #36]	; (8006558 <_Bfree+0x3c>)
 8006534:	4809      	ldr	r0, [pc, #36]	; (800655c <_Bfree+0x40>)
 8006536:	218a      	movs	r1, #138	; 0x8a
 8006538:	f000 fd96 	bl	8007068 <__assert_func>
 800653c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006540:	6006      	str	r6, [r0, #0]
 8006542:	60c6      	str	r6, [r0, #12]
 8006544:	b13c      	cbz	r4, 8006556 <_Bfree+0x3a>
 8006546:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006548:	6862      	ldr	r2, [r4, #4]
 800654a:	68db      	ldr	r3, [r3, #12]
 800654c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006550:	6021      	str	r1, [r4, #0]
 8006552:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006556:	bd70      	pop	{r4, r5, r6, pc}
 8006558:	08007d2d 	.word	0x08007d2d
 800655c:	08007db0 	.word	0x08007db0

08006560 <__multadd>:
 8006560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006564:	690d      	ldr	r5, [r1, #16]
 8006566:	4607      	mov	r7, r0
 8006568:	460c      	mov	r4, r1
 800656a:	461e      	mov	r6, r3
 800656c:	f101 0c14 	add.w	ip, r1, #20
 8006570:	2000      	movs	r0, #0
 8006572:	f8dc 3000 	ldr.w	r3, [ip]
 8006576:	b299      	uxth	r1, r3
 8006578:	fb02 6101 	mla	r1, r2, r1, r6
 800657c:	0c1e      	lsrs	r6, r3, #16
 800657e:	0c0b      	lsrs	r3, r1, #16
 8006580:	fb02 3306 	mla	r3, r2, r6, r3
 8006584:	b289      	uxth	r1, r1
 8006586:	3001      	adds	r0, #1
 8006588:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800658c:	4285      	cmp	r5, r0
 800658e:	f84c 1b04 	str.w	r1, [ip], #4
 8006592:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006596:	dcec      	bgt.n	8006572 <__multadd+0x12>
 8006598:	b30e      	cbz	r6, 80065de <__multadd+0x7e>
 800659a:	68a3      	ldr	r3, [r4, #8]
 800659c:	42ab      	cmp	r3, r5
 800659e:	dc19      	bgt.n	80065d4 <__multadd+0x74>
 80065a0:	6861      	ldr	r1, [r4, #4]
 80065a2:	4638      	mov	r0, r7
 80065a4:	3101      	adds	r1, #1
 80065a6:	f7ff ff79 	bl	800649c <_Balloc>
 80065aa:	4680      	mov	r8, r0
 80065ac:	b928      	cbnz	r0, 80065ba <__multadd+0x5a>
 80065ae:	4602      	mov	r2, r0
 80065b0:	4b0c      	ldr	r3, [pc, #48]	; (80065e4 <__multadd+0x84>)
 80065b2:	480d      	ldr	r0, [pc, #52]	; (80065e8 <__multadd+0x88>)
 80065b4:	21b5      	movs	r1, #181	; 0xb5
 80065b6:	f000 fd57 	bl	8007068 <__assert_func>
 80065ba:	6922      	ldr	r2, [r4, #16]
 80065bc:	3202      	adds	r2, #2
 80065be:	f104 010c 	add.w	r1, r4, #12
 80065c2:	0092      	lsls	r2, r2, #2
 80065c4:	300c      	adds	r0, #12
 80065c6:	f7fe fc43 	bl	8004e50 <memcpy>
 80065ca:	4621      	mov	r1, r4
 80065cc:	4638      	mov	r0, r7
 80065ce:	f7ff ffa5 	bl	800651c <_Bfree>
 80065d2:	4644      	mov	r4, r8
 80065d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80065d8:	3501      	adds	r5, #1
 80065da:	615e      	str	r6, [r3, #20]
 80065dc:	6125      	str	r5, [r4, #16]
 80065de:	4620      	mov	r0, r4
 80065e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065e4:	08007d9f 	.word	0x08007d9f
 80065e8:	08007db0 	.word	0x08007db0

080065ec <__hi0bits>:
 80065ec:	0c03      	lsrs	r3, r0, #16
 80065ee:	041b      	lsls	r3, r3, #16
 80065f0:	b9d3      	cbnz	r3, 8006628 <__hi0bits+0x3c>
 80065f2:	0400      	lsls	r0, r0, #16
 80065f4:	2310      	movs	r3, #16
 80065f6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80065fa:	bf04      	itt	eq
 80065fc:	0200      	lsleq	r0, r0, #8
 80065fe:	3308      	addeq	r3, #8
 8006600:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006604:	bf04      	itt	eq
 8006606:	0100      	lsleq	r0, r0, #4
 8006608:	3304      	addeq	r3, #4
 800660a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800660e:	bf04      	itt	eq
 8006610:	0080      	lsleq	r0, r0, #2
 8006612:	3302      	addeq	r3, #2
 8006614:	2800      	cmp	r0, #0
 8006616:	db05      	blt.n	8006624 <__hi0bits+0x38>
 8006618:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800661c:	f103 0301 	add.w	r3, r3, #1
 8006620:	bf08      	it	eq
 8006622:	2320      	moveq	r3, #32
 8006624:	4618      	mov	r0, r3
 8006626:	4770      	bx	lr
 8006628:	2300      	movs	r3, #0
 800662a:	e7e4      	b.n	80065f6 <__hi0bits+0xa>

0800662c <__lo0bits>:
 800662c:	6803      	ldr	r3, [r0, #0]
 800662e:	f013 0207 	ands.w	r2, r3, #7
 8006632:	4601      	mov	r1, r0
 8006634:	d00b      	beq.n	800664e <__lo0bits+0x22>
 8006636:	07da      	lsls	r2, r3, #31
 8006638:	d423      	bmi.n	8006682 <__lo0bits+0x56>
 800663a:	0798      	lsls	r0, r3, #30
 800663c:	bf49      	itett	mi
 800663e:	085b      	lsrmi	r3, r3, #1
 8006640:	089b      	lsrpl	r3, r3, #2
 8006642:	2001      	movmi	r0, #1
 8006644:	600b      	strmi	r3, [r1, #0]
 8006646:	bf5c      	itt	pl
 8006648:	600b      	strpl	r3, [r1, #0]
 800664a:	2002      	movpl	r0, #2
 800664c:	4770      	bx	lr
 800664e:	b298      	uxth	r0, r3
 8006650:	b9a8      	cbnz	r0, 800667e <__lo0bits+0x52>
 8006652:	0c1b      	lsrs	r3, r3, #16
 8006654:	2010      	movs	r0, #16
 8006656:	b2da      	uxtb	r2, r3
 8006658:	b90a      	cbnz	r2, 800665e <__lo0bits+0x32>
 800665a:	3008      	adds	r0, #8
 800665c:	0a1b      	lsrs	r3, r3, #8
 800665e:	071a      	lsls	r2, r3, #28
 8006660:	bf04      	itt	eq
 8006662:	091b      	lsreq	r3, r3, #4
 8006664:	3004      	addeq	r0, #4
 8006666:	079a      	lsls	r2, r3, #30
 8006668:	bf04      	itt	eq
 800666a:	089b      	lsreq	r3, r3, #2
 800666c:	3002      	addeq	r0, #2
 800666e:	07da      	lsls	r2, r3, #31
 8006670:	d403      	bmi.n	800667a <__lo0bits+0x4e>
 8006672:	085b      	lsrs	r3, r3, #1
 8006674:	f100 0001 	add.w	r0, r0, #1
 8006678:	d005      	beq.n	8006686 <__lo0bits+0x5a>
 800667a:	600b      	str	r3, [r1, #0]
 800667c:	4770      	bx	lr
 800667e:	4610      	mov	r0, r2
 8006680:	e7e9      	b.n	8006656 <__lo0bits+0x2a>
 8006682:	2000      	movs	r0, #0
 8006684:	4770      	bx	lr
 8006686:	2020      	movs	r0, #32
 8006688:	4770      	bx	lr
	...

0800668c <__i2b>:
 800668c:	b510      	push	{r4, lr}
 800668e:	460c      	mov	r4, r1
 8006690:	2101      	movs	r1, #1
 8006692:	f7ff ff03 	bl	800649c <_Balloc>
 8006696:	4602      	mov	r2, r0
 8006698:	b928      	cbnz	r0, 80066a6 <__i2b+0x1a>
 800669a:	4b05      	ldr	r3, [pc, #20]	; (80066b0 <__i2b+0x24>)
 800669c:	4805      	ldr	r0, [pc, #20]	; (80066b4 <__i2b+0x28>)
 800669e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80066a2:	f000 fce1 	bl	8007068 <__assert_func>
 80066a6:	2301      	movs	r3, #1
 80066a8:	6144      	str	r4, [r0, #20]
 80066aa:	6103      	str	r3, [r0, #16]
 80066ac:	bd10      	pop	{r4, pc}
 80066ae:	bf00      	nop
 80066b0:	08007d9f 	.word	0x08007d9f
 80066b4:	08007db0 	.word	0x08007db0

080066b8 <__multiply>:
 80066b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066bc:	4691      	mov	r9, r2
 80066be:	690a      	ldr	r2, [r1, #16]
 80066c0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80066c4:	429a      	cmp	r2, r3
 80066c6:	bfb8      	it	lt
 80066c8:	460b      	movlt	r3, r1
 80066ca:	460c      	mov	r4, r1
 80066cc:	bfbc      	itt	lt
 80066ce:	464c      	movlt	r4, r9
 80066d0:	4699      	movlt	r9, r3
 80066d2:	6927      	ldr	r7, [r4, #16]
 80066d4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80066d8:	68a3      	ldr	r3, [r4, #8]
 80066da:	6861      	ldr	r1, [r4, #4]
 80066dc:	eb07 060a 	add.w	r6, r7, sl
 80066e0:	42b3      	cmp	r3, r6
 80066e2:	b085      	sub	sp, #20
 80066e4:	bfb8      	it	lt
 80066e6:	3101      	addlt	r1, #1
 80066e8:	f7ff fed8 	bl	800649c <_Balloc>
 80066ec:	b930      	cbnz	r0, 80066fc <__multiply+0x44>
 80066ee:	4602      	mov	r2, r0
 80066f0:	4b44      	ldr	r3, [pc, #272]	; (8006804 <__multiply+0x14c>)
 80066f2:	4845      	ldr	r0, [pc, #276]	; (8006808 <__multiply+0x150>)
 80066f4:	f240 115d 	movw	r1, #349	; 0x15d
 80066f8:	f000 fcb6 	bl	8007068 <__assert_func>
 80066fc:	f100 0514 	add.w	r5, r0, #20
 8006700:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006704:	462b      	mov	r3, r5
 8006706:	2200      	movs	r2, #0
 8006708:	4543      	cmp	r3, r8
 800670a:	d321      	bcc.n	8006750 <__multiply+0x98>
 800670c:	f104 0314 	add.w	r3, r4, #20
 8006710:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006714:	f109 0314 	add.w	r3, r9, #20
 8006718:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800671c:	9202      	str	r2, [sp, #8]
 800671e:	1b3a      	subs	r2, r7, r4
 8006720:	3a15      	subs	r2, #21
 8006722:	f022 0203 	bic.w	r2, r2, #3
 8006726:	3204      	adds	r2, #4
 8006728:	f104 0115 	add.w	r1, r4, #21
 800672c:	428f      	cmp	r7, r1
 800672e:	bf38      	it	cc
 8006730:	2204      	movcc	r2, #4
 8006732:	9201      	str	r2, [sp, #4]
 8006734:	9a02      	ldr	r2, [sp, #8]
 8006736:	9303      	str	r3, [sp, #12]
 8006738:	429a      	cmp	r2, r3
 800673a:	d80c      	bhi.n	8006756 <__multiply+0x9e>
 800673c:	2e00      	cmp	r6, #0
 800673e:	dd03      	ble.n	8006748 <__multiply+0x90>
 8006740:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006744:	2b00      	cmp	r3, #0
 8006746:	d05a      	beq.n	80067fe <__multiply+0x146>
 8006748:	6106      	str	r6, [r0, #16]
 800674a:	b005      	add	sp, #20
 800674c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006750:	f843 2b04 	str.w	r2, [r3], #4
 8006754:	e7d8      	b.n	8006708 <__multiply+0x50>
 8006756:	f8b3 a000 	ldrh.w	sl, [r3]
 800675a:	f1ba 0f00 	cmp.w	sl, #0
 800675e:	d024      	beq.n	80067aa <__multiply+0xf2>
 8006760:	f104 0e14 	add.w	lr, r4, #20
 8006764:	46a9      	mov	r9, r5
 8006766:	f04f 0c00 	mov.w	ip, #0
 800676a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800676e:	f8d9 1000 	ldr.w	r1, [r9]
 8006772:	fa1f fb82 	uxth.w	fp, r2
 8006776:	b289      	uxth	r1, r1
 8006778:	fb0a 110b 	mla	r1, sl, fp, r1
 800677c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006780:	f8d9 2000 	ldr.w	r2, [r9]
 8006784:	4461      	add	r1, ip
 8006786:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800678a:	fb0a c20b 	mla	r2, sl, fp, ip
 800678e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006792:	b289      	uxth	r1, r1
 8006794:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006798:	4577      	cmp	r7, lr
 800679a:	f849 1b04 	str.w	r1, [r9], #4
 800679e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80067a2:	d8e2      	bhi.n	800676a <__multiply+0xb2>
 80067a4:	9a01      	ldr	r2, [sp, #4]
 80067a6:	f845 c002 	str.w	ip, [r5, r2]
 80067aa:	9a03      	ldr	r2, [sp, #12]
 80067ac:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80067b0:	3304      	adds	r3, #4
 80067b2:	f1b9 0f00 	cmp.w	r9, #0
 80067b6:	d020      	beq.n	80067fa <__multiply+0x142>
 80067b8:	6829      	ldr	r1, [r5, #0]
 80067ba:	f104 0c14 	add.w	ip, r4, #20
 80067be:	46ae      	mov	lr, r5
 80067c0:	f04f 0a00 	mov.w	sl, #0
 80067c4:	f8bc b000 	ldrh.w	fp, [ip]
 80067c8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80067cc:	fb09 220b 	mla	r2, r9, fp, r2
 80067d0:	4492      	add	sl, r2
 80067d2:	b289      	uxth	r1, r1
 80067d4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80067d8:	f84e 1b04 	str.w	r1, [lr], #4
 80067dc:	f85c 2b04 	ldr.w	r2, [ip], #4
 80067e0:	f8be 1000 	ldrh.w	r1, [lr]
 80067e4:	0c12      	lsrs	r2, r2, #16
 80067e6:	fb09 1102 	mla	r1, r9, r2, r1
 80067ea:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80067ee:	4567      	cmp	r7, ip
 80067f0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80067f4:	d8e6      	bhi.n	80067c4 <__multiply+0x10c>
 80067f6:	9a01      	ldr	r2, [sp, #4]
 80067f8:	50a9      	str	r1, [r5, r2]
 80067fa:	3504      	adds	r5, #4
 80067fc:	e79a      	b.n	8006734 <__multiply+0x7c>
 80067fe:	3e01      	subs	r6, #1
 8006800:	e79c      	b.n	800673c <__multiply+0x84>
 8006802:	bf00      	nop
 8006804:	08007d9f 	.word	0x08007d9f
 8006808:	08007db0 	.word	0x08007db0

0800680c <__pow5mult>:
 800680c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006810:	4615      	mov	r5, r2
 8006812:	f012 0203 	ands.w	r2, r2, #3
 8006816:	4606      	mov	r6, r0
 8006818:	460f      	mov	r7, r1
 800681a:	d007      	beq.n	800682c <__pow5mult+0x20>
 800681c:	4c25      	ldr	r4, [pc, #148]	; (80068b4 <__pow5mult+0xa8>)
 800681e:	3a01      	subs	r2, #1
 8006820:	2300      	movs	r3, #0
 8006822:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006826:	f7ff fe9b 	bl	8006560 <__multadd>
 800682a:	4607      	mov	r7, r0
 800682c:	10ad      	asrs	r5, r5, #2
 800682e:	d03d      	beq.n	80068ac <__pow5mult+0xa0>
 8006830:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006832:	b97c      	cbnz	r4, 8006854 <__pow5mult+0x48>
 8006834:	2010      	movs	r0, #16
 8006836:	f7ff fe29 	bl	800648c <malloc>
 800683a:	4602      	mov	r2, r0
 800683c:	6270      	str	r0, [r6, #36]	; 0x24
 800683e:	b928      	cbnz	r0, 800684c <__pow5mult+0x40>
 8006840:	4b1d      	ldr	r3, [pc, #116]	; (80068b8 <__pow5mult+0xac>)
 8006842:	481e      	ldr	r0, [pc, #120]	; (80068bc <__pow5mult+0xb0>)
 8006844:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006848:	f000 fc0e 	bl	8007068 <__assert_func>
 800684c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006850:	6004      	str	r4, [r0, #0]
 8006852:	60c4      	str	r4, [r0, #12]
 8006854:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006858:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800685c:	b94c      	cbnz	r4, 8006872 <__pow5mult+0x66>
 800685e:	f240 2171 	movw	r1, #625	; 0x271
 8006862:	4630      	mov	r0, r6
 8006864:	f7ff ff12 	bl	800668c <__i2b>
 8006868:	2300      	movs	r3, #0
 800686a:	f8c8 0008 	str.w	r0, [r8, #8]
 800686e:	4604      	mov	r4, r0
 8006870:	6003      	str	r3, [r0, #0]
 8006872:	f04f 0900 	mov.w	r9, #0
 8006876:	07eb      	lsls	r3, r5, #31
 8006878:	d50a      	bpl.n	8006890 <__pow5mult+0x84>
 800687a:	4639      	mov	r1, r7
 800687c:	4622      	mov	r2, r4
 800687e:	4630      	mov	r0, r6
 8006880:	f7ff ff1a 	bl	80066b8 <__multiply>
 8006884:	4639      	mov	r1, r7
 8006886:	4680      	mov	r8, r0
 8006888:	4630      	mov	r0, r6
 800688a:	f7ff fe47 	bl	800651c <_Bfree>
 800688e:	4647      	mov	r7, r8
 8006890:	106d      	asrs	r5, r5, #1
 8006892:	d00b      	beq.n	80068ac <__pow5mult+0xa0>
 8006894:	6820      	ldr	r0, [r4, #0]
 8006896:	b938      	cbnz	r0, 80068a8 <__pow5mult+0x9c>
 8006898:	4622      	mov	r2, r4
 800689a:	4621      	mov	r1, r4
 800689c:	4630      	mov	r0, r6
 800689e:	f7ff ff0b 	bl	80066b8 <__multiply>
 80068a2:	6020      	str	r0, [r4, #0]
 80068a4:	f8c0 9000 	str.w	r9, [r0]
 80068a8:	4604      	mov	r4, r0
 80068aa:	e7e4      	b.n	8006876 <__pow5mult+0x6a>
 80068ac:	4638      	mov	r0, r7
 80068ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068b2:	bf00      	nop
 80068b4:	08007f00 	.word	0x08007f00
 80068b8:	08007d2d 	.word	0x08007d2d
 80068bc:	08007db0 	.word	0x08007db0

080068c0 <__lshift>:
 80068c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068c4:	460c      	mov	r4, r1
 80068c6:	6849      	ldr	r1, [r1, #4]
 80068c8:	6923      	ldr	r3, [r4, #16]
 80068ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80068ce:	68a3      	ldr	r3, [r4, #8]
 80068d0:	4607      	mov	r7, r0
 80068d2:	4691      	mov	r9, r2
 80068d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80068d8:	f108 0601 	add.w	r6, r8, #1
 80068dc:	42b3      	cmp	r3, r6
 80068de:	db0b      	blt.n	80068f8 <__lshift+0x38>
 80068e0:	4638      	mov	r0, r7
 80068e2:	f7ff fddb 	bl	800649c <_Balloc>
 80068e6:	4605      	mov	r5, r0
 80068e8:	b948      	cbnz	r0, 80068fe <__lshift+0x3e>
 80068ea:	4602      	mov	r2, r0
 80068ec:	4b2a      	ldr	r3, [pc, #168]	; (8006998 <__lshift+0xd8>)
 80068ee:	482b      	ldr	r0, [pc, #172]	; (800699c <__lshift+0xdc>)
 80068f0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80068f4:	f000 fbb8 	bl	8007068 <__assert_func>
 80068f8:	3101      	adds	r1, #1
 80068fa:	005b      	lsls	r3, r3, #1
 80068fc:	e7ee      	b.n	80068dc <__lshift+0x1c>
 80068fe:	2300      	movs	r3, #0
 8006900:	f100 0114 	add.w	r1, r0, #20
 8006904:	f100 0210 	add.w	r2, r0, #16
 8006908:	4618      	mov	r0, r3
 800690a:	4553      	cmp	r3, sl
 800690c:	db37      	blt.n	800697e <__lshift+0xbe>
 800690e:	6920      	ldr	r0, [r4, #16]
 8006910:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006914:	f104 0314 	add.w	r3, r4, #20
 8006918:	f019 091f 	ands.w	r9, r9, #31
 800691c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006920:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006924:	d02f      	beq.n	8006986 <__lshift+0xc6>
 8006926:	f1c9 0e20 	rsb	lr, r9, #32
 800692a:	468a      	mov	sl, r1
 800692c:	f04f 0c00 	mov.w	ip, #0
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	fa02 f209 	lsl.w	r2, r2, r9
 8006936:	ea42 020c 	orr.w	r2, r2, ip
 800693a:	f84a 2b04 	str.w	r2, [sl], #4
 800693e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006942:	4298      	cmp	r0, r3
 8006944:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006948:	d8f2      	bhi.n	8006930 <__lshift+0x70>
 800694a:	1b03      	subs	r3, r0, r4
 800694c:	3b15      	subs	r3, #21
 800694e:	f023 0303 	bic.w	r3, r3, #3
 8006952:	3304      	adds	r3, #4
 8006954:	f104 0215 	add.w	r2, r4, #21
 8006958:	4290      	cmp	r0, r2
 800695a:	bf38      	it	cc
 800695c:	2304      	movcc	r3, #4
 800695e:	f841 c003 	str.w	ip, [r1, r3]
 8006962:	f1bc 0f00 	cmp.w	ip, #0
 8006966:	d001      	beq.n	800696c <__lshift+0xac>
 8006968:	f108 0602 	add.w	r6, r8, #2
 800696c:	3e01      	subs	r6, #1
 800696e:	4638      	mov	r0, r7
 8006970:	612e      	str	r6, [r5, #16]
 8006972:	4621      	mov	r1, r4
 8006974:	f7ff fdd2 	bl	800651c <_Bfree>
 8006978:	4628      	mov	r0, r5
 800697a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800697e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006982:	3301      	adds	r3, #1
 8006984:	e7c1      	b.n	800690a <__lshift+0x4a>
 8006986:	3904      	subs	r1, #4
 8006988:	f853 2b04 	ldr.w	r2, [r3], #4
 800698c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006990:	4298      	cmp	r0, r3
 8006992:	d8f9      	bhi.n	8006988 <__lshift+0xc8>
 8006994:	e7ea      	b.n	800696c <__lshift+0xac>
 8006996:	bf00      	nop
 8006998:	08007d9f 	.word	0x08007d9f
 800699c:	08007db0 	.word	0x08007db0

080069a0 <__mcmp>:
 80069a0:	b530      	push	{r4, r5, lr}
 80069a2:	6902      	ldr	r2, [r0, #16]
 80069a4:	690c      	ldr	r4, [r1, #16]
 80069a6:	1b12      	subs	r2, r2, r4
 80069a8:	d10e      	bne.n	80069c8 <__mcmp+0x28>
 80069aa:	f100 0314 	add.w	r3, r0, #20
 80069ae:	3114      	adds	r1, #20
 80069b0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80069b4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80069b8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80069bc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80069c0:	42a5      	cmp	r5, r4
 80069c2:	d003      	beq.n	80069cc <__mcmp+0x2c>
 80069c4:	d305      	bcc.n	80069d2 <__mcmp+0x32>
 80069c6:	2201      	movs	r2, #1
 80069c8:	4610      	mov	r0, r2
 80069ca:	bd30      	pop	{r4, r5, pc}
 80069cc:	4283      	cmp	r3, r0
 80069ce:	d3f3      	bcc.n	80069b8 <__mcmp+0x18>
 80069d0:	e7fa      	b.n	80069c8 <__mcmp+0x28>
 80069d2:	f04f 32ff 	mov.w	r2, #4294967295
 80069d6:	e7f7      	b.n	80069c8 <__mcmp+0x28>

080069d8 <__mdiff>:
 80069d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069dc:	460c      	mov	r4, r1
 80069de:	4606      	mov	r6, r0
 80069e0:	4611      	mov	r1, r2
 80069e2:	4620      	mov	r0, r4
 80069e4:	4690      	mov	r8, r2
 80069e6:	f7ff ffdb 	bl	80069a0 <__mcmp>
 80069ea:	1e05      	subs	r5, r0, #0
 80069ec:	d110      	bne.n	8006a10 <__mdiff+0x38>
 80069ee:	4629      	mov	r1, r5
 80069f0:	4630      	mov	r0, r6
 80069f2:	f7ff fd53 	bl	800649c <_Balloc>
 80069f6:	b930      	cbnz	r0, 8006a06 <__mdiff+0x2e>
 80069f8:	4b3a      	ldr	r3, [pc, #232]	; (8006ae4 <__mdiff+0x10c>)
 80069fa:	4602      	mov	r2, r0
 80069fc:	f240 2132 	movw	r1, #562	; 0x232
 8006a00:	4839      	ldr	r0, [pc, #228]	; (8006ae8 <__mdiff+0x110>)
 8006a02:	f000 fb31 	bl	8007068 <__assert_func>
 8006a06:	2301      	movs	r3, #1
 8006a08:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006a0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a10:	bfa4      	itt	ge
 8006a12:	4643      	movge	r3, r8
 8006a14:	46a0      	movge	r8, r4
 8006a16:	4630      	mov	r0, r6
 8006a18:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006a1c:	bfa6      	itte	ge
 8006a1e:	461c      	movge	r4, r3
 8006a20:	2500      	movge	r5, #0
 8006a22:	2501      	movlt	r5, #1
 8006a24:	f7ff fd3a 	bl	800649c <_Balloc>
 8006a28:	b920      	cbnz	r0, 8006a34 <__mdiff+0x5c>
 8006a2a:	4b2e      	ldr	r3, [pc, #184]	; (8006ae4 <__mdiff+0x10c>)
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006a32:	e7e5      	b.n	8006a00 <__mdiff+0x28>
 8006a34:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006a38:	6926      	ldr	r6, [r4, #16]
 8006a3a:	60c5      	str	r5, [r0, #12]
 8006a3c:	f104 0914 	add.w	r9, r4, #20
 8006a40:	f108 0514 	add.w	r5, r8, #20
 8006a44:	f100 0e14 	add.w	lr, r0, #20
 8006a48:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006a4c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006a50:	f108 0210 	add.w	r2, r8, #16
 8006a54:	46f2      	mov	sl, lr
 8006a56:	2100      	movs	r1, #0
 8006a58:	f859 3b04 	ldr.w	r3, [r9], #4
 8006a5c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006a60:	fa1f f883 	uxth.w	r8, r3
 8006a64:	fa11 f18b 	uxtah	r1, r1, fp
 8006a68:	0c1b      	lsrs	r3, r3, #16
 8006a6a:	eba1 0808 	sub.w	r8, r1, r8
 8006a6e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006a72:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006a76:	fa1f f888 	uxth.w	r8, r8
 8006a7a:	1419      	asrs	r1, r3, #16
 8006a7c:	454e      	cmp	r6, r9
 8006a7e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006a82:	f84a 3b04 	str.w	r3, [sl], #4
 8006a86:	d8e7      	bhi.n	8006a58 <__mdiff+0x80>
 8006a88:	1b33      	subs	r3, r6, r4
 8006a8a:	3b15      	subs	r3, #21
 8006a8c:	f023 0303 	bic.w	r3, r3, #3
 8006a90:	3304      	adds	r3, #4
 8006a92:	3415      	adds	r4, #21
 8006a94:	42a6      	cmp	r6, r4
 8006a96:	bf38      	it	cc
 8006a98:	2304      	movcc	r3, #4
 8006a9a:	441d      	add	r5, r3
 8006a9c:	4473      	add	r3, lr
 8006a9e:	469e      	mov	lr, r3
 8006aa0:	462e      	mov	r6, r5
 8006aa2:	4566      	cmp	r6, ip
 8006aa4:	d30e      	bcc.n	8006ac4 <__mdiff+0xec>
 8006aa6:	f10c 0203 	add.w	r2, ip, #3
 8006aaa:	1b52      	subs	r2, r2, r5
 8006aac:	f022 0203 	bic.w	r2, r2, #3
 8006ab0:	3d03      	subs	r5, #3
 8006ab2:	45ac      	cmp	ip, r5
 8006ab4:	bf38      	it	cc
 8006ab6:	2200      	movcc	r2, #0
 8006ab8:	441a      	add	r2, r3
 8006aba:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006abe:	b17b      	cbz	r3, 8006ae0 <__mdiff+0x108>
 8006ac0:	6107      	str	r7, [r0, #16]
 8006ac2:	e7a3      	b.n	8006a0c <__mdiff+0x34>
 8006ac4:	f856 8b04 	ldr.w	r8, [r6], #4
 8006ac8:	fa11 f288 	uxtah	r2, r1, r8
 8006acc:	1414      	asrs	r4, r2, #16
 8006ace:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006ad2:	b292      	uxth	r2, r2
 8006ad4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006ad8:	f84e 2b04 	str.w	r2, [lr], #4
 8006adc:	1421      	asrs	r1, r4, #16
 8006ade:	e7e0      	b.n	8006aa2 <__mdiff+0xca>
 8006ae0:	3f01      	subs	r7, #1
 8006ae2:	e7ea      	b.n	8006aba <__mdiff+0xe2>
 8006ae4:	08007d9f 	.word	0x08007d9f
 8006ae8:	08007db0 	.word	0x08007db0

08006aec <__d2b>:
 8006aec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006af0:	4689      	mov	r9, r1
 8006af2:	2101      	movs	r1, #1
 8006af4:	ec57 6b10 	vmov	r6, r7, d0
 8006af8:	4690      	mov	r8, r2
 8006afa:	f7ff fccf 	bl	800649c <_Balloc>
 8006afe:	4604      	mov	r4, r0
 8006b00:	b930      	cbnz	r0, 8006b10 <__d2b+0x24>
 8006b02:	4602      	mov	r2, r0
 8006b04:	4b25      	ldr	r3, [pc, #148]	; (8006b9c <__d2b+0xb0>)
 8006b06:	4826      	ldr	r0, [pc, #152]	; (8006ba0 <__d2b+0xb4>)
 8006b08:	f240 310a 	movw	r1, #778	; 0x30a
 8006b0c:	f000 faac 	bl	8007068 <__assert_func>
 8006b10:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006b14:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006b18:	bb35      	cbnz	r5, 8006b68 <__d2b+0x7c>
 8006b1a:	2e00      	cmp	r6, #0
 8006b1c:	9301      	str	r3, [sp, #4]
 8006b1e:	d028      	beq.n	8006b72 <__d2b+0x86>
 8006b20:	4668      	mov	r0, sp
 8006b22:	9600      	str	r6, [sp, #0]
 8006b24:	f7ff fd82 	bl	800662c <__lo0bits>
 8006b28:	9900      	ldr	r1, [sp, #0]
 8006b2a:	b300      	cbz	r0, 8006b6e <__d2b+0x82>
 8006b2c:	9a01      	ldr	r2, [sp, #4]
 8006b2e:	f1c0 0320 	rsb	r3, r0, #32
 8006b32:	fa02 f303 	lsl.w	r3, r2, r3
 8006b36:	430b      	orrs	r3, r1
 8006b38:	40c2      	lsrs	r2, r0
 8006b3a:	6163      	str	r3, [r4, #20]
 8006b3c:	9201      	str	r2, [sp, #4]
 8006b3e:	9b01      	ldr	r3, [sp, #4]
 8006b40:	61a3      	str	r3, [r4, #24]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	bf14      	ite	ne
 8006b46:	2202      	movne	r2, #2
 8006b48:	2201      	moveq	r2, #1
 8006b4a:	6122      	str	r2, [r4, #16]
 8006b4c:	b1d5      	cbz	r5, 8006b84 <__d2b+0x98>
 8006b4e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006b52:	4405      	add	r5, r0
 8006b54:	f8c9 5000 	str.w	r5, [r9]
 8006b58:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006b5c:	f8c8 0000 	str.w	r0, [r8]
 8006b60:	4620      	mov	r0, r4
 8006b62:	b003      	add	sp, #12
 8006b64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b6c:	e7d5      	b.n	8006b1a <__d2b+0x2e>
 8006b6e:	6161      	str	r1, [r4, #20]
 8006b70:	e7e5      	b.n	8006b3e <__d2b+0x52>
 8006b72:	a801      	add	r0, sp, #4
 8006b74:	f7ff fd5a 	bl	800662c <__lo0bits>
 8006b78:	9b01      	ldr	r3, [sp, #4]
 8006b7a:	6163      	str	r3, [r4, #20]
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	6122      	str	r2, [r4, #16]
 8006b80:	3020      	adds	r0, #32
 8006b82:	e7e3      	b.n	8006b4c <__d2b+0x60>
 8006b84:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006b88:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006b8c:	f8c9 0000 	str.w	r0, [r9]
 8006b90:	6918      	ldr	r0, [r3, #16]
 8006b92:	f7ff fd2b 	bl	80065ec <__hi0bits>
 8006b96:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006b9a:	e7df      	b.n	8006b5c <__d2b+0x70>
 8006b9c:	08007d9f 	.word	0x08007d9f
 8006ba0:	08007db0 	.word	0x08007db0

08006ba4 <_calloc_r>:
 8006ba4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006ba6:	fba1 2402 	umull	r2, r4, r1, r2
 8006baa:	b94c      	cbnz	r4, 8006bc0 <_calloc_r+0x1c>
 8006bac:	4611      	mov	r1, r2
 8006bae:	9201      	str	r2, [sp, #4]
 8006bb0:	f000 f87a 	bl	8006ca8 <_malloc_r>
 8006bb4:	9a01      	ldr	r2, [sp, #4]
 8006bb6:	4605      	mov	r5, r0
 8006bb8:	b930      	cbnz	r0, 8006bc8 <_calloc_r+0x24>
 8006bba:	4628      	mov	r0, r5
 8006bbc:	b003      	add	sp, #12
 8006bbe:	bd30      	pop	{r4, r5, pc}
 8006bc0:	220c      	movs	r2, #12
 8006bc2:	6002      	str	r2, [r0, #0]
 8006bc4:	2500      	movs	r5, #0
 8006bc6:	e7f8      	b.n	8006bba <_calloc_r+0x16>
 8006bc8:	4621      	mov	r1, r4
 8006bca:	f7fe f94f 	bl	8004e6c <memset>
 8006bce:	e7f4      	b.n	8006bba <_calloc_r+0x16>

08006bd0 <_free_r>:
 8006bd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006bd2:	2900      	cmp	r1, #0
 8006bd4:	d044      	beq.n	8006c60 <_free_r+0x90>
 8006bd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bda:	9001      	str	r0, [sp, #4]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	f1a1 0404 	sub.w	r4, r1, #4
 8006be2:	bfb8      	it	lt
 8006be4:	18e4      	addlt	r4, r4, r3
 8006be6:	f000 fa9b 	bl	8007120 <__malloc_lock>
 8006bea:	4a1e      	ldr	r2, [pc, #120]	; (8006c64 <_free_r+0x94>)
 8006bec:	9801      	ldr	r0, [sp, #4]
 8006bee:	6813      	ldr	r3, [r2, #0]
 8006bf0:	b933      	cbnz	r3, 8006c00 <_free_r+0x30>
 8006bf2:	6063      	str	r3, [r4, #4]
 8006bf4:	6014      	str	r4, [r2, #0]
 8006bf6:	b003      	add	sp, #12
 8006bf8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006bfc:	f000 ba96 	b.w	800712c <__malloc_unlock>
 8006c00:	42a3      	cmp	r3, r4
 8006c02:	d908      	bls.n	8006c16 <_free_r+0x46>
 8006c04:	6825      	ldr	r5, [r4, #0]
 8006c06:	1961      	adds	r1, r4, r5
 8006c08:	428b      	cmp	r3, r1
 8006c0a:	bf01      	itttt	eq
 8006c0c:	6819      	ldreq	r1, [r3, #0]
 8006c0e:	685b      	ldreq	r3, [r3, #4]
 8006c10:	1949      	addeq	r1, r1, r5
 8006c12:	6021      	streq	r1, [r4, #0]
 8006c14:	e7ed      	b.n	8006bf2 <_free_r+0x22>
 8006c16:	461a      	mov	r2, r3
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	b10b      	cbz	r3, 8006c20 <_free_r+0x50>
 8006c1c:	42a3      	cmp	r3, r4
 8006c1e:	d9fa      	bls.n	8006c16 <_free_r+0x46>
 8006c20:	6811      	ldr	r1, [r2, #0]
 8006c22:	1855      	adds	r5, r2, r1
 8006c24:	42a5      	cmp	r5, r4
 8006c26:	d10b      	bne.n	8006c40 <_free_r+0x70>
 8006c28:	6824      	ldr	r4, [r4, #0]
 8006c2a:	4421      	add	r1, r4
 8006c2c:	1854      	adds	r4, r2, r1
 8006c2e:	42a3      	cmp	r3, r4
 8006c30:	6011      	str	r1, [r2, #0]
 8006c32:	d1e0      	bne.n	8006bf6 <_free_r+0x26>
 8006c34:	681c      	ldr	r4, [r3, #0]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	6053      	str	r3, [r2, #4]
 8006c3a:	4421      	add	r1, r4
 8006c3c:	6011      	str	r1, [r2, #0]
 8006c3e:	e7da      	b.n	8006bf6 <_free_r+0x26>
 8006c40:	d902      	bls.n	8006c48 <_free_r+0x78>
 8006c42:	230c      	movs	r3, #12
 8006c44:	6003      	str	r3, [r0, #0]
 8006c46:	e7d6      	b.n	8006bf6 <_free_r+0x26>
 8006c48:	6825      	ldr	r5, [r4, #0]
 8006c4a:	1961      	adds	r1, r4, r5
 8006c4c:	428b      	cmp	r3, r1
 8006c4e:	bf04      	itt	eq
 8006c50:	6819      	ldreq	r1, [r3, #0]
 8006c52:	685b      	ldreq	r3, [r3, #4]
 8006c54:	6063      	str	r3, [r4, #4]
 8006c56:	bf04      	itt	eq
 8006c58:	1949      	addeq	r1, r1, r5
 8006c5a:	6021      	streq	r1, [r4, #0]
 8006c5c:	6054      	str	r4, [r2, #4]
 8006c5e:	e7ca      	b.n	8006bf6 <_free_r+0x26>
 8006c60:	b003      	add	sp, #12
 8006c62:	bd30      	pop	{r4, r5, pc}
 8006c64:	200003e4 	.word	0x200003e4

08006c68 <sbrk_aligned>:
 8006c68:	b570      	push	{r4, r5, r6, lr}
 8006c6a:	4e0e      	ldr	r6, [pc, #56]	; (8006ca4 <sbrk_aligned+0x3c>)
 8006c6c:	460c      	mov	r4, r1
 8006c6e:	6831      	ldr	r1, [r6, #0]
 8006c70:	4605      	mov	r5, r0
 8006c72:	b911      	cbnz	r1, 8006c7a <sbrk_aligned+0x12>
 8006c74:	f000 f9e8 	bl	8007048 <_sbrk_r>
 8006c78:	6030      	str	r0, [r6, #0]
 8006c7a:	4621      	mov	r1, r4
 8006c7c:	4628      	mov	r0, r5
 8006c7e:	f000 f9e3 	bl	8007048 <_sbrk_r>
 8006c82:	1c43      	adds	r3, r0, #1
 8006c84:	d00a      	beq.n	8006c9c <sbrk_aligned+0x34>
 8006c86:	1cc4      	adds	r4, r0, #3
 8006c88:	f024 0403 	bic.w	r4, r4, #3
 8006c8c:	42a0      	cmp	r0, r4
 8006c8e:	d007      	beq.n	8006ca0 <sbrk_aligned+0x38>
 8006c90:	1a21      	subs	r1, r4, r0
 8006c92:	4628      	mov	r0, r5
 8006c94:	f000 f9d8 	bl	8007048 <_sbrk_r>
 8006c98:	3001      	adds	r0, #1
 8006c9a:	d101      	bne.n	8006ca0 <sbrk_aligned+0x38>
 8006c9c:	f04f 34ff 	mov.w	r4, #4294967295
 8006ca0:	4620      	mov	r0, r4
 8006ca2:	bd70      	pop	{r4, r5, r6, pc}
 8006ca4:	200003e8 	.word	0x200003e8

08006ca8 <_malloc_r>:
 8006ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cac:	1ccd      	adds	r5, r1, #3
 8006cae:	f025 0503 	bic.w	r5, r5, #3
 8006cb2:	3508      	adds	r5, #8
 8006cb4:	2d0c      	cmp	r5, #12
 8006cb6:	bf38      	it	cc
 8006cb8:	250c      	movcc	r5, #12
 8006cba:	2d00      	cmp	r5, #0
 8006cbc:	4607      	mov	r7, r0
 8006cbe:	db01      	blt.n	8006cc4 <_malloc_r+0x1c>
 8006cc0:	42a9      	cmp	r1, r5
 8006cc2:	d905      	bls.n	8006cd0 <_malloc_r+0x28>
 8006cc4:	230c      	movs	r3, #12
 8006cc6:	603b      	str	r3, [r7, #0]
 8006cc8:	2600      	movs	r6, #0
 8006cca:	4630      	mov	r0, r6
 8006ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cd0:	4e2e      	ldr	r6, [pc, #184]	; (8006d8c <_malloc_r+0xe4>)
 8006cd2:	f000 fa25 	bl	8007120 <__malloc_lock>
 8006cd6:	6833      	ldr	r3, [r6, #0]
 8006cd8:	461c      	mov	r4, r3
 8006cda:	bb34      	cbnz	r4, 8006d2a <_malloc_r+0x82>
 8006cdc:	4629      	mov	r1, r5
 8006cde:	4638      	mov	r0, r7
 8006ce0:	f7ff ffc2 	bl	8006c68 <sbrk_aligned>
 8006ce4:	1c43      	adds	r3, r0, #1
 8006ce6:	4604      	mov	r4, r0
 8006ce8:	d14d      	bne.n	8006d86 <_malloc_r+0xde>
 8006cea:	6834      	ldr	r4, [r6, #0]
 8006cec:	4626      	mov	r6, r4
 8006cee:	2e00      	cmp	r6, #0
 8006cf0:	d140      	bne.n	8006d74 <_malloc_r+0xcc>
 8006cf2:	6823      	ldr	r3, [r4, #0]
 8006cf4:	4631      	mov	r1, r6
 8006cf6:	4638      	mov	r0, r7
 8006cf8:	eb04 0803 	add.w	r8, r4, r3
 8006cfc:	f000 f9a4 	bl	8007048 <_sbrk_r>
 8006d00:	4580      	cmp	r8, r0
 8006d02:	d13a      	bne.n	8006d7a <_malloc_r+0xd2>
 8006d04:	6821      	ldr	r1, [r4, #0]
 8006d06:	3503      	adds	r5, #3
 8006d08:	1a6d      	subs	r5, r5, r1
 8006d0a:	f025 0503 	bic.w	r5, r5, #3
 8006d0e:	3508      	adds	r5, #8
 8006d10:	2d0c      	cmp	r5, #12
 8006d12:	bf38      	it	cc
 8006d14:	250c      	movcc	r5, #12
 8006d16:	4629      	mov	r1, r5
 8006d18:	4638      	mov	r0, r7
 8006d1a:	f7ff ffa5 	bl	8006c68 <sbrk_aligned>
 8006d1e:	3001      	adds	r0, #1
 8006d20:	d02b      	beq.n	8006d7a <_malloc_r+0xd2>
 8006d22:	6823      	ldr	r3, [r4, #0]
 8006d24:	442b      	add	r3, r5
 8006d26:	6023      	str	r3, [r4, #0]
 8006d28:	e00e      	b.n	8006d48 <_malloc_r+0xa0>
 8006d2a:	6822      	ldr	r2, [r4, #0]
 8006d2c:	1b52      	subs	r2, r2, r5
 8006d2e:	d41e      	bmi.n	8006d6e <_malloc_r+0xc6>
 8006d30:	2a0b      	cmp	r2, #11
 8006d32:	d916      	bls.n	8006d62 <_malloc_r+0xba>
 8006d34:	1961      	adds	r1, r4, r5
 8006d36:	42a3      	cmp	r3, r4
 8006d38:	6025      	str	r5, [r4, #0]
 8006d3a:	bf18      	it	ne
 8006d3c:	6059      	strne	r1, [r3, #4]
 8006d3e:	6863      	ldr	r3, [r4, #4]
 8006d40:	bf08      	it	eq
 8006d42:	6031      	streq	r1, [r6, #0]
 8006d44:	5162      	str	r2, [r4, r5]
 8006d46:	604b      	str	r3, [r1, #4]
 8006d48:	4638      	mov	r0, r7
 8006d4a:	f104 060b 	add.w	r6, r4, #11
 8006d4e:	f000 f9ed 	bl	800712c <__malloc_unlock>
 8006d52:	f026 0607 	bic.w	r6, r6, #7
 8006d56:	1d23      	adds	r3, r4, #4
 8006d58:	1af2      	subs	r2, r6, r3
 8006d5a:	d0b6      	beq.n	8006cca <_malloc_r+0x22>
 8006d5c:	1b9b      	subs	r3, r3, r6
 8006d5e:	50a3      	str	r3, [r4, r2]
 8006d60:	e7b3      	b.n	8006cca <_malloc_r+0x22>
 8006d62:	6862      	ldr	r2, [r4, #4]
 8006d64:	42a3      	cmp	r3, r4
 8006d66:	bf0c      	ite	eq
 8006d68:	6032      	streq	r2, [r6, #0]
 8006d6a:	605a      	strne	r2, [r3, #4]
 8006d6c:	e7ec      	b.n	8006d48 <_malloc_r+0xa0>
 8006d6e:	4623      	mov	r3, r4
 8006d70:	6864      	ldr	r4, [r4, #4]
 8006d72:	e7b2      	b.n	8006cda <_malloc_r+0x32>
 8006d74:	4634      	mov	r4, r6
 8006d76:	6876      	ldr	r6, [r6, #4]
 8006d78:	e7b9      	b.n	8006cee <_malloc_r+0x46>
 8006d7a:	230c      	movs	r3, #12
 8006d7c:	603b      	str	r3, [r7, #0]
 8006d7e:	4638      	mov	r0, r7
 8006d80:	f000 f9d4 	bl	800712c <__malloc_unlock>
 8006d84:	e7a1      	b.n	8006cca <_malloc_r+0x22>
 8006d86:	6025      	str	r5, [r4, #0]
 8006d88:	e7de      	b.n	8006d48 <_malloc_r+0xa0>
 8006d8a:	bf00      	nop
 8006d8c:	200003e4 	.word	0x200003e4

08006d90 <__ssputs_r>:
 8006d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d94:	688e      	ldr	r6, [r1, #8]
 8006d96:	429e      	cmp	r6, r3
 8006d98:	4682      	mov	sl, r0
 8006d9a:	460c      	mov	r4, r1
 8006d9c:	4690      	mov	r8, r2
 8006d9e:	461f      	mov	r7, r3
 8006da0:	d838      	bhi.n	8006e14 <__ssputs_r+0x84>
 8006da2:	898a      	ldrh	r2, [r1, #12]
 8006da4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006da8:	d032      	beq.n	8006e10 <__ssputs_r+0x80>
 8006daa:	6825      	ldr	r5, [r4, #0]
 8006dac:	6909      	ldr	r1, [r1, #16]
 8006dae:	eba5 0901 	sub.w	r9, r5, r1
 8006db2:	6965      	ldr	r5, [r4, #20]
 8006db4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006db8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006dbc:	3301      	adds	r3, #1
 8006dbe:	444b      	add	r3, r9
 8006dc0:	106d      	asrs	r5, r5, #1
 8006dc2:	429d      	cmp	r5, r3
 8006dc4:	bf38      	it	cc
 8006dc6:	461d      	movcc	r5, r3
 8006dc8:	0553      	lsls	r3, r2, #21
 8006dca:	d531      	bpl.n	8006e30 <__ssputs_r+0xa0>
 8006dcc:	4629      	mov	r1, r5
 8006dce:	f7ff ff6b 	bl	8006ca8 <_malloc_r>
 8006dd2:	4606      	mov	r6, r0
 8006dd4:	b950      	cbnz	r0, 8006dec <__ssputs_r+0x5c>
 8006dd6:	230c      	movs	r3, #12
 8006dd8:	f8ca 3000 	str.w	r3, [sl]
 8006ddc:	89a3      	ldrh	r3, [r4, #12]
 8006dde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006de2:	81a3      	strh	r3, [r4, #12]
 8006de4:	f04f 30ff 	mov.w	r0, #4294967295
 8006de8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dec:	6921      	ldr	r1, [r4, #16]
 8006dee:	464a      	mov	r2, r9
 8006df0:	f7fe f82e 	bl	8004e50 <memcpy>
 8006df4:	89a3      	ldrh	r3, [r4, #12]
 8006df6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006dfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dfe:	81a3      	strh	r3, [r4, #12]
 8006e00:	6126      	str	r6, [r4, #16]
 8006e02:	6165      	str	r5, [r4, #20]
 8006e04:	444e      	add	r6, r9
 8006e06:	eba5 0509 	sub.w	r5, r5, r9
 8006e0a:	6026      	str	r6, [r4, #0]
 8006e0c:	60a5      	str	r5, [r4, #8]
 8006e0e:	463e      	mov	r6, r7
 8006e10:	42be      	cmp	r6, r7
 8006e12:	d900      	bls.n	8006e16 <__ssputs_r+0x86>
 8006e14:	463e      	mov	r6, r7
 8006e16:	6820      	ldr	r0, [r4, #0]
 8006e18:	4632      	mov	r2, r6
 8006e1a:	4641      	mov	r1, r8
 8006e1c:	f000 f966 	bl	80070ec <memmove>
 8006e20:	68a3      	ldr	r3, [r4, #8]
 8006e22:	1b9b      	subs	r3, r3, r6
 8006e24:	60a3      	str	r3, [r4, #8]
 8006e26:	6823      	ldr	r3, [r4, #0]
 8006e28:	4433      	add	r3, r6
 8006e2a:	6023      	str	r3, [r4, #0]
 8006e2c:	2000      	movs	r0, #0
 8006e2e:	e7db      	b.n	8006de8 <__ssputs_r+0x58>
 8006e30:	462a      	mov	r2, r5
 8006e32:	f000 f981 	bl	8007138 <_realloc_r>
 8006e36:	4606      	mov	r6, r0
 8006e38:	2800      	cmp	r0, #0
 8006e3a:	d1e1      	bne.n	8006e00 <__ssputs_r+0x70>
 8006e3c:	6921      	ldr	r1, [r4, #16]
 8006e3e:	4650      	mov	r0, sl
 8006e40:	f7ff fec6 	bl	8006bd0 <_free_r>
 8006e44:	e7c7      	b.n	8006dd6 <__ssputs_r+0x46>
	...

08006e48 <_svfiprintf_r>:
 8006e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e4c:	4698      	mov	r8, r3
 8006e4e:	898b      	ldrh	r3, [r1, #12]
 8006e50:	061b      	lsls	r3, r3, #24
 8006e52:	b09d      	sub	sp, #116	; 0x74
 8006e54:	4607      	mov	r7, r0
 8006e56:	460d      	mov	r5, r1
 8006e58:	4614      	mov	r4, r2
 8006e5a:	d50e      	bpl.n	8006e7a <_svfiprintf_r+0x32>
 8006e5c:	690b      	ldr	r3, [r1, #16]
 8006e5e:	b963      	cbnz	r3, 8006e7a <_svfiprintf_r+0x32>
 8006e60:	2140      	movs	r1, #64	; 0x40
 8006e62:	f7ff ff21 	bl	8006ca8 <_malloc_r>
 8006e66:	6028      	str	r0, [r5, #0]
 8006e68:	6128      	str	r0, [r5, #16]
 8006e6a:	b920      	cbnz	r0, 8006e76 <_svfiprintf_r+0x2e>
 8006e6c:	230c      	movs	r3, #12
 8006e6e:	603b      	str	r3, [r7, #0]
 8006e70:	f04f 30ff 	mov.w	r0, #4294967295
 8006e74:	e0d1      	b.n	800701a <_svfiprintf_r+0x1d2>
 8006e76:	2340      	movs	r3, #64	; 0x40
 8006e78:	616b      	str	r3, [r5, #20]
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	9309      	str	r3, [sp, #36]	; 0x24
 8006e7e:	2320      	movs	r3, #32
 8006e80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e84:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e88:	2330      	movs	r3, #48	; 0x30
 8006e8a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007034 <_svfiprintf_r+0x1ec>
 8006e8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e92:	f04f 0901 	mov.w	r9, #1
 8006e96:	4623      	mov	r3, r4
 8006e98:	469a      	mov	sl, r3
 8006e9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e9e:	b10a      	cbz	r2, 8006ea4 <_svfiprintf_r+0x5c>
 8006ea0:	2a25      	cmp	r2, #37	; 0x25
 8006ea2:	d1f9      	bne.n	8006e98 <_svfiprintf_r+0x50>
 8006ea4:	ebba 0b04 	subs.w	fp, sl, r4
 8006ea8:	d00b      	beq.n	8006ec2 <_svfiprintf_r+0x7a>
 8006eaa:	465b      	mov	r3, fp
 8006eac:	4622      	mov	r2, r4
 8006eae:	4629      	mov	r1, r5
 8006eb0:	4638      	mov	r0, r7
 8006eb2:	f7ff ff6d 	bl	8006d90 <__ssputs_r>
 8006eb6:	3001      	adds	r0, #1
 8006eb8:	f000 80aa 	beq.w	8007010 <_svfiprintf_r+0x1c8>
 8006ebc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ebe:	445a      	add	r2, fp
 8006ec0:	9209      	str	r2, [sp, #36]	; 0x24
 8006ec2:	f89a 3000 	ldrb.w	r3, [sl]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	f000 80a2 	beq.w	8007010 <_svfiprintf_r+0x1c8>
 8006ecc:	2300      	movs	r3, #0
 8006ece:	f04f 32ff 	mov.w	r2, #4294967295
 8006ed2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ed6:	f10a 0a01 	add.w	sl, sl, #1
 8006eda:	9304      	str	r3, [sp, #16]
 8006edc:	9307      	str	r3, [sp, #28]
 8006ede:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ee2:	931a      	str	r3, [sp, #104]	; 0x68
 8006ee4:	4654      	mov	r4, sl
 8006ee6:	2205      	movs	r2, #5
 8006ee8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006eec:	4851      	ldr	r0, [pc, #324]	; (8007034 <_svfiprintf_r+0x1ec>)
 8006eee:	f7f9 f997 	bl	8000220 <memchr>
 8006ef2:	9a04      	ldr	r2, [sp, #16]
 8006ef4:	b9d8      	cbnz	r0, 8006f2e <_svfiprintf_r+0xe6>
 8006ef6:	06d0      	lsls	r0, r2, #27
 8006ef8:	bf44      	itt	mi
 8006efa:	2320      	movmi	r3, #32
 8006efc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f00:	0711      	lsls	r1, r2, #28
 8006f02:	bf44      	itt	mi
 8006f04:	232b      	movmi	r3, #43	; 0x2b
 8006f06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f0a:	f89a 3000 	ldrb.w	r3, [sl]
 8006f0e:	2b2a      	cmp	r3, #42	; 0x2a
 8006f10:	d015      	beq.n	8006f3e <_svfiprintf_r+0xf6>
 8006f12:	9a07      	ldr	r2, [sp, #28]
 8006f14:	4654      	mov	r4, sl
 8006f16:	2000      	movs	r0, #0
 8006f18:	f04f 0c0a 	mov.w	ip, #10
 8006f1c:	4621      	mov	r1, r4
 8006f1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f22:	3b30      	subs	r3, #48	; 0x30
 8006f24:	2b09      	cmp	r3, #9
 8006f26:	d94e      	bls.n	8006fc6 <_svfiprintf_r+0x17e>
 8006f28:	b1b0      	cbz	r0, 8006f58 <_svfiprintf_r+0x110>
 8006f2a:	9207      	str	r2, [sp, #28]
 8006f2c:	e014      	b.n	8006f58 <_svfiprintf_r+0x110>
 8006f2e:	eba0 0308 	sub.w	r3, r0, r8
 8006f32:	fa09 f303 	lsl.w	r3, r9, r3
 8006f36:	4313      	orrs	r3, r2
 8006f38:	9304      	str	r3, [sp, #16]
 8006f3a:	46a2      	mov	sl, r4
 8006f3c:	e7d2      	b.n	8006ee4 <_svfiprintf_r+0x9c>
 8006f3e:	9b03      	ldr	r3, [sp, #12]
 8006f40:	1d19      	adds	r1, r3, #4
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	9103      	str	r1, [sp, #12]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	bfbb      	ittet	lt
 8006f4a:	425b      	neglt	r3, r3
 8006f4c:	f042 0202 	orrlt.w	r2, r2, #2
 8006f50:	9307      	strge	r3, [sp, #28]
 8006f52:	9307      	strlt	r3, [sp, #28]
 8006f54:	bfb8      	it	lt
 8006f56:	9204      	strlt	r2, [sp, #16]
 8006f58:	7823      	ldrb	r3, [r4, #0]
 8006f5a:	2b2e      	cmp	r3, #46	; 0x2e
 8006f5c:	d10c      	bne.n	8006f78 <_svfiprintf_r+0x130>
 8006f5e:	7863      	ldrb	r3, [r4, #1]
 8006f60:	2b2a      	cmp	r3, #42	; 0x2a
 8006f62:	d135      	bne.n	8006fd0 <_svfiprintf_r+0x188>
 8006f64:	9b03      	ldr	r3, [sp, #12]
 8006f66:	1d1a      	adds	r2, r3, #4
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	9203      	str	r2, [sp, #12]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	bfb8      	it	lt
 8006f70:	f04f 33ff 	movlt.w	r3, #4294967295
 8006f74:	3402      	adds	r4, #2
 8006f76:	9305      	str	r3, [sp, #20]
 8006f78:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007044 <_svfiprintf_r+0x1fc>
 8006f7c:	7821      	ldrb	r1, [r4, #0]
 8006f7e:	2203      	movs	r2, #3
 8006f80:	4650      	mov	r0, sl
 8006f82:	f7f9 f94d 	bl	8000220 <memchr>
 8006f86:	b140      	cbz	r0, 8006f9a <_svfiprintf_r+0x152>
 8006f88:	2340      	movs	r3, #64	; 0x40
 8006f8a:	eba0 000a 	sub.w	r0, r0, sl
 8006f8e:	fa03 f000 	lsl.w	r0, r3, r0
 8006f92:	9b04      	ldr	r3, [sp, #16]
 8006f94:	4303      	orrs	r3, r0
 8006f96:	3401      	adds	r4, #1
 8006f98:	9304      	str	r3, [sp, #16]
 8006f9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f9e:	4826      	ldr	r0, [pc, #152]	; (8007038 <_svfiprintf_r+0x1f0>)
 8006fa0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006fa4:	2206      	movs	r2, #6
 8006fa6:	f7f9 f93b 	bl	8000220 <memchr>
 8006faa:	2800      	cmp	r0, #0
 8006fac:	d038      	beq.n	8007020 <_svfiprintf_r+0x1d8>
 8006fae:	4b23      	ldr	r3, [pc, #140]	; (800703c <_svfiprintf_r+0x1f4>)
 8006fb0:	bb1b      	cbnz	r3, 8006ffa <_svfiprintf_r+0x1b2>
 8006fb2:	9b03      	ldr	r3, [sp, #12]
 8006fb4:	3307      	adds	r3, #7
 8006fb6:	f023 0307 	bic.w	r3, r3, #7
 8006fba:	3308      	adds	r3, #8
 8006fbc:	9303      	str	r3, [sp, #12]
 8006fbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fc0:	4433      	add	r3, r6
 8006fc2:	9309      	str	r3, [sp, #36]	; 0x24
 8006fc4:	e767      	b.n	8006e96 <_svfiprintf_r+0x4e>
 8006fc6:	fb0c 3202 	mla	r2, ip, r2, r3
 8006fca:	460c      	mov	r4, r1
 8006fcc:	2001      	movs	r0, #1
 8006fce:	e7a5      	b.n	8006f1c <_svfiprintf_r+0xd4>
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	3401      	adds	r4, #1
 8006fd4:	9305      	str	r3, [sp, #20]
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	f04f 0c0a 	mov.w	ip, #10
 8006fdc:	4620      	mov	r0, r4
 8006fde:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006fe2:	3a30      	subs	r2, #48	; 0x30
 8006fe4:	2a09      	cmp	r2, #9
 8006fe6:	d903      	bls.n	8006ff0 <_svfiprintf_r+0x1a8>
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d0c5      	beq.n	8006f78 <_svfiprintf_r+0x130>
 8006fec:	9105      	str	r1, [sp, #20]
 8006fee:	e7c3      	b.n	8006f78 <_svfiprintf_r+0x130>
 8006ff0:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ff4:	4604      	mov	r4, r0
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e7f0      	b.n	8006fdc <_svfiprintf_r+0x194>
 8006ffa:	ab03      	add	r3, sp, #12
 8006ffc:	9300      	str	r3, [sp, #0]
 8006ffe:	462a      	mov	r2, r5
 8007000:	4b0f      	ldr	r3, [pc, #60]	; (8007040 <_svfiprintf_r+0x1f8>)
 8007002:	a904      	add	r1, sp, #16
 8007004:	4638      	mov	r0, r7
 8007006:	f7fd ffd9 	bl	8004fbc <_printf_float>
 800700a:	1c42      	adds	r2, r0, #1
 800700c:	4606      	mov	r6, r0
 800700e:	d1d6      	bne.n	8006fbe <_svfiprintf_r+0x176>
 8007010:	89ab      	ldrh	r3, [r5, #12]
 8007012:	065b      	lsls	r3, r3, #25
 8007014:	f53f af2c 	bmi.w	8006e70 <_svfiprintf_r+0x28>
 8007018:	9809      	ldr	r0, [sp, #36]	; 0x24
 800701a:	b01d      	add	sp, #116	; 0x74
 800701c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007020:	ab03      	add	r3, sp, #12
 8007022:	9300      	str	r3, [sp, #0]
 8007024:	462a      	mov	r2, r5
 8007026:	4b06      	ldr	r3, [pc, #24]	; (8007040 <_svfiprintf_r+0x1f8>)
 8007028:	a904      	add	r1, sp, #16
 800702a:	4638      	mov	r0, r7
 800702c:	f7fe fa6a 	bl	8005504 <_printf_i>
 8007030:	e7eb      	b.n	800700a <_svfiprintf_r+0x1c2>
 8007032:	bf00      	nop
 8007034:	08007f0c 	.word	0x08007f0c
 8007038:	08007f16 	.word	0x08007f16
 800703c:	08004fbd 	.word	0x08004fbd
 8007040:	08006d91 	.word	0x08006d91
 8007044:	08007f12 	.word	0x08007f12

08007048 <_sbrk_r>:
 8007048:	b538      	push	{r3, r4, r5, lr}
 800704a:	4d06      	ldr	r5, [pc, #24]	; (8007064 <_sbrk_r+0x1c>)
 800704c:	2300      	movs	r3, #0
 800704e:	4604      	mov	r4, r0
 8007050:	4608      	mov	r0, r1
 8007052:	602b      	str	r3, [r5, #0]
 8007054:	f7fa fcbc 	bl	80019d0 <_sbrk>
 8007058:	1c43      	adds	r3, r0, #1
 800705a:	d102      	bne.n	8007062 <_sbrk_r+0x1a>
 800705c:	682b      	ldr	r3, [r5, #0]
 800705e:	b103      	cbz	r3, 8007062 <_sbrk_r+0x1a>
 8007060:	6023      	str	r3, [r4, #0]
 8007062:	bd38      	pop	{r3, r4, r5, pc}
 8007064:	200003ec 	.word	0x200003ec

08007068 <__assert_func>:
 8007068:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800706a:	4614      	mov	r4, r2
 800706c:	461a      	mov	r2, r3
 800706e:	4b09      	ldr	r3, [pc, #36]	; (8007094 <__assert_func+0x2c>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4605      	mov	r5, r0
 8007074:	68d8      	ldr	r0, [r3, #12]
 8007076:	b14c      	cbz	r4, 800708c <__assert_func+0x24>
 8007078:	4b07      	ldr	r3, [pc, #28]	; (8007098 <__assert_func+0x30>)
 800707a:	9100      	str	r1, [sp, #0]
 800707c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007080:	4906      	ldr	r1, [pc, #24]	; (800709c <__assert_func+0x34>)
 8007082:	462b      	mov	r3, r5
 8007084:	f000 f80e 	bl	80070a4 <fiprintf>
 8007088:	f000 faac 	bl	80075e4 <abort>
 800708c:	4b04      	ldr	r3, [pc, #16]	; (80070a0 <__assert_func+0x38>)
 800708e:	461c      	mov	r4, r3
 8007090:	e7f3      	b.n	800707a <__assert_func+0x12>
 8007092:	bf00      	nop
 8007094:	2000000c 	.word	0x2000000c
 8007098:	08007f1d 	.word	0x08007f1d
 800709c:	08007f2a 	.word	0x08007f2a
 80070a0:	08007f58 	.word	0x08007f58

080070a4 <fiprintf>:
 80070a4:	b40e      	push	{r1, r2, r3}
 80070a6:	b503      	push	{r0, r1, lr}
 80070a8:	4601      	mov	r1, r0
 80070aa:	ab03      	add	r3, sp, #12
 80070ac:	4805      	ldr	r0, [pc, #20]	; (80070c4 <fiprintf+0x20>)
 80070ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80070b2:	6800      	ldr	r0, [r0, #0]
 80070b4:	9301      	str	r3, [sp, #4]
 80070b6:	f000 f897 	bl	80071e8 <_vfiprintf_r>
 80070ba:	b002      	add	sp, #8
 80070bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80070c0:	b003      	add	sp, #12
 80070c2:	4770      	bx	lr
 80070c4:	2000000c 	.word	0x2000000c

080070c8 <__ascii_mbtowc>:
 80070c8:	b082      	sub	sp, #8
 80070ca:	b901      	cbnz	r1, 80070ce <__ascii_mbtowc+0x6>
 80070cc:	a901      	add	r1, sp, #4
 80070ce:	b142      	cbz	r2, 80070e2 <__ascii_mbtowc+0x1a>
 80070d0:	b14b      	cbz	r3, 80070e6 <__ascii_mbtowc+0x1e>
 80070d2:	7813      	ldrb	r3, [r2, #0]
 80070d4:	600b      	str	r3, [r1, #0]
 80070d6:	7812      	ldrb	r2, [r2, #0]
 80070d8:	1e10      	subs	r0, r2, #0
 80070da:	bf18      	it	ne
 80070dc:	2001      	movne	r0, #1
 80070de:	b002      	add	sp, #8
 80070e0:	4770      	bx	lr
 80070e2:	4610      	mov	r0, r2
 80070e4:	e7fb      	b.n	80070de <__ascii_mbtowc+0x16>
 80070e6:	f06f 0001 	mvn.w	r0, #1
 80070ea:	e7f8      	b.n	80070de <__ascii_mbtowc+0x16>

080070ec <memmove>:
 80070ec:	4288      	cmp	r0, r1
 80070ee:	b510      	push	{r4, lr}
 80070f0:	eb01 0402 	add.w	r4, r1, r2
 80070f4:	d902      	bls.n	80070fc <memmove+0x10>
 80070f6:	4284      	cmp	r4, r0
 80070f8:	4623      	mov	r3, r4
 80070fa:	d807      	bhi.n	800710c <memmove+0x20>
 80070fc:	1e43      	subs	r3, r0, #1
 80070fe:	42a1      	cmp	r1, r4
 8007100:	d008      	beq.n	8007114 <memmove+0x28>
 8007102:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007106:	f803 2f01 	strb.w	r2, [r3, #1]!
 800710a:	e7f8      	b.n	80070fe <memmove+0x12>
 800710c:	4402      	add	r2, r0
 800710e:	4601      	mov	r1, r0
 8007110:	428a      	cmp	r2, r1
 8007112:	d100      	bne.n	8007116 <memmove+0x2a>
 8007114:	bd10      	pop	{r4, pc}
 8007116:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800711a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800711e:	e7f7      	b.n	8007110 <memmove+0x24>

08007120 <__malloc_lock>:
 8007120:	4801      	ldr	r0, [pc, #4]	; (8007128 <__malloc_lock+0x8>)
 8007122:	f000 bc1f 	b.w	8007964 <__retarget_lock_acquire_recursive>
 8007126:	bf00      	nop
 8007128:	200003f0 	.word	0x200003f0

0800712c <__malloc_unlock>:
 800712c:	4801      	ldr	r0, [pc, #4]	; (8007134 <__malloc_unlock+0x8>)
 800712e:	f000 bc1a 	b.w	8007966 <__retarget_lock_release_recursive>
 8007132:	bf00      	nop
 8007134:	200003f0 	.word	0x200003f0

08007138 <_realloc_r>:
 8007138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800713c:	4680      	mov	r8, r0
 800713e:	4614      	mov	r4, r2
 8007140:	460e      	mov	r6, r1
 8007142:	b921      	cbnz	r1, 800714e <_realloc_r+0x16>
 8007144:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007148:	4611      	mov	r1, r2
 800714a:	f7ff bdad 	b.w	8006ca8 <_malloc_r>
 800714e:	b92a      	cbnz	r2, 800715c <_realloc_r+0x24>
 8007150:	f7ff fd3e 	bl	8006bd0 <_free_r>
 8007154:	4625      	mov	r5, r4
 8007156:	4628      	mov	r0, r5
 8007158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800715c:	f000 fc6a 	bl	8007a34 <_malloc_usable_size_r>
 8007160:	4284      	cmp	r4, r0
 8007162:	4607      	mov	r7, r0
 8007164:	d802      	bhi.n	800716c <_realloc_r+0x34>
 8007166:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800716a:	d812      	bhi.n	8007192 <_realloc_r+0x5a>
 800716c:	4621      	mov	r1, r4
 800716e:	4640      	mov	r0, r8
 8007170:	f7ff fd9a 	bl	8006ca8 <_malloc_r>
 8007174:	4605      	mov	r5, r0
 8007176:	2800      	cmp	r0, #0
 8007178:	d0ed      	beq.n	8007156 <_realloc_r+0x1e>
 800717a:	42bc      	cmp	r4, r7
 800717c:	4622      	mov	r2, r4
 800717e:	4631      	mov	r1, r6
 8007180:	bf28      	it	cs
 8007182:	463a      	movcs	r2, r7
 8007184:	f7fd fe64 	bl	8004e50 <memcpy>
 8007188:	4631      	mov	r1, r6
 800718a:	4640      	mov	r0, r8
 800718c:	f7ff fd20 	bl	8006bd0 <_free_r>
 8007190:	e7e1      	b.n	8007156 <_realloc_r+0x1e>
 8007192:	4635      	mov	r5, r6
 8007194:	e7df      	b.n	8007156 <_realloc_r+0x1e>

08007196 <__sfputc_r>:
 8007196:	6893      	ldr	r3, [r2, #8]
 8007198:	3b01      	subs	r3, #1
 800719a:	2b00      	cmp	r3, #0
 800719c:	b410      	push	{r4}
 800719e:	6093      	str	r3, [r2, #8]
 80071a0:	da08      	bge.n	80071b4 <__sfputc_r+0x1e>
 80071a2:	6994      	ldr	r4, [r2, #24]
 80071a4:	42a3      	cmp	r3, r4
 80071a6:	db01      	blt.n	80071ac <__sfputc_r+0x16>
 80071a8:	290a      	cmp	r1, #10
 80071aa:	d103      	bne.n	80071b4 <__sfputc_r+0x1e>
 80071ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071b0:	f000 b94a 	b.w	8007448 <__swbuf_r>
 80071b4:	6813      	ldr	r3, [r2, #0]
 80071b6:	1c58      	adds	r0, r3, #1
 80071b8:	6010      	str	r0, [r2, #0]
 80071ba:	7019      	strb	r1, [r3, #0]
 80071bc:	4608      	mov	r0, r1
 80071be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071c2:	4770      	bx	lr

080071c4 <__sfputs_r>:
 80071c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071c6:	4606      	mov	r6, r0
 80071c8:	460f      	mov	r7, r1
 80071ca:	4614      	mov	r4, r2
 80071cc:	18d5      	adds	r5, r2, r3
 80071ce:	42ac      	cmp	r4, r5
 80071d0:	d101      	bne.n	80071d6 <__sfputs_r+0x12>
 80071d2:	2000      	movs	r0, #0
 80071d4:	e007      	b.n	80071e6 <__sfputs_r+0x22>
 80071d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071da:	463a      	mov	r2, r7
 80071dc:	4630      	mov	r0, r6
 80071de:	f7ff ffda 	bl	8007196 <__sfputc_r>
 80071e2:	1c43      	adds	r3, r0, #1
 80071e4:	d1f3      	bne.n	80071ce <__sfputs_r+0xa>
 80071e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080071e8 <_vfiprintf_r>:
 80071e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ec:	460d      	mov	r5, r1
 80071ee:	b09d      	sub	sp, #116	; 0x74
 80071f0:	4614      	mov	r4, r2
 80071f2:	4698      	mov	r8, r3
 80071f4:	4606      	mov	r6, r0
 80071f6:	b118      	cbz	r0, 8007200 <_vfiprintf_r+0x18>
 80071f8:	6983      	ldr	r3, [r0, #24]
 80071fa:	b90b      	cbnz	r3, 8007200 <_vfiprintf_r+0x18>
 80071fc:	f000 fb14 	bl	8007828 <__sinit>
 8007200:	4b89      	ldr	r3, [pc, #548]	; (8007428 <_vfiprintf_r+0x240>)
 8007202:	429d      	cmp	r5, r3
 8007204:	d11b      	bne.n	800723e <_vfiprintf_r+0x56>
 8007206:	6875      	ldr	r5, [r6, #4]
 8007208:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800720a:	07d9      	lsls	r1, r3, #31
 800720c:	d405      	bmi.n	800721a <_vfiprintf_r+0x32>
 800720e:	89ab      	ldrh	r3, [r5, #12]
 8007210:	059a      	lsls	r2, r3, #22
 8007212:	d402      	bmi.n	800721a <_vfiprintf_r+0x32>
 8007214:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007216:	f000 fba5 	bl	8007964 <__retarget_lock_acquire_recursive>
 800721a:	89ab      	ldrh	r3, [r5, #12]
 800721c:	071b      	lsls	r3, r3, #28
 800721e:	d501      	bpl.n	8007224 <_vfiprintf_r+0x3c>
 8007220:	692b      	ldr	r3, [r5, #16]
 8007222:	b9eb      	cbnz	r3, 8007260 <_vfiprintf_r+0x78>
 8007224:	4629      	mov	r1, r5
 8007226:	4630      	mov	r0, r6
 8007228:	f000 f96e 	bl	8007508 <__swsetup_r>
 800722c:	b1c0      	cbz	r0, 8007260 <_vfiprintf_r+0x78>
 800722e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007230:	07dc      	lsls	r4, r3, #31
 8007232:	d50e      	bpl.n	8007252 <_vfiprintf_r+0x6a>
 8007234:	f04f 30ff 	mov.w	r0, #4294967295
 8007238:	b01d      	add	sp, #116	; 0x74
 800723a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800723e:	4b7b      	ldr	r3, [pc, #492]	; (800742c <_vfiprintf_r+0x244>)
 8007240:	429d      	cmp	r5, r3
 8007242:	d101      	bne.n	8007248 <_vfiprintf_r+0x60>
 8007244:	68b5      	ldr	r5, [r6, #8]
 8007246:	e7df      	b.n	8007208 <_vfiprintf_r+0x20>
 8007248:	4b79      	ldr	r3, [pc, #484]	; (8007430 <_vfiprintf_r+0x248>)
 800724a:	429d      	cmp	r5, r3
 800724c:	bf08      	it	eq
 800724e:	68f5      	ldreq	r5, [r6, #12]
 8007250:	e7da      	b.n	8007208 <_vfiprintf_r+0x20>
 8007252:	89ab      	ldrh	r3, [r5, #12]
 8007254:	0598      	lsls	r0, r3, #22
 8007256:	d4ed      	bmi.n	8007234 <_vfiprintf_r+0x4c>
 8007258:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800725a:	f000 fb84 	bl	8007966 <__retarget_lock_release_recursive>
 800725e:	e7e9      	b.n	8007234 <_vfiprintf_r+0x4c>
 8007260:	2300      	movs	r3, #0
 8007262:	9309      	str	r3, [sp, #36]	; 0x24
 8007264:	2320      	movs	r3, #32
 8007266:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800726a:	f8cd 800c 	str.w	r8, [sp, #12]
 800726e:	2330      	movs	r3, #48	; 0x30
 8007270:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007434 <_vfiprintf_r+0x24c>
 8007274:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007278:	f04f 0901 	mov.w	r9, #1
 800727c:	4623      	mov	r3, r4
 800727e:	469a      	mov	sl, r3
 8007280:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007284:	b10a      	cbz	r2, 800728a <_vfiprintf_r+0xa2>
 8007286:	2a25      	cmp	r2, #37	; 0x25
 8007288:	d1f9      	bne.n	800727e <_vfiprintf_r+0x96>
 800728a:	ebba 0b04 	subs.w	fp, sl, r4
 800728e:	d00b      	beq.n	80072a8 <_vfiprintf_r+0xc0>
 8007290:	465b      	mov	r3, fp
 8007292:	4622      	mov	r2, r4
 8007294:	4629      	mov	r1, r5
 8007296:	4630      	mov	r0, r6
 8007298:	f7ff ff94 	bl	80071c4 <__sfputs_r>
 800729c:	3001      	adds	r0, #1
 800729e:	f000 80aa 	beq.w	80073f6 <_vfiprintf_r+0x20e>
 80072a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072a4:	445a      	add	r2, fp
 80072a6:	9209      	str	r2, [sp, #36]	; 0x24
 80072a8:	f89a 3000 	ldrb.w	r3, [sl]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	f000 80a2 	beq.w	80073f6 <_vfiprintf_r+0x20e>
 80072b2:	2300      	movs	r3, #0
 80072b4:	f04f 32ff 	mov.w	r2, #4294967295
 80072b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072bc:	f10a 0a01 	add.w	sl, sl, #1
 80072c0:	9304      	str	r3, [sp, #16]
 80072c2:	9307      	str	r3, [sp, #28]
 80072c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80072c8:	931a      	str	r3, [sp, #104]	; 0x68
 80072ca:	4654      	mov	r4, sl
 80072cc:	2205      	movs	r2, #5
 80072ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072d2:	4858      	ldr	r0, [pc, #352]	; (8007434 <_vfiprintf_r+0x24c>)
 80072d4:	f7f8 ffa4 	bl	8000220 <memchr>
 80072d8:	9a04      	ldr	r2, [sp, #16]
 80072da:	b9d8      	cbnz	r0, 8007314 <_vfiprintf_r+0x12c>
 80072dc:	06d1      	lsls	r1, r2, #27
 80072de:	bf44      	itt	mi
 80072e0:	2320      	movmi	r3, #32
 80072e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072e6:	0713      	lsls	r3, r2, #28
 80072e8:	bf44      	itt	mi
 80072ea:	232b      	movmi	r3, #43	; 0x2b
 80072ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072f0:	f89a 3000 	ldrb.w	r3, [sl]
 80072f4:	2b2a      	cmp	r3, #42	; 0x2a
 80072f6:	d015      	beq.n	8007324 <_vfiprintf_r+0x13c>
 80072f8:	9a07      	ldr	r2, [sp, #28]
 80072fa:	4654      	mov	r4, sl
 80072fc:	2000      	movs	r0, #0
 80072fe:	f04f 0c0a 	mov.w	ip, #10
 8007302:	4621      	mov	r1, r4
 8007304:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007308:	3b30      	subs	r3, #48	; 0x30
 800730a:	2b09      	cmp	r3, #9
 800730c:	d94e      	bls.n	80073ac <_vfiprintf_r+0x1c4>
 800730e:	b1b0      	cbz	r0, 800733e <_vfiprintf_r+0x156>
 8007310:	9207      	str	r2, [sp, #28]
 8007312:	e014      	b.n	800733e <_vfiprintf_r+0x156>
 8007314:	eba0 0308 	sub.w	r3, r0, r8
 8007318:	fa09 f303 	lsl.w	r3, r9, r3
 800731c:	4313      	orrs	r3, r2
 800731e:	9304      	str	r3, [sp, #16]
 8007320:	46a2      	mov	sl, r4
 8007322:	e7d2      	b.n	80072ca <_vfiprintf_r+0xe2>
 8007324:	9b03      	ldr	r3, [sp, #12]
 8007326:	1d19      	adds	r1, r3, #4
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	9103      	str	r1, [sp, #12]
 800732c:	2b00      	cmp	r3, #0
 800732e:	bfbb      	ittet	lt
 8007330:	425b      	neglt	r3, r3
 8007332:	f042 0202 	orrlt.w	r2, r2, #2
 8007336:	9307      	strge	r3, [sp, #28]
 8007338:	9307      	strlt	r3, [sp, #28]
 800733a:	bfb8      	it	lt
 800733c:	9204      	strlt	r2, [sp, #16]
 800733e:	7823      	ldrb	r3, [r4, #0]
 8007340:	2b2e      	cmp	r3, #46	; 0x2e
 8007342:	d10c      	bne.n	800735e <_vfiprintf_r+0x176>
 8007344:	7863      	ldrb	r3, [r4, #1]
 8007346:	2b2a      	cmp	r3, #42	; 0x2a
 8007348:	d135      	bne.n	80073b6 <_vfiprintf_r+0x1ce>
 800734a:	9b03      	ldr	r3, [sp, #12]
 800734c:	1d1a      	adds	r2, r3, #4
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	9203      	str	r2, [sp, #12]
 8007352:	2b00      	cmp	r3, #0
 8007354:	bfb8      	it	lt
 8007356:	f04f 33ff 	movlt.w	r3, #4294967295
 800735a:	3402      	adds	r4, #2
 800735c:	9305      	str	r3, [sp, #20]
 800735e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007444 <_vfiprintf_r+0x25c>
 8007362:	7821      	ldrb	r1, [r4, #0]
 8007364:	2203      	movs	r2, #3
 8007366:	4650      	mov	r0, sl
 8007368:	f7f8 ff5a 	bl	8000220 <memchr>
 800736c:	b140      	cbz	r0, 8007380 <_vfiprintf_r+0x198>
 800736e:	2340      	movs	r3, #64	; 0x40
 8007370:	eba0 000a 	sub.w	r0, r0, sl
 8007374:	fa03 f000 	lsl.w	r0, r3, r0
 8007378:	9b04      	ldr	r3, [sp, #16]
 800737a:	4303      	orrs	r3, r0
 800737c:	3401      	adds	r4, #1
 800737e:	9304      	str	r3, [sp, #16]
 8007380:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007384:	482c      	ldr	r0, [pc, #176]	; (8007438 <_vfiprintf_r+0x250>)
 8007386:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800738a:	2206      	movs	r2, #6
 800738c:	f7f8 ff48 	bl	8000220 <memchr>
 8007390:	2800      	cmp	r0, #0
 8007392:	d03f      	beq.n	8007414 <_vfiprintf_r+0x22c>
 8007394:	4b29      	ldr	r3, [pc, #164]	; (800743c <_vfiprintf_r+0x254>)
 8007396:	bb1b      	cbnz	r3, 80073e0 <_vfiprintf_r+0x1f8>
 8007398:	9b03      	ldr	r3, [sp, #12]
 800739a:	3307      	adds	r3, #7
 800739c:	f023 0307 	bic.w	r3, r3, #7
 80073a0:	3308      	adds	r3, #8
 80073a2:	9303      	str	r3, [sp, #12]
 80073a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073a6:	443b      	add	r3, r7
 80073a8:	9309      	str	r3, [sp, #36]	; 0x24
 80073aa:	e767      	b.n	800727c <_vfiprintf_r+0x94>
 80073ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80073b0:	460c      	mov	r4, r1
 80073b2:	2001      	movs	r0, #1
 80073b4:	e7a5      	b.n	8007302 <_vfiprintf_r+0x11a>
 80073b6:	2300      	movs	r3, #0
 80073b8:	3401      	adds	r4, #1
 80073ba:	9305      	str	r3, [sp, #20]
 80073bc:	4619      	mov	r1, r3
 80073be:	f04f 0c0a 	mov.w	ip, #10
 80073c2:	4620      	mov	r0, r4
 80073c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073c8:	3a30      	subs	r2, #48	; 0x30
 80073ca:	2a09      	cmp	r2, #9
 80073cc:	d903      	bls.n	80073d6 <_vfiprintf_r+0x1ee>
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d0c5      	beq.n	800735e <_vfiprintf_r+0x176>
 80073d2:	9105      	str	r1, [sp, #20]
 80073d4:	e7c3      	b.n	800735e <_vfiprintf_r+0x176>
 80073d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80073da:	4604      	mov	r4, r0
 80073dc:	2301      	movs	r3, #1
 80073de:	e7f0      	b.n	80073c2 <_vfiprintf_r+0x1da>
 80073e0:	ab03      	add	r3, sp, #12
 80073e2:	9300      	str	r3, [sp, #0]
 80073e4:	462a      	mov	r2, r5
 80073e6:	4b16      	ldr	r3, [pc, #88]	; (8007440 <_vfiprintf_r+0x258>)
 80073e8:	a904      	add	r1, sp, #16
 80073ea:	4630      	mov	r0, r6
 80073ec:	f7fd fde6 	bl	8004fbc <_printf_float>
 80073f0:	4607      	mov	r7, r0
 80073f2:	1c78      	adds	r0, r7, #1
 80073f4:	d1d6      	bne.n	80073a4 <_vfiprintf_r+0x1bc>
 80073f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80073f8:	07d9      	lsls	r1, r3, #31
 80073fa:	d405      	bmi.n	8007408 <_vfiprintf_r+0x220>
 80073fc:	89ab      	ldrh	r3, [r5, #12]
 80073fe:	059a      	lsls	r2, r3, #22
 8007400:	d402      	bmi.n	8007408 <_vfiprintf_r+0x220>
 8007402:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007404:	f000 faaf 	bl	8007966 <__retarget_lock_release_recursive>
 8007408:	89ab      	ldrh	r3, [r5, #12]
 800740a:	065b      	lsls	r3, r3, #25
 800740c:	f53f af12 	bmi.w	8007234 <_vfiprintf_r+0x4c>
 8007410:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007412:	e711      	b.n	8007238 <_vfiprintf_r+0x50>
 8007414:	ab03      	add	r3, sp, #12
 8007416:	9300      	str	r3, [sp, #0]
 8007418:	462a      	mov	r2, r5
 800741a:	4b09      	ldr	r3, [pc, #36]	; (8007440 <_vfiprintf_r+0x258>)
 800741c:	a904      	add	r1, sp, #16
 800741e:	4630      	mov	r0, r6
 8007420:	f7fe f870 	bl	8005504 <_printf_i>
 8007424:	e7e4      	b.n	80073f0 <_vfiprintf_r+0x208>
 8007426:	bf00      	nop
 8007428:	08008084 	.word	0x08008084
 800742c:	080080a4 	.word	0x080080a4
 8007430:	08008064 	.word	0x08008064
 8007434:	08007f0c 	.word	0x08007f0c
 8007438:	08007f16 	.word	0x08007f16
 800743c:	08004fbd 	.word	0x08004fbd
 8007440:	080071c5 	.word	0x080071c5
 8007444:	08007f12 	.word	0x08007f12

08007448 <__swbuf_r>:
 8007448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800744a:	460e      	mov	r6, r1
 800744c:	4614      	mov	r4, r2
 800744e:	4605      	mov	r5, r0
 8007450:	b118      	cbz	r0, 800745a <__swbuf_r+0x12>
 8007452:	6983      	ldr	r3, [r0, #24]
 8007454:	b90b      	cbnz	r3, 800745a <__swbuf_r+0x12>
 8007456:	f000 f9e7 	bl	8007828 <__sinit>
 800745a:	4b21      	ldr	r3, [pc, #132]	; (80074e0 <__swbuf_r+0x98>)
 800745c:	429c      	cmp	r4, r3
 800745e:	d12b      	bne.n	80074b8 <__swbuf_r+0x70>
 8007460:	686c      	ldr	r4, [r5, #4]
 8007462:	69a3      	ldr	r3, [r4, #24]
 8007464:	60a3      	str	r3, [r4, #8]
 8007466:	89a3      	ldrh	r3, [r4, #12]
 8007468:	071a      	lsls	r2, r3, #28
 800746a:	d52f      	bpl.n	80074cc <__swbuf_r+0x84>
 800746c:	6923      	ldr	r3, [r4, #16]
 800746e:	b36b      	cbz	r3, 80074cc <__swbuf_r+0x84>
 8007470:	6923      	ldr	r3, [r4, #16]
 8007472:	6820      	ldr	r0, [r4, #0]
 8007474:	1ac0      	subs	r0, r0, r3
 8007476:	6963      	ldr	r3, [r4, #20]
 8007478:	b2f6      	uxtb	r6, r6
 800747a:	4283      	cmp	r3, r0
 800747c:	4637      	mov	r7, r6
 800747e:	dc04      	bgt.n	800748a <__swbuf_r+0x42>
 8007480:	4621      	mov	r1, r4
 8007482:	4628      	mov	r0, r5
 8007484:	f000 f93c 	bl	8007700 <_fflush_r>
 8007488:	bb30      	cbnz	r0, 80074d8 <__swbuf_r+0x90>
 800748a:	68a3      	ldr	r3, [r4, #8]
 800748c:	3b01      	subs	r3, #1
 800748e:	60a3      	str	r3, [r4, #8]
 8007490:	6823      	ldr	r3, [r4, #0]
 8007492:	1c5a      	adds	r2, r3, #1
 8007494:	6022      	str	r2, [r4, #0]
 8007496:	701e      	strb	r6, [r3, #0]
 8007498:	6963      	ldr	r3, [r4, #20]
 800749a:	3001      	adds	r0, #1
 800749c:	4283      	cmp	r3, r0
 800749e:	d004      	beq.n	80074aa <__swbuf_r+0x62>
 80074a0:	89a3      	ldrh	r3, [r4, #12]
 80074a2:	07db      	lsls	r3, r3, #31
 80074a4:	d506      	bpl.n	80074b4 <__swbuf_r+0x6c>
 80074a6:	2e0a      	cmp	r6, #10
 80074a8:	d104      	bne.n	80074b4 <__swbuf_r+0x6c>
 80074aa:	4621      	mov	r1, r4
 80074ac:	4628      	mov	r0, r5
 80074ae:	f000 f927 	bl	8007700 <_fflush_r>
 80074b2:	b988      	cbnz	r0, 80074d8 <__swbuf_r+0x90>
 80074b4:	4638      	mov	r0, r7
 80074b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074b8:	4b0a      	ldr	r3, [pc, #40]	; (80074e4 <__swbuf_r+0x9c>)
 80074ba:	429c      	cmp	r4, r3
 80074bc:	d101      	bne.n	80074c2 <__swbuf_r+0x7a>
 80074be:	68ac      	ldr	r4, [r5, #8]
 80074c0:	e7cf      	b.n	8007462 <__swbuf_r+0x1a>
 80074c2:	4b09      	ldr	r3, [pc, #36]	; (80074e8 <__swbuf_r+0xa0>)
 80074c4:	429c      	cmp	r4, r3
 80074c6:	bf08      	it	eq
 80074c8:	68ec      	ldreq	r4, [r5, #12]
 80074ca:	e7ca      	b.n	8007462 <__swbuf_r+0x1a>
 80074cc:	4621      	mov	r1, r4
 80074ce:	4628      	mov	r0, r5
 80074d0:	f000 f81a 	bl	8007508 <__swsetup_r>
 80074d4:	2800      	cmp	r0, #0
 80074d6:	d0cb      	beq.n	8007470 <__swbuf_r+0x28>
 80074d8:	f04f 37ff 	mov.w	r7, #4294967295
 80074dc:	e7ea      	b.n	80074b4 <__swbuf_r+0x6c>
 80074de:	bf00      	nop
 80074e0:	08008084 	.word	0x08008084
 80074e4:	080080a4 	.word	0x080080a4
 80074e8:	08008064 	.word	0x08008064

080074ec <__ascii_wctomb>:
 80074ec:	b149      	cbz	r1, 8007502 <__ascii_wctomb+0x16>
 80074ee:	2aff      	cmp	r2, #255	; 0xff
 80074f0:	bf85      	ittet	hi
 80074f2:	238a      	movhi	r3, #138	; 0x8a
 80074f4:	6003      	strhi	r3, [r0, #0]
 80074f6:	700a      	strbls	r2, [r1, #0]
 80074f8:	f04f 30ff 	movhi.w	r0, #4294967295
 80074fc:	bf98      	it	ls
 80074fe:	2001      	movls	r0, #1
 8007500:	4770      	bx	lr
 8007502:	4608      	mov	r0, r1
 8007504:	4770      	bx	lr
	...

08007508 <__swsetup_r>:
 8007508:	4b32      	ldr	r3, [pc, #200]	; (80075d4 <__swsetup_r+0xcc>)
 800750a:	b570      	push	{r4, r5, r6, lr}
 800750c:	681d      	ldr	r5, [r3, #0]
 800750e:	4606      	mov	r6, r0
 8007510:	460c      	mov	r4, r1
 8007512:	b125      	cbz	r5, 800751e <__swsetup_r+0x16>
 8007514:	69ab      	ldr	r3, [r5, #24]
 8007516:	b913      	cbnz	r3, 800751e <__swsetup_r+0x16>
 8007518:	4628      	mov	r0, r5
 800751a:	f000 f985 	bl	8007828 <__sinit>
 800751e:	4b2e      	ldr	r3, [pc, #184]	; (80075d8 <__swsetup_r+0xd0>)
 8007520:	429c      	cmp	r4, r3
 8007522:	d10f      	bne.n	8007544 <__swsetup_r+0x3c>
 8007524:	686c      	ldr	r4, [r5, #4]
 8007526:	89a3      	ldrh	r3, [r4, #12]
 8007528:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800752c:	0719      	lsls	r1, r3, #28
 800752e:	d42c      	bmi.n	800758a <__swsetup_r+0x82>
 8007530:	06dd      	lsls	r5, r3, #27
 8007532:	d411      	bmi.n	8007558 <__swsetup_r+0x50>
 8007534:	2309      	movs	r3, #9
 8007536:	6033      	str	r3, [r6, #0]
 8007538:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800753c:	81a3      	strh	r3, [r4, #12]
 800753e:	f04f 30ff 	mov.w	r0, #4294967295
 8007542:	e03e      	b.n	80075c2 <__swsetup_r+0xba>
 8007544:	4b25      	ldr	r3, [pc, #148]	; (80075dc <__swsetup_r+0xd4>)
 8007546:	429c      	cmp	r4, r3
 8007548:	d101      	bne.n	800754e <__swsetup_r+0x46>
 800754a:	68ac      	ldr	r4, [r5, #8]
 800754c:	e7eb      	b.n	8007526 <__swsetup_r+0x1e>
 800754e:	4b24      	ldr	r3, [pc, #144]	; (80075e0 <__swsetup_r+0xd8>)
 8007550:	429c      	cmp	r4, r3
 8007552:	bf08      	it	eq
 8007554:	68ec      	ldreq	r4, [r5, #12]
 8007556:	e7e6      	b.n	8007526 <__swsetup_r+0x1e>
 8007558:	0758      	lsls	r0, r3, #29
 800755a:	d512      	bpl.n	8007582 <__swsetup_r+0x7a>
 800755c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800755e:	b141      	cbz	r1, 8007572 <__swsetup_r+0x6a>
 8007560:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007564:	4299      	cmp	r1, r3
 8007566:	d002      	beq.n	800756e <__swsetup_r+0x66>
 8007568:	4630      	mov	r0, r6
 800756a:	f7ff fb31 	bl	8006bd0 <_free_r>
 800756e:	2300      	movs	r3, #0
 8007570:	6363      	str	r3, [r4, #52]	; 0x34
 8007572:	89a3      	ldrh	r3, [r4, #12]
 8007574:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007578:	81a3      	strh	r3, [r4, #12]
 800757a:	2300      	movs	r3, #0
 800757c:	6063      	str	r3, [r4, #4]
 800757e:	6923      	ldr	r3, [r4, #16]
 8007580:	6023      	str	r3, [r4, #0]
 8007582:	89a3      	ldrh	r3, [r4, #12]
 8007584:	f043 0308 	orr.w	r3, r3, #8
 8007588:	81a3      	strh	r3, [r4, #12]
 800758a:	6923      	ldr	r3, [r4, #16]
 800758c:	b94b      	cbnz	r3, 80075a2 <__swsetup_r+0x9a>
 800758e:	89a3      	ldrh	r3, [r4, #12]
 8007590:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007594:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007598:	d003      	beq.n	80075a2 <__swsetup_r+0x9a>
 800759a:	4621      	mov	r1, r4
 800759c:	4630      	mov	r0, r6
 800759e:	f000 fa09 	bl	80079b4 <__smakebuf_r>
 80075a2:	89a0      	ldrh	r0, [r4, #12]
 80075a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80075a8:	f010 0301 	ands.w	r3, r0, #1
 80075ac:	d00a      	beq.n	80075c4 <__swsetup_r+0xbc>
 80075ae:	2300      	movs	r3, #0
 80075b0:	60a3      	str	r3, [r4, #8]
 80075b2:	6963      	ldr	r3, [r4, #20]
 80075b4:	425b      	negs	r3, r3
 80075b6:	61a3      	str	r3, [r4, #24]
 80075b8:	6923      	ldr	r3, [r4, #16]
 80075ba:	b943      	cbnz	r3, 80075ce <__swsetup_r+0xc6>
 80075bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80075c0:	d1ba      	bne.n	8007538 <__swsetup_r+0x30>
 80075c2:	bd70      	pop	{r4, r5, r6, pc}
 80075c4:	0781      	lsls	r1, r0, #30
 80075c6:	bf58      	it	pl
 80075c8:	6963      	ldrpl	r3, [r4, #20]
 80075ca:	60a3      	str	r3, [r4, #8]
 80075cc:	e7f4      	b.n	80075b8 <__swsetup_r+0xb0>
 80075ce:	2000      	movs	r0, #0
 80075d0:	e7f7      	b.n	80075c2 <__swsetup_r+0xba>
 80075d2:	bf00      	nop
 80075d4:	2000000c 	.word	0x2000000c
 80075d8:	08008084 	.word	0x08008084
 80075dc:	080080a4 	.word	0x080080a4
 80075e0:	08008064 	.word	0x08008064

080075e4 <abort>:
 80075e4:	b508      	push	{r3, lr}
 80075e6:	2006      	movs	r0, #6
 80075e8:	f000 fa54 	bl	8007a94 <raise>
 80075ec:	2001      	movs	r0, #1
 80075ee:	f7fa f977 	bl	80018e0 <_exit>
	...

080075f4 <__sflush_r>:
 80075f4:	898a      	ldrh	r2, [r1, #12]
 80075f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075fa:	4605      	mov	r5, r0
 80075fc:	0710      	lsls	r0, r2, #28
 80075fe:	460c      	mov	r4, r1
 8007600:	d458      	bmi.n	80076b4 <__sflush_r+0xc0>
 8007602:	684b      	ldr	r3, [r1, #4]
 8007604:	2b00      	cmp	r3, #0
 8007606:	dc05      	bgt.n	8007614 <__sflush_r+0x20>
 8007608:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800760a:	2b00      	cmp	r3, #0
 800760c:	dc02      	bgt.n	8007614 <__sflush_r+0x20>
 800760e:	2000      	movs	r0, #0
 8007610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007614:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007616:	2e00      	cmp	r6, #0
 8007618:	d0f9      	beq.n	800760e <__sflush_r+0x1a>
 800761a:	2300      	movs	r3, #0
 800761c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007620:	682f      	ldr	r7, [r5, #0]
 8007622:	602b      	str	r3, [r5, #0]
 8007624:	d032      	beq.n	800768c <__sflush_r+0x98>
 8007626:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007628:	89a3      	ldrh	r3, [r4, #12]
 800762a:	075a      	lsls	r2, r3, #29
 800762c:	d505      	bpl.n	800763a <__sflush_r+0x46>
 800762e:	6863      	ldr	r3, [r4, #4]
 8007630:	1ac0      	subs	r0, r0, r3
 8007632:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007634:	b10b      	cbz	r3, 800763a <__sflush_r+0x46>
 8007636:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007638:	1ac0      	subs	r0, r0, r3
 800763a:	2300      	movs	r3, #0
 800763c:	4602      	mov	r2, r0
 800763e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007640:	6a21      	ldr	r1, [r4, #32]
 8007642:	4628      	mov	r0, r5
 8007644:	47b0      	blx	r6
 8007646:	1c43      	adds	r3, r0, #1
 8007648:	89a3      	ldrh	r3, [r4, #12]
 800764a:	d106      	bne.n	800765a <__sflush_r+0x66>
 800764c:	6829      	ldr	r1, [r5, #0]
 800764e:	291d      	cmp	r1, #29
 8007650:	d82c      	bhi.n	80076ac <__sflush_r+0xb8>
 8007652:	4a2a      	ldr	r2, [pc, #168]	; (80076fc <__sflush_r+0x108>)
 8007654:	40ca      	lsrs	r2, r1
 8007656:	07d6      	lsls	r6, r2, #31
 8007658:	d528      	bpl.n	80076ac <__sflush_r+0xb8>
 800765a:	2200      	movs	r2, #0
 800765c:	6062      	str	r2, [r4, #4]
 800765e:	04d9      	lsls	r1, r3, #19
 8007660:	6922      	ldr	r2, [r4, #16]
 8007662:	6022      	str	r2, [r4, #0]
 8007664:	d504      	bpl.n	8007670 <__sflush_r+0x7c>
 8007666:	1c42      	adds	r2, r0, #1
 8007668:	d101      	bne.n	800766e <__sflush_r+0x7a>
 800766a:	682b      	ldr	r3, [r5, #0]
 800766c:	b903      	cbnz	r3, 8007670 <__sflush_r+0x7c>
 800766e:	6560      	str	r0, [r4, #84]	; 0x54
 8007670:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007672:	602f      	str	r7, [r5, #0]
 8007674:	2900      	cmp	r1, #0
 8007676:	d0ca      	beq.n	800760e <__sflush_r+0x1a>
 8007678:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800767c:	4299      	cmp	r1, r3
 800767e:	d002      	beq.n	8007686 <__sflush_r+0x92>
 8007680:	4628      	mov	r0, r5
 8007682:	f7ff faa5 	bl	8006bd0 <_free_r>
 8007686:	2000      	movs	r0, #0
 8007688:	6360      	str	r0, [r4, #52]	; 0x34
 800768a:	e7c1      	b.n	8007610 <__sflush_r+0x1c>
 800768c:	6a21      	ldr	r1, [r4, #32]
 800768e:	2301      	movs	r3, #1
 8007690:	4628      	mov	r0, r5
 8007692:	47b0      	blx	r6
 8007694:	1c41      	adds	r1, r0, #1
 8007696:	d1c7      	bne.n	8007628 <__sflush_r+0x34>
 8007698:	682b      	ldr	r3, [r5, #0]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d0c4      	beq.n	8007628 <__sflush_r+0x34>
 800769e:	2b1d      	cmp	r3, #29
 80076a0:	d001      	beq.n	80076a6 <__sflush_r+0xb2>
 80076a2:	2b16      	cmp	r3, #22
 80076a4:	d101      	bne.n	80076aa <__sflush_r+0xb6>
 80076a6:	602f      	str	r7, [r5, #0]
 80076a8:	e7b1      	b.n	800760e <__sflush_r+0x1a>
 80076aa:	89a3      	ldrh	r3, [r4, #12]
 80076ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076b0:	81a3      	strh	r3, [r4, #12]
 80076b2:	e7ad      	b.n	8007610 <__sflush_r+0x1c>
 80076b4:	690f      	ldr	r7, [r1, #16]
 80076b6:	2f00      	cmp	r7, #0
 80076b8:	d0a9      	beq.n	800760e <__sflush_r+0x1a>
 80076ba:	0793      	lsls	r3, r2, #30
 80076bc:	680e      	ldr	r6, [r1, #0]
 80076be:	bf08      	it	eq
 80076c0:	694b      	ldreq	r3, [r1, #20]
 80076c2:	600f      	str	r7, [r1, #0]
 80076c4:	bf18      	it	ne
 80076c6:	2300      	movne	r3, #0
 80076c8:	eba6 0807 	sub.w	r8, r6, r7
 80076cc:	608b      	str	r3, [r1, #8]
 80076ce:	f1b8 0f00 	cmp.w	r8, #0
 80076d2:	dd9c      	ble.n	800760e <__sflush_r+0x1a>
 80076d4:	6a21      	ldr	r1, [r4, #32]
 80076d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80076d8:	4643      	mov	r3, r8
 80076da:	463a      	mov	r2, r7
 80076dc:	4628      	mov	r0, r5
 80076de:	47b0      	blx	r6
 80076e0:	2800      	cmp	r0, #0
 80076e2:	dc06      	bgt.n	80076f2 <__sflush_r+0xfe>
 80076e4:	89a3      	ldrh	r3, [r4, #12]
 80076e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076ea:	81a3      	strh	r3, [r4, #12]
 80076ec:	f04f 30ff 	mov.w	r0, #4294967295
 80076f0:	e78e      	b.n	8007610 <__sflush_r+0x1c>
 80076f2:	4407      	add	r7, r0
 80076f4:	eba8 0800 	sub.w	r8, r8, r0
 80076f8:	e7e9      	b.n	80076ce <__sflush_r+0xda>
 80076fa:	bf00      	nop
 80076fc:	20400001 	.word	0x20400001

08007700 <_fflush_r>:
 8007700:	b538      	push	{r3, r4, r5, lr}
 8007702:	690b      	ldr	r3, [r1, #16]
 8007704:	4605      	mov	r5, r0
 8007706:	460c      	mov	r4, r1
 8007708:	b913      	cbnz	r3, 8007710 <_fflush_r+0x10>
 800770a:	2500      	movs	r5, #0
 800770c:	4628      	mov	r0, r5
 800770e:	bd38      	pop	{r3, r4, r5, pc}
 8007710:	b118      	cbz	r0, 800771a <_fflush_r+0x1a>
 8007712:	6983      	ldr	r3, [r0, #24]
 8007714:	b90b      	cbnz	r3, 800771a <_fflush_r+0x1a>
 8007716:	f000 f887 	bl	8007828 <__sinit>
 800771a:	4b14      	ldr	r3, [pc, #80]	; (800776c <_fflush_r+0x6c>)
 800771c:	429c      	cmp	r4, r3
 800771e:	d11b      	bne.n	8007758 <_fflush_r+0x58>
 8007720:	686c      	ldr	r4, [r5, #4]
 8007722:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d0ef      	beq.n	800770a <_fflush_r+0xa>
 800772a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800772c:	07d0      	lsls	r0, r2, #31
 800772e:	d404      	bmi.n	800773a <_fflush_r+0x3a>
 8007730:	0599      	lsls	r1, r3, #22
 8007732:	d402      	bmi.n	800773a <_fflush_r+0x3a>
 8007734:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007736:	f000 f915 	bl	8007964 <__retarget_lock_acquire_recursive>
 800773a:	4628      	mov	r0, r5
 800773c:	4621      	mov	r1, r4
 800773e:	f7ff ff59 	bl	80075f4 <__sflush_r>
 8007742:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007744:	07da      	lsls	r2, r3, #31
 8007746:	4605      	mov	r5, r0
 8007748:	d4e0      	bmi.n	800770c <_fflush_r+0xc>
 800774a:	89a3      	ldrh	r3, [r4, #12]
 800774c:	059b      	lsls	r3, r3, #22
 800774e:	d4dd      	bmi.n	800770c <_fflush_r+0xc>
 8007750:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007752:	f000 f908 	bl	8007966 <__retarget_lock_release_recursive>
 8007756:	e7d9      	b.n	800770c <_fflush_r+0xc>
 8007758:	4b05      	ldr	r3, [pc, #20]	; (8007770 <_fflush_r+0x70>)
 800775a:	429c      	cmp	r4, r3
 800775c:	d101      	bne.n	8007762 <_fflush_r+0x62>
 800775e:	68ac      	ldr	r4, [r5, #8]
 8007760:	e7df      	b.n	8007722 <_fflush_r+0x22>
 8007762:	4b04      	ldr	r3, [pc, #16]	; (8007774 <_fflush_r+0x74>)
 8007764:	429c      	cmp	r4, r3
 8007766:	bf08      	it	eq
 8007768:	68ec      	ldreq	r4, [r5, #12]
 800776a:	e7da      	b.n	8007722 <_fflush_r+0x22>
 800776c:	08008084 	.word	0x08008084
 8007770:	080080a4 	.word	0x080080a4
 8007774:	08008064 	.word	0x08008064

08007778 <std>:
 8007778:	2300      	movs	r3, #0
 800777a:	b510      	push	{r4, lr}
 800777c:	4604      	mov	r4, r0
 800777e:	e9c0 3300 	strd	r3, r3, [r0]
 8007782:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007786:	6083      	str	r3, [r0, #8]
 8007788:	8181      	strh	r1, [r0, #12]
 800778a:	6643      	str	r3, [r0, #100]	; 0x64
 800778c:	81c2      	strh	r2, [r0, #14]
 800778e:	6183      	str	r3, [r0, #24]
 8007790:	4619      	mov	r1, r3
 8007792:	2208      	movs	r2, #8
 8007794:	305c      	adds	r0, #92	; 0x5c
 8007796:	f7fd fb69 	bl	8004e6c <memset>
 800779a:	4b05      	ldr	r3, [pc, #20]	; (80077b0 <std+0x38>)
 800779c:	6263      	str	r3, [r4, #36]	; 0x24
 800779e:	4b05      	ldr	r3, [pc, #20]	; (80077b4 <std+0x3c>)
 80077a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80077a2:	4b05      	ldr	r3, [pc, #20]	; (80077b8 <std+0x40>)
 80077a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80077a6:	4b05      	ldr	r3, [pc, #20]	; (80077bc <std+0x44>)
 80077a8:	6224      	str	r4, [r4, #32]
 80077aa:	6323      	str	r3, [r4, #48]	; 0x30
 80077ac:	bd10      	pop	{r4, pc}
 80077ae:	bf00      	nop
 80077b0:	08007acd 	.word	0x08007acd
 80077b4:	08007aef 	.word	0x08007aef
 80077b8:	08007b27 	.word	0x08007b27
 80077bc:	08007b4b 	.word	0x08007b4b

080077c0 <_cleanup_r>:
 80077c0:	4901      	ldr	r1, [pc, #4]	; (80077c8 <_cleanup_r+0x8>)
 80077c2:	f000 b8af 	b.w	8007924 <_fwalk_reent>
 80077c6:	bf00      	nop
 80077c8:	08007701 	.word	0x08007701

080077cc <__sfmoreglue>:
 80077cc:	b570      	push	{r4, r5, r6, lr}
 80077ce:	2268      	movs	r2, #104	; 0x68
 80077d0:	1e4d      	subs	r5, r1, #1
 80077d2:	4355      	muls	r5, r2
 80077d4:	460e      	mov	r6, r1
 80077d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80077da:	f7ff fa65 	bl	8006ca8 <_malloc_r>
 80077de:	4604      	mov	r4, r0
 80077e0:	b140      	cbz	r0, 80077f4 <__sfmoreglue+0x28>
 80077e2:	2100      	movs	r1, #0
 80077e4:	e9c0 1600 	strd	r1, r6, [r0]
 80077e8:	300c      	adds	r0, #12
 80077ea:	60a0      	str	r0, [r4, #8]
 80077ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80077f0:	f7fd fb3c 	bl	8004e6c <memset>
 80077f4:	4620      	mov	r0, r4
 80077f6:	bd70      	pop	{r4, r5, r6, pc}

080077f8 <__sfp_lock_acquire>:
 80077f8:	4801      	ldr	r0, [pc, #4]	; (8007800 <__sfp_lock_acquire+0x8>)
 80077fa:	f000 b8b3 	b.w	8007964 <__retarget_lock_acquire_recursive>
 80077fe:	bf00      	nop
 8007800:	200003f1 	.word	0x200003f1

08007804 <__sfp_lock_release>:
 8007804:	4801      	ldr	r0, [pc, #4]	; (800780c <__sfp_lock_release+0x8>)
 8007806:	f000 b8ae 	b.w	8007966 <__retarget_lock_release_recursive>
 800780a:	bf00      	nop
 800780c:	200003f1 	.word	0x200003f1

08007810 <__sinit_lock_acquire>:
 8007810:	4801      	ldr	r0, [pc, #4]	; (8007818 <__sinit_lock_acquire+0x8>)
 8007812:	f000 b8a7 	b.w	8007964 <__retarget_lock_acquire_recursive>
 8007816:	bf00      	nop
 8007818:	200003f2 	.word	0x200003f2

0800781c <__sinit_lock_release>:
 800781c:	4801      	ldr	r0, [pc, #4]	; (8007824 <__sinit_lock_release+0x8>)
 800781e:	f000 b8a2 	b.w	8007966 <__retarget_lock_release_recursive>
 8007822:	bf00      	nop
 8007824:	200003f2 	.word	0x200003f2

08007828 <__sinit>:
 8007828:	b510      	push	{r4, lr}
 800782a:	4604      	mov	r4, r0
 800782c:	f7ff fff0 	bl	8007810 <__sinit_lock_acquire>
 8007830:	69a3      	ldr	r3, [r4, #24]
 8007832:	b11b      	cbz	r3, 800783c <__sinit+0x14>
 8007834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007838:	f7ff bff0 	b.w	800781c <__sinit_lock_release>
 800783c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007840:	6523      	str	r3, [r4, #80]	; 0x50
 8007842:	4b13      	ldr	r3, [pc, #76]	; (8007890 <__sinit+0x68>)
 8007844:	4a13      	ldr	r2, [pc, #76]	; (8007894 <__sinit+0x6c>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	62a2      	str	r2, [r4, #40]	; 0x28
 800784a:	42a3      	cmp	r3, r4
 800784c:	bf04      	itt	eq
 800784e:	2301      	moveq	r3, #1
 8007850:	61a3      	streq	r3, [r4, #24]
 8007852:	4620      	mov	r0, r4
 8007854:	f000 f820 	bl	8007898 <__sfp>
 8007858:	6060      	str	r0, [r4, #4]
 800785a:	4620      	mov	r0, r4
 800785c:	f000 f81c 	bl	8007898 <__sfp>
 8007860:	60a0      	str	r0, [r4, #8]
 8007862:	4620      	mov	r0, r4
 8007864:	f000 f818 	bl	8007898 <__sfp>
 8007868:	2200      	movs	r2, #0
 800786a:	60e0      	str	r0, [r4, #12]
 800786c:	2104      	movs	r1, #4
 800786e:	6860      	ldr	r0, [r4, #4]
 8007870:	f7ff ff82 	bl	8007778 <std>
 8007874:	68a0      	ldr	r0, [r4, #8]
 8007876:	2201      	movs	r2, #1
 8007878:	2109      	movs	r1, #9
 800787a:	f7ff ff7d 	bl	8007778 <std>
 800787e:	68e0      	ldr	r0, [r4, #12]
 8007880:	2202      	movs	r2, #2
 8007882:	2112      	movs	r1, #18
 8007884:	f7ff ff78 	bl	8007778 <std>
 8007888:	2301      	movs	r3, #1
 800788a:	61a3      	str	r3, [r4, #24]
 800788c:	e7d2      	b.n	8007834 <__sinit+0xc>
 800788e:	bf00      	nop
 8007890:	08007ce8 	.word	0x08007ce8
 8007894:	080077c1 	.word	0x080077c1

08007898 <__sfp>:
 8007898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800789a:	4607      	mov	r7, r0
 800789c:	f7ff ffac 	bl	80077f8 <__sfp_lock_acquire>
 80078a0:	4b1e      	ldr	r3, [pc, #120]	; (800791c <__sfp+0x84>)
 80078a2:	681e      	ldr	r6, [r3, #0]
 80078a4:	69b3      	ldr	r3, [r6, #24]
 80078a6:	b913      	cbnz	r3, 80078ae <__sfp+0x16>
 80078a8:	4630      	mov	r0, r6
 80078aa:	f7ff ffbd 	bl	8007828 <__sinit>
 80078ae:	3648      	adds	r6, #72	; 0x48
 80078b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80078b4:	3b01      	subs	r3, #1
 80078b6:	d503      	bpl.n	80078c0 <__sfp+0x28>
 80078b8:	6833      	ldr	r3, [r6, #0]
 80078ba:	b30b      	cbz	r3, 8007900 <__sfp+0x68>
 80078bc:	6836      	ldr	r6, [r6, #0]
 80078be:	e7f7      	b.n	80078b0 <__sfp+0x18>
 80078c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80078c4:	b9d5      	cbnz	r5, 80078fc <__sfp+0x64>
 80078c6:	4b16      	ldr	r3, [pc, #88]	; (8007920 <__sfp+0x88>)
 80078c8:	60e3      	str	r3, [r4, #12]
 80078ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80078ce:	6665      	str	r5, [r4, #100]	; 0x64
 80078d0:	f000 f847 	bl	8007962 <__retarget_lock_init_recursive>
 80078d4:	f7ff ff96 	bl	8007804 <__sfp_lock_release>
 80078d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80078dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80078e0:	6025      	str	r5, [r4, #0]
 80078e2:	61a5      	str	r5, [r4, #24]
 80078e4:	2208      	movs	r2, #8
 80078e6:	4629      	mov	r1, r5
 80078e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80078ec:	f7fd fabe 	bl	8004e6c <memset>
 80078f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80078f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80078f8:	4620      	mov	r0, r4
 80078fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078fc:	3468      	adds	r4, #104	; 0x68
 80078fe:	e7d9      	b.n	80078b4 <__sfp+0x1c>
 8007900:	2104      	movs	r1, #4
 8007902:	4638      	mov	r0, r7
 8007904:	f7ff ff62 	bl	80077cc <__sfmoreglue>
 8007908:	4604      	mov	r4, r0
 800790a:	6030      	str	r0, [r6, #0]
 800790c:	2800      	cmp	r0, #0
 800790e:	d1d5      	bne.n	80078bc <__sfp+0x24>
 8007910:	f7ff ff78 	bl	8007804 <__sfp_lock_release>
 8007914:	230c      	movs	r3, #12
 8007916:	603b      	str	r3, [r7, #0]
 8007918:	e7ee      	b.n	80078f8 <__sfp+0x60>
 800791a:	bf00      	nop
 800791c:	08007ce8 	.word	0x08007ce8
 8007920:	ffff0001 	.word	0xffff0001

08007924 <_fwalk_reent>:
 8007924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007928:	4606      	mov	r6, r0
 800792a:	4688      	mov	r8, r1
 800792c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007930:	2700      	movs	r7, #0
 8007932:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007936:	f1b9 0901 	subs.w	r9, r9, #1
 800793a:	d505      	bpl.n	8007948 <_fwalk_reent+0x24>
 800793c:	6824      	ldr	r4, [r4, #0]
 800793e:	2c00      	cmp	r4, #0
 8007940:	d1f7      	bne.n	8007932 <_fwalk_reent+0xe>
 8007942:	4638      	mov	r0, r7
 8007944:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007948:	89ab      	ldrh	r3, [r5, #12]
 800794a:	2b01      	cmp	r3, #1
 800794c:	d907      	bls.n	800795e <_fwalk_reent+0x3a>
 800794e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007952:	3301      	adds	r3, #1
 8007954:	d003      	beq.n	800795e <_fwalk_reent+0x3a>
 8007956:	4629      	mov	r1, r5
 8007958:	4630      	mov	r0, r6
 800795a:	47c0      	blx	r8
 800795c:	4307      	orrs	r7, r0
 800795e:	3568      	adds	r5, #104	; 0x68
 8007960:	e7e9      	b.n	8007936 <_fwalk_reent+0x12>

08007962 <__retarget_lock_init_recursive>:
 8007962:	4770      	bx	lr

08007964 <__retarget_lock_acquire_recursive>:
 8007964:	4770      	bx	lr

08007966 <__retarget_lock_release_recursive>:
 8007966:	4770      	bx	lr

08007968 <__swhatbuf_r>:
 8007968:	b570      	push	{r4, r5, r6, lr}
 800796a:	460e      	mov	r6, r1
 800796c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007970:	2900      	cmp	r1, #0
 8007972:	b096      	sub	sp, #88	; 0x58
 8007974:	4614      	mov	r4, r2
 8007976:	461d      	mov	r5, r3
 8007978:	da08      	bge.n	800798c <__swhatbuf_r+0x24>
 800797a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800797e:	2200      	movs	r2, #0
 8007980:	602a      	str	r2, [r5, #0]
 8007982:	061a      	lsls	r2, r3, #24
 8007984:	d410      	bmi.n	80079a8 <__swhatbuf_r+0x40>
 8007986:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800798a:	e00e      	b.n	80079aa <__swhatbuf_r+0x42>
 800798c:	466a      	mov	r2, sp
 800798e:	f000 f903 	bl	8007b98 <_fstat_r>
 8007992:	2800      	cmp	r0, #0
 8007994:	dbf1      	blt.n	800797a <__swhatbuf_r+0x12>
 8007996:	9a01      	ldr	r2, [sp, #4]
 8007998:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800799c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80079a0:	425a      	negs	r2, r3
 80079a2:	415a      	adcs	r2, r3
 80079a4:	602a      	str	r2, [r5, #0]
 80079a6:	e7ee      	b.n	8007986 <__swhatbuf_r+0x1e>
 80079a8:	2340      	movs	r3, #64	; 0x40
 80079aa:	2000      	movs	r0, #0
 80079ac:	6023      	str	r3, [r4, #0]
 80079ae:	b016      	add	sp, #88	; 0x58
 80079b0:	bd70      	pop	{r4, r5, r6, pc}
	...

080079b4 <__smakebuf_r>:
 80079b4:	898b      	ldrh	r3, [r1, #12]
 80079b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80079b8:	079d      	lsls	r5, r3, #30
 80079ba:	4606      	mov	r6, r0
 80079bc:	460c      	mov	r4, r1
 80079be:	d507      	bpl.n	80079d0 <__smakebuf_r+0x1c>
 80079c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80079c4:	6023      	str	r3, [r4, #0]
 80079c6:	6123      	str	r3, [r4, #16]
 80079c8:	2301      	movs	r3, #1
 80079ca:	6163      	str	r3, [r4, #20]
 80079cc:	b002      	add	sp, #8
 80079ce:	bd70      	pop	{r4, r5, r6, pc}
 80079d0:	ab01      	add	r3, sp, #4
 80079d2:	466a      	mov	r2, sp
 80079d4:	f7ff ffc8 	bl	8007968 <__swhatbuf_r>
 80079d8:	9900      	ldr	r1, [sp, #0]
 80079da:	4605      	mov	r5, r0
 80079dc:	4630      	mov	r0, r6
 80079de:	f7ff f963 	bl	8006ca8 <_malloc_r>
 80079e2:	b948      	cbnz	r0, 80079f8 <__smakebuf_r+0x44>
 80079e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079e8:	059a      	lsls	r2, r3, #22
 80079ea:	d4ef      	bmi.n	80079cc <__smakebuf_r+0x18>
 80079ec:	f023 0303 	bic.w	r3, r3, #3
 80079f0:	f043 0302 	orr.w	r3, r3, #2
 80079f4:	81a3      	strh	r3, [r4, #12]
 80079f6:	e7e3      	b.n	80079c0 <__smakebuf_r+0xc>
 80079f8:	4b0d      	ldr	r3, [pc, #52]	; (8007a30 <__smakebuf_r+0x7c>)
 80079fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80079fc:	89a3      	ldrh	r3, [r4, #12]
 80079fe:	6020      	str	r0, [r4, #0]
 8007a00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a04:	81a3      	strh	r3, [r4, #12]
 8007a06:	9b00      	ldr	r3, [sp, #0]
 8007a08:	6163      	str	r3, [r4, #20]
 8007a0a:	9b01      	ldr	r3, [sp, #4]
 8007a0c:	6120      	str	r0, [r4, #16]
 8007a0e:	b15b      	cbz	r3, 8007a28 <__smakebuf_r+0x74>
 8007a10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a14:	4630      	mov	r0, r6
 8007a16:	f000 f8d1 	bl	8007bbc <_isatty_r>
 8007a1a:	b128      	cbz	r0, 8007a28 <__smakebuf_r+0x74>
 8007a1c:	89a3      	ldrh	r3, [r4, #12]
 8007a1e:	f023 0303 	bic.w	r3, r3, #3
 8007a22:	f043 0301 	orr.w	r3, r3, #1
 8007a26:	81a3      	strh	r3, [r4, #12]
 8007a28:	89a0      	ldrh	r0, [r4, #12]
 8007a2a:	4305      	orrs	r5, r0
 8007a2c:	81a5      	strh	r5, [r4, #12]
 8007a2e:	e7cd      	b.n	80079cc <__smakebuf_r+0x18>
 8007a30:	080077c1 	.word	0x080077c1

08007a34 <_malloc_usable_size_r>:
 8007a34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a38:	1f18      	subs	r0, r3, #4
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	bfbc      	itt	lt
 8007a3e:	580b      	ldrlt	r3, [r1, r0]
 8007a40:	18c0      	addlt	r0, r0, r3
 8007a42:	4770      	bx	lr

08007a44 <_raise_r>:
 8007a44:	291f      	cmp	r1, #31
 8007a46:	b538      	push	{r3, r4, r5, lr}
 8007a48:	4604      	mov	r4, r0
 8007a4a:	460d      	mov	r5, r1
 8007a4c:	d904      	bls.n	8007a58 <_raise_r+0x14>
 8007a4e:	2316      	movs	r3, #22
 8007a50:	6003      	str	r3, [r0, #0]
 8007a52:	f04f 30ff 	mov.w	r0, #4294967295
 8007a56:	bd38      	pop	{r3, r4, r5, pc}
 8007a58:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007a5a:	b112      	cbz	r2, 8007a62 <_raise_r+0x1e>
 8007a5c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007a60:	b94b      	cbnz	r3, 8007a76 <_raise_r+0x32>
 8007a62:	4620      	mov	r0, r4
 8007a64:	f000 f830 	bl	8007ac8 <_getpid_r>
 8007a68:	462a      	mov	r2, r5
 8007a6a:	4601      	mov	r1, r0
 8007a6c:	4620      	mov	r0, r4
 8007a6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a72:	f000 b817 	b.w	8007aa4 <_kill_r>
 8007a76:	2b01      	cmp	r3, #1
 8007a78:	d00a      	beq.n	8007a90 <_raise_r+0x4c>
 8007a7a:	1c59      	adds	r1, r3, #1
 8007a7c:	d103      	bne.n	8007a86 <_raise_r+0x42>
 8007a7e:	2316      	movs	r3, #22
 8007a80:	6003      	str	r3, [r0, #0]
 8007a82:	2001      	movs	r0, #1
 8007a84:	e7e7      	b.n	8007a56 <_raise_r+0x12>
 8007a86:	2400      	movs	r4, #0
 8007a88:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007a8c:	4628      	mov	r0, r5
 8007a8e:	4798      	blx	r3
 8007a90:	2000      	movs	r0, #0
 8007a92:	e7e0      	b.n	8007a56 <_raise_r+0x12>

08007a94 <raise>:
 8007a94:	4b02      	ldr	r3, [pc, #8]	; (8007aa0 <raise+0xc>)
 8007a96:	4601      	mov	r1, r0
 8007a98:	6818      	ldr	r0, [r3, #0]
 8007a9a:	f7ff bfd3 	b.w	8007a44 <_raise_r>
 8007a9e:	bf00      	nop
 8007aa0:	2000000c 	.word	0x2000000c

08007aa4 <_kill_r>:
 8007aa4:	b538      	push	{r3, r4, r5, lr}
 8007aa6:	4d07      	ldr	r5, [pc, #28]	; (8007ac4 <_kill_r+0x20>)
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	4604      	mov	r4, r0
 8007aac:	4608      	mov	r0, r1
 8007aae:	4611      	mov	r1, r2
 8007ab0:	602b      	str	r3, [r5, #0]
 8007ab2:	f7f9 ff05 	bl	80018c0 <_kill>
 8007ab6:	1c43      	adds	r3, r0, #1
 8007ab8:	d102      	bne.n	8007ac0 <_kill_r+0x1c>
 8007aba:	682b      	ldr	r3, [r5, #0]
 8007abc:	b103      	cbz	r3, 8007ac0 <_kill_r+0x1c>
 8007abe:	6023      	str	r3, [r4, #0]
 8007ac0:	bd38      	pop	{r3, r4, r5, pc}
 8007ac2:	bf00      	nop
 8007ac4:	200003ec 	.word	0x200003ec

08007ac8 <_getpid_r>:
 8007ac8:	f7f9 bef2 	b.w	80018b0 <_getpid>

08007acc <__sread>:
 8007acc:	b510      	push	{r4, lr}
 8007ace:	460c      	mov	r4, r1
 8007ad0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ad4:	f000 f894 	bl	8007c00 <_read_r>
 8007ad8:	2800      	cmp	r0, #0
 8007ada:	bfab      	itete	ge
 8007adc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007ade:	89a3      	ldrhlt	r3, [r4, #12]
 8007ae0:	181b      	addge	r3, r3, r0
 8007ae2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007ae6:	bfac      	ite	ge
 8007ae8:	6563      	strge	r3, [r4, #84]	; 0x54
 8007aea:	81a3      	strhlt	r3, [r4, #12]
 8007aec:	bd10      	pop	{r4, pc}

08007aee <__swrite>:
 8007aee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007af2:	461f      	mov	r7, r3
 8007af4:	898b      	ldrh	r3, [r1, #12]
 8007af6:	05db      	lsls	r3, r3, #23
 8007af8:	4605      	mov	r5, r0
 8007afa:	460c      	mov	r4, r1
 8007afc:	4616      	mov	r6, r2
 8007afe:	d505      	bpl.n	8007b0c <__swrite+0x1e>
 8007b00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b04:	2302      	movs	r3, #2
 8007b06:	2200      	movs	r2, #0
 8007b08:	f000 f868 	bl	8007bdc <_lseek_r>
 8007b0c:	89a3      	ldrh	r3, [r4, #12]
 8007b0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b16:	81a3      	strh	r3, [r4, #12]
 8007b18:	4632      	mov	r2, r6
 8007b1a:	463b      	mov	r3, r7
 8007b1c:	4628      	mov	r0, r5
 8007b1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b22:	f000 b817 	b.w	8007b54 <_write_r>

08007b26 <__sseek>:
 8007b26:	b510      	push	{r4, lr}
 8007b28:	460c      	mov	r4, r1
 8007b2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b2e:	f000 f855 	bl	8007bdc <_lseek_r>
 8007b32:	1c43      	adds	r3, r0, #1
 8007b34:	89a3      	ldrh	r3, [r4, #12]
 8007b36:	bf15      	itete	ne
 8007b38:	6560      	strne	r0, [r4, #84]	; 0x54
 8007b3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007b3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007b42:	81a3      	strheq	r3, [r4, #12]
 8007b44:	bf18      	it	ne
 8007b46:	81a3      	strhne	r3, [r4, #12]
 8007b48:	bd10      	pop	{r4, pc}

08007b4a <__sclose>:
 8007b4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b4e:	f000 b813 	b.w	8007b78 <_close_r>
	...

08007b54 <_write_r>:
 8007b54:	b538      	push	{r3, r4, r5, lr}
 8007b56:	4d07      	ldr	r5, [pc, #28]	; (8007b74 <_write_r+0x20>)
 8007b58:	4604      	mov	r4, r0
 8007b5a:	4608      	mov	r0, r1
 8007b5c:	4611      	mov	r1, r2
 8007b5e:	2200      	movs	r2, #0
 8007b60:	602a      	str	r2, [r5, #0]
 8007b62:	461a      	mov	r2, r3
 8007b64:	f7f9 fee3 	bl	800192e <_write>
 8007b68:	1c43      	adds	r3, r0, #1
 8007b6a:	d102      	bne.n	8007b72 <_write_r+0x1e>
 8007b6c:	682b      	ldr	r3, [r5, #0]
 8007b6e:	b103      	cbz	r3, 8007b72 <_write_r+0x1e>
 8007b70:	6023      	str	r3, [r4, #0]
 8007b72:	bd38      	pop	{r3, r4, r5, pc}
 8007b74:	200003ec 	.word	0x200003ec

08007b78 <_close_r>:
 8007b78:	b538      	push	{r3, r4, r5, lr}
 8007b7a:	4d06      	ldr	r5, [pc, #24]	; (8007b94 <_close_r+0x1c>)
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	4604      	mov	r4, r0
 8007b80:	4608      	mov	r0, r1
 8007b82:	602b      	str	r3, [r5, #0]
 8007b84:	f7f9 feef 	bl	8001966 <_close>
 8007b88:	1c43      	adds	r3, r0, #1
 8007b8a:	d102      	bne.n	8007b92 <_close_r+0x1a>
 8007b8c:	682b      	ldr	r3, [r5, #0]
 8007b8e:	b103      	cbz	r3, 8007b92 <_close_r+0x1a>
 8007b90:	6023      	str	r3, [r4, #0]
 8007b92:	bd38      	pop	{r3, r4, r5, pc}
 8007b94:	200003ec 	.word	0x200003ec

08007b98 <_fstat_r>:
 8007b98:	b538      	push	{r3, r4, r5, lr}
 8007b9a:	4d07      	ldr	r5, [pc, #28]	; (8007bb8 <_fstat_r+0x20>)
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	4604      	mov	r4, r0
 8007ba0:	4608      	mov	r0, r1
 8007ba2:	4611      	mov	r1, r2
 8007ba4:	602b      	str	r3, [r5, #0]
 8007ba6:	f7f9 feea 	bl	800197e <_fstat>
 8007baa:	1c43      	adds	r3, r0, #1
 8007bac:	d102      	bne.n	8007bb4 <_fstat_r+0x1c>
 8007bae:	682b      	ldr	r3, [r5, #0]
 8007bb0:	b103      	cbz	r3, 8007bb4 <_fstat_r+0x1c>
 8007bb2:	6023      	str	r3, [r4, #0]
 8007bb4:	bd38      	pop	{r3, r4, r5, pc}
 8007bb6:	bf00      	nop
 8007bb8:	200003ec 	.word	0x200003ec

08007bbc <_isatty_r>:
 8007bbc:	b538      	push	{r3, r4, r5, lr}
 8007bbe:	4d06      	ldr	r5, [pc, #24]	; (8007bd8 <_isatty_r+0x1c>)
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	4604      	mov	r4, r0
 8007bc4:	4608      	mov	r0, r1
 8007bc6:	602b      	str	r3, [r5, #0]
 8007bc8:	f7f9 fee9 	bl	800199e <_isatty>
 8007bcc:	1c43      	adds	r3, r0, #1
 8007bce:	d102      	bne.n	8007bd6 <_isatty_r+0x1a>
 8007bd0:	682b      	ldr	r3, [r5, #0]
 8007bd2:	b103      	cbz	r3, 8007bd6 <_isatty_r+0x1a>
 8007bd4:	6023      	str	r3, [r4, #0]
 8007bd6:	bd38      	pop	{r3, r4, r5, pc}
 8007bd8:	200003ec 	.word	0x200003ec

08007bdc <_lseek_r>:
 8007bdc:	b538      	push	{r3, r4, r5, lr}
 8007bde:	4d07      	ldr	r5, [pc, #28]	; (8007bfc <_lseek_r+0x20>)
 8007be0:	4604      	mov	r4, r0
 8007be2:	4608      	mov	r0, r1
 8007be4:	4611      	mov	r1, r2
 8007be6:	2200      	movs	r2, #0
 8007be8:	602a      	str	r2, [r5, #0]
 8007bea:	461a      	mov	r2, r3
 8007bec:	f7f9 fee2 	bl	80019b4 <_lseek>
 8007bf0:	1c43      	adds	r3, r0, #1
 8007bf2:	d102      	bne.n	8007bfa <_lseek_r+0x1e>
 8007bf4:	682b      	ldr	r3, [r5, #0]
 8007bf6:	b103      	cbz	r3, 8007bfa <_lseek_r+0x1e>
 8007bf8:	6023      	str	r3, [r4, #0]
 8007bfa:	bd38      	pop	{r3, r4, r5, pc}
 8007bfc:	200003ec 	.word	0x200003ec

08007c00 <_read_r>:
 8007c00:	b538      	push	{r3, r4, r5, lr}
 8007c02:	4d07      	ldr	r5, [pc, #28]	; (8007c20 <_read_r+0x20>)
 8007c04:	4604      	mov	r4, r0
 8007c06:	4608      	mov	r0, r1
 8007c08:	4611      	mov	r1, r2
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	602a      	str	r2, [r5, #0]
 8007c0e:	461a      	mov	r2, r3
 8007c10:	f7f9 fe70 	bl	80018f4 <_read>
 8007c14:	1c43      	adds	r3, r0, #1
 8007c16:	d102      	bne.n	8007c1e <_read_r+0x1e>
 8007c18:	682b      	ldr	r3, [r5, #0]
 8007c1a:	b103      	cbz	r3, 8007c1e <_read_r+0x1e>
 8007c1c:	6023      	str	r3, [r4, #0]
 8007c1e:	bd38      	pop	{r3, r4, r5, pc}
 8007c20:	200003ec 	.word	0x200003ec

08007c24 <_init>:
 8007c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c26:	bf00      	nop
 8007c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c2a:	bc08      	pop	{r3}
 8007c2c:	469e      	mov	lr, r3
 8007c2e:	4770      	bx	lr

08007c30 <_fini>:
 8007c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c32:	bf00      	nop
 8007c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c36:	bc08      	pop	{r3}
 8007c38:	469e      	mov	lr, r3
 8007c3a:	4770      	bx	lr
