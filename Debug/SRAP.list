
SRAP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000867c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  08008850  08008850  00018850  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c94  08008c94  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008c94  08008c94  00018c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c9c  08008c9c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c9c  08008c9c  00018c9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ca0  08008ca0  00018ca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008ca4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c68  200001dc  08008e80  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000e44  08008e80  00020e44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011b98  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026fc  00000000  00000000  00031da4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa8  00000000  00000000  000344a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000eb0  00000000  00000000  00035448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000237b1  00000000  00000000  000362f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012cff  00000000  00000000  00059aa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df987  00000000  00000000  0006c7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014c12f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005410  00000000  00000000  0014c180  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008834 	.word	0x08008834

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08008834 	.word	0x08008834

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <new_servo>:
 *  Created on: Oct 27, 2022
 *      Author: nsant
 */
#include <Servo.h>

Servo new_servo(TIM_HandleTypeDef* TIM_HandleInstance, uint16_t TIM_Channel, float min_angle, float max_angle, float min_dc, float max_dc, float dc_offset) {
 8000f8c:	b4b0      	push	{r4, r5, r7}
 8000f8e:	b091      	sub	sp, #68	; 0x44
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	61f8      	str	r0, [r7, #28]
 8000f94:	61b9      	str	r1, [r7, #24]
 8000f96:	4613      	mov	r3, r2
 8000f98:	ed87 0a04 	vstr	s0, [r7, #16]
 8000f9c:	edc7 0a03 	vstr	s1, [r7, #12]
 8000fa0:	ed87 1a02 	vstr	s2, [r7, #8]
 8000fa4:	edc7 1a01 	vstr	s3, [r7, #4]
 8000fa8:	ed87 2a00 	vstr	s4, [r7]
 8000fac:	82fb      	strh	r3, [r7, #22]
	Servo s;
	s.TIM_HandleInstance = TIM_HandleInstance;
 8000fae:	69bb      	ldr	r3, [r7, #24]
 8000fb0:	627b      	str	r3, [r7, #36]	; 0x24
	s.TIM_Channel = TIM_Channel;
 8000fb2:	8afb      	ldrh	r3, [r7, #22]
 8000fb4:	853b      	strh	r3, [r7, #40]	; 0x28
	s.max_angle = max_angle;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	633b      	str	r3, [r7, #48]	; 0x30
	s.min_angle = min_angle;
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
	s.max_dc = max_dc;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	63bb      	str	r3, [r7, #56]	; 0x38
	s.min_dc = min_dc;
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	637b      	str	r3, [r7, #52]	; 0x34
	s.dc_offset = dc_offset;
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
	return s;
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	461d      	mov	r5, r3
 8000fce:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8000fd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fd6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000fda:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8000fde:	69f8      	ldr	r0, [r7, #28]
 8000fe0:	3744      	adds	r7, #68	; 0x44
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bcb0      	pop	{r4, r5, r7}
 8000fe6:	4770      	bx	lr

08000fe8 <start_servo>:

void start_servo(Servo *servo) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(servo->TIM_HandleInstance, servo->TIM_Channel);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	889b      	ldrh	r3, [r3, #4]
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4610      	mov	r0, r2
 8000ffc:	f003 faee 	bl	80045dc <HAL_TIM_PWM_Start>
}
 8001000:	bf00      	nop
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <servo_write_deg>:
void stop_servo(Servo *servo) {
	HAL_TIM_PWM_Stop(servo->TIM_HandleInstance, servo->TIM_Channel);
	servo_write_dc(servo, servo->max_dc);
}

void servo_write_deg(Servo *servo, float deg) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	ed87 0a00 	vstr	s0, [r7]
	float dc = (deg - servo->min_angle) * (servo->max_dc - servo->min_dc) / (servo->max_angle - servo->min_angle) + servo->min_dc;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	edd3 7a02 	vldr	s15, [r3, #8]
 800101a:	ed97 7a00 	vldr	s14, [r7]
 800101e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	edd3 6a05 	vldr	s13, [r3, #20]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	edd3 7a04 	vldr	s15, [r3, #16]
 800102e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001032:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	ed93 7a03 	vldr	s14, [r3, #12]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001042:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001046:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001050:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001054:	edc7 7a03 	vstr	s15, [r7, #12]
	servo_write_dc(servo, dc);
 8001058:	ed97 0a03 	vldr	s0, [r7, #12]
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f000 f805 	bl	800106c <servo_write_dc>
}
 8001062:	bf00      	nop
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
	...

0800106c <servo_write_dc>:

void servo_write_dc(Servo *servo, float dc) {
 800106c:	b5b0      	push	{r4, r5, r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	ed87 0a00 	vstr	s0, [r7]
	uint32_t ccr = (uint32_t) roundf(((float) (servo->TIM_HandleInstance->Instance->ARR + 1.0) / 100.0) * (dc + servo->dc_offset) );
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff fa5f 	bl	8000544 <__aeabi_ui2d>
 8001086:	f04f 0200 	mov.w	r2, #0
 800108a:	4b20      	ldr	r3, [pc, #128]	; (800110c <servo_write_dc+0xa0>)
 800108c:	f7ff f91e 	bl	80002cc <__adddf3>
 8001090:	4602      	mov	r2, r0
 8001092:	460b      	mov	r3, r1
 8001094:	4610      	mov	r0, r2
 8001096:	4619      	mov	r1, r3
 8001098:	f7ff fda6 	bl	8000be8 <__aeabi_d2f>
 800109c:	4603      	mov	r3, r0
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff fa72 	bl	8000588 <__aeabi_f2d>
 80010a4:	f04f 0200 	mov.w	r2, #0
 80010a8:	4b19      	ldr	r3, [pc, #100]	; (8001110 <servo_write_dc+0xa4>)
 80010aa:	f7ff fbef 	bl	800088c <__aeabi_ddiv>
 80010ae:	4602      	mov	r2, r0
 80010b0:	460b      	mov	r3, r1
 80010b2:	4614      	mov	r4, r2
 80010b4:	461d      	mov	r5, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	ed93 7a06 	vldr	s14, [r3, #24]
 80010bc:	edd7 7a00 	vldr	s15, [r7]
 80010c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010c4:	ee17 0a90 	vmov	r0, s15
 80010c8:	f7ff fa5e 	bl	8000588 <__aeabi_f2d>
 80010cc:	4602      	mov	r2, r0
 80010ce:	460b      	mov	r3, r1
 80010d0:	4620      	mov	r0, r4
 80010d2:	4629      	mov	r1, r5
 80010d4:	f7ff fab0 	bl	8000638 <__aeabi_dmul>
 80010d8:	4602      	mov	r2, r0
 80010da:	460b      	mov	r3, r1
 80010dc:	4610      	mov	r0, r2
 80010de:	4619      	mov	r1, r3
 80010e0:	f7ff fd82 	bl	8000be8 <__aeabi_d2f>
 80010e4:	4603      	mov	r3, r0
 80010e6:	ee00 3a10 	vmov	s0, r3
 80010ea:	f007 fb7f 	bl	80087ec <roundf>
 80010ee:	eef0 7a40 	vmov.f32	s15, s0
 80010f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010f6:	ee17 3a90 	vmov	r3, s15
 80010fa:	60fb      	str	r3, [r7, #12]
	servo_write_ccr(servo, ccr);
 80010fc:	68f9      	ldr	r1, [r7, #12]
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f000 f808 	bl	8001114 <servo_write_ccr>
}
 8001104:	bf00      	nop
 8001106:	3710      	adds	r7, #16
 8001108:	46bd      	mov	sp, r7
 800110a:	bdb0      	pop	{r4, r5, r7, pc}
 800110c:	3ff00000 	.word	0x3ff00000
 8001110:	40590000 	.word	0x40590000

08001114 <servo_write_ccr>:

void servo_write_ccr(Servo *servo, uint32_t CCR) {
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	6039      	str	r1, [r7, #0]
	__HAL_TIM_SET_COMPARE(servo->TIM_HandleInstance, servo->TIM_Channel, CCR);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	889b      	ldrh	r3, [r3, #4]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d105      	bne.n	8001132 <servo_write_ccr+0x1e>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	683a      	ldr	r2, [r7, #0]
 800112e:	635a      	str	r2, [r3, #52]	; 0x34
 8001130:	e018      	b.n	8001164 <servo_write_ccr+0x50>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	889b      	ldrh	r3, [r3, #4]
 8001136:	2b04      	cmp	r3, #4
 8001138:	d105      	bne.n	8001146 <servo_write_ccr+0x32>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	6393      	str	r3, [r2, #56]	; 0x38
 8001144:	e00e      	b.n	8001164 <servo_write_ccr+0x50>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	889b      	ldrh	r3, [r3, #4]
 800114a:	2b08      	cmp	r3, #8
 800114c:	d105      	bne.n	800115a <servo_write_ccr+0x46>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001158:	e004      	b.n	8001164 <servo_write_ccr+0x50>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	6413      	str	r3, [r2, #64]	; 0x40
	servo->TIM_HandleInstance->Instance->EGR = TIM_EGR_UG;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2201      	movs	r2, #1
 800116c:	615a      	str	r2, [r3, #20]
}
 800116e:	bf00      	nop
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
	...

0800117c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800117c:	b5b0      	push	{r4, r5, r7, lr}
 800117e:	b08a      	sub	sp, #40	; 0x28
 8001180:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001182:	f000 ffc7 	bl	8002114 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001186:	f000 f851 	bl	800122c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800118a:	f000 fa51 	bl	8001630 <MX_GPIO_Init>
  MX_DMA_Init();
 800118e:	f000 fa27 	bl	80015e0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001192:	f000 f9fb 	bl	800158c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001196:	f000 f8b5 	bl	8001304 <MX_ADC1_Init>
  MX_ADC2_Init();
 800119a:	f000 f905 	bl	80013a8 <MX_ADC2_Init>
  MX_TIM1_Init();
 800119e:	f000 f955 	bl	800144c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */


  servo = new_servo(&htim1, TIM_CHANNEL_3, 0.0, 180.0, 1.0, 11.0, 0.8);
 80011a2:	4c1b      	ldr	r4, [pc, #108]	; (8001210 <main+0x94>)
 80011a4:	463b      	mov	r3, r7
 80011a6:	ed9f 2a1b 	vldr	s4, [pc, #108]	; 8001214 <main+0x98>
 80011aa:	eef2 1a06 	vmov.f32	s3, #38	; 0x41300000  11.0
 80011ae:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80011b2:	eddf 0a19 	vldr	s1, [pc, #100]	; 8001218 <main+0x9c>
 80011b6:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800121c <main+0xa0>
 80011ba:	2208      	movs	r2, #8
 80011bc:	4918      	ldr	r1, [pc, #96]	; (8001220 <main+0xa4>)
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff fee4 	bl	8000f8c <new_servo>
 80011c4:	4625      	mov	r5, r4
 80011c6:	463c      	mov	r4, r7
 80011c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011cc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80011d0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  start_servo(&servo);
 80011d4:	480e      	ldr	r0, [pc, #56]	; (8001210 <main+0x94>)
 80011d6:	f7ff ff07 	bl	8000fe8 <start_servo>
	while (1)
	{
		//HAL_ADC_Start_DMA(&hadc2, (uint32_t*) adc2_buf, ADC2_BUF_LEN);

		// Read Samples from MYOWARE using DMA
		emg_read_loop();
 80011da:	f000 fb9f 	bl	800191c <emg_read_loop>

		// Normalize the EMG Signal
		float emg_val = normalize_emg(adc1_buf);
 80011de:	4811      	ldr	r0, [pc, #68]	; (8001224 <main+0xa8>)
 80011e0:	f000 fbb4 	bl	800194c <normalize_emg>
 80011e4:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

		// Map the EMG Signal to an Angle and move servo
		move_servo_by_emg(emg_val);
 80011e8:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80011ec:	f000 fc1e 	bl	8001a2c <move_servo_by_emg>

		// Light the PIN for DEBUG
		light_pin(emg_val > TRESHOLD);
 80011f0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80011f4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001228 <main+0xac>
 80011f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001200:	bfcc      	ite	gt
 8001202:	2301      	movgt	r3, #1
 8001204:	2300      	movle	r3, #0
 8001206:	b2db      	uxtb	r3, r3
 8001208:	4618      	mov	r0, r3
 800120a:	f000 fb27 	bl	800185c <light_pin>
	{
 800120e:	e7e4      	b.n	80011da <main+0x5e>
 8001210:	20000e10 	.word	0x20000e10
 8001214:	3f4ccccd 	.word	0x3f4ccccd
 8001218:	43340000 	.word	0x43340000
 800121c:	00000000 	.word	0x00000000
 8001220:	20000348 	.word	0x20000348
 8001224:	2000043c 	.word	0x2000043c
 8001228:	42a00000 	.word	0x42a00000

0800122c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b094      	sub	sp, #80	; 0x50
 8001230:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001232:	f107 031c 	add.w	r3, r7, #28
 8001236:	2234      	movs	r2, #52	; 0x34
 8001238:	2100      	movs	r1, #0
 800123a:	4618      	mov	r0, r3
 800123c:	f004 fbf8 	bl	8005a30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001240:	f107 0308 	add.w	r3, r7, #8
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001250:	2300      	movs	r3, #0
 8001252:	607b      	str	r3, [r7, #4]
 8001254:	4b29      	ldr	r3, [pc, #164]	; (80012fc <SystemClock_Config+0xd0>)
 8001256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001258:	4a28      	ldr	r2, [pc, #160]	; (80012fc <SystemClock_Config+0xd0>)
 800125a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800125e:	6413      	str	r3, [r2, #64]	; 0x40
 8001260:	4b26      	ldr	r3, [pc, #152]	; (80012fc <SystemClock_Config+0xd0>)
 8001262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001264:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001268:	607b      	str	r3, [r7, #4]
 800126a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800126c:	2300      	movs	r3, #0
 800126e:	603b      	str	r3, [r7, #0]
 8001270:	4b23      	ldr	r3, [pc, #140]	; (8001300 <SystemClock_Config+0xd4>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001278:	4a21      	ldr	r2, [pc, #132]	; (8001300 <SystemClock_Config+0xd4>)
 800127a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800127e:	6013      	str	r3, [r2, #0]
 8001280:	4b1f      	ldr	r3, [pc, #124]	; (8001300 <SystemClock_Config+0xd4>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001288:	603b      	str	r3, [r7, #0]
 800128a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800128c:	2302      	movs	r3, #2
 800128e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001290:	2301      	movs	r3, #1
 8001292:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001294:	2310      	movs	r3, #16
 8001296:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001298:	2302      	movs	r3, #2
 800129a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800129c:	2300      	movs	r3, #0
 800129e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012a0:	2308      	movs	r3, #8
 80012a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 80012a4:	2354      	movs	r3, #84	; 0x54
 80012a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012a8:	2302      	movs	r3, #2
 80012aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80012ac:	2302      	movs	r3, #2
 80012ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80012b0:	2302      	movs	r3, #2
 80012b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012b4:	f107 031c 	add.w	r3, r7, #28
 80012b8:	4618      	mov	r0, r3
 80012ba:	f002 fe49 	bl	8003f50 <HAL_RCC_OscConfig>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80012c4:	f000 fc1a 	bl	8001afc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012c8:	230f      	movs	r3, #15
 80012ca:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012cc:	2302      	movs	r3, #2
 80012ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012d0:	2300      	movs	r3, #0
 80012d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012da:	2300      	movs	r3, #0
 80012dc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012de:	f107 0308 	add.w	r3, r7, #8
 80012e2:	2102      	movs	r1, #2
 80012e4:	4618      	mov	r0, r3
 80012e6:	f002 fae9 	bl	80038bc <HAL_RCC_ClockConfig>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80012f0:	f000 fc04 	bl	8001afc <Error_Handler>
  }
}
 80012f4:	bf00      	nop
 80012f6:	3750      	adds	r7, #80	; 0x50
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40023800 	.word	0x40023800
 8001300:	40007000 	.word	0x40007000

08001304 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800130a:	463b      	mov	r3, r7
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001316:	4b21      	ldr	r3, [pc, #132]	; (800139c <MX_ADC1_Init+0x98>)
 8001318:	4a21      	ldr	r2, [pc, #132]	; (80013a0 <MX_ADC1_Init+0x9c>)
 800131a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800131c:	4b1f      	ldr	r3, [pc, #124]	; (800139c <MX_ADC1_Init+0x98>)
 800131e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001322:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001324:	4b1d      	ldr	r3, [pc, #116]	; (800139c <MX_ADC1_Init+0x98>)
 8001326:	2200      	movs	r2, #0
 8001328:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800132a:	4b1c      	ldr	r3, [pc, #112]	; (800139c <MX_ADC1_Init+0x98>)
 800132c:	2200      	movs	r2, #0
 800132e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001330:	4b1a      	ldr	r3, [pc, #104]	; (800139c <MX_ADC1_Init+0x98>)
 8001332:	2201      	movs	r2, #1
 8001334:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001336:	4b19      	ldr	r3, [pc, #100]	; (800139c <MX_ADC1_Init+0x98>)
 8001338:	2200      	movs	r2, #0
 800133a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800133e:	4b17      	ldr	r3, [pc, #92]	; (800139c <MX_ADC1_Init+0x98>)
 8001340:	2200      	movs	r2, #0
 8001342:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001344:	4b15      	ldr	r3, [pc, #84]	; (800139c <MX_ADC1_Init+0x98>)
 8001346:	4a17      	ldr	r2, [pc, #92]	; (80013a4 <MX_ADC1_Init+0xa0>)
 8001348:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800134a:	4b14      	ldr	r3, [pc, #80]	; (800139c <MX_ADC1_Init+0x98>)
 800134c:	2200      	movs	r2, #0
 800134e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001350:	4b12      	ldr	r3, [pc, #72]	; (800139c <MX_ADC1_Init+0x98>)
 8001352:	2201      	movs	r2, #1
 8001354:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001356:	4b11      	ldr	r3, [pc, #68]	; (800139c <MX_ADC1_Init+0x98>)
 8001358:	2200      	movs	r2, #0
 800135a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800135e:	4b0f      	ldr	r3, [pc, #60]	; (800139c <MX_ADC1_Init+0x98>)
 8001360:	2201      	movs	r2, #1
 8001362:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001364:	480d      	ldr	r0, [pc, #52]	; (800139c <MX_ADC1_Init+0x98>)
 8001366:	f000 ff47 	bl	80021f8 <HAL_ADC_Init>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001370:	f000 fbc4 	bl	8001afc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001374:	230a      	movs	r3, #10
 8001376:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001378:	2301      	movs	r3, #1
 800137a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800137c:	2300      	movs	r3, #0
 800137e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001380:	463b      	mov	r3, r7
 8001382:	4619      	mov	r1, r3
 8001384:	4805      	ldr	r0, [pc, #20]	; (800139c <MX_ADC1_Init+0x98>)
 8001386:	f001 f9af 	bl	80026e8 <HAL_ADC_ConfigChannel>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001390:	f000 fbb4 	bl	8001afc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001394:	bf00      	nop
 8001396:	3710      	adds	r7, #16
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	200001f8 	.word	0x200001f8
 80013a0:	40012000 	.word	0x40012000
 80013a4:	0f000001 	.word	0x0f000001

080013a8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013ae:	463b      	mov	r3, r7
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80013ba:	4b21      	ldr	r3, [pc, #132]	; (8001440 <MX_ADC2_Init+0x98>)
 80013bc:	4a21      	ldr	r2, [pc, #132]	; (8001444 <MX_ADC2_Init+0x9c>)
 80013be:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013c0:	4b1f      	ldr	r3, [pc, #124]	; (8001440 <MX_ADC2_Init+0x98>)
 80013c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013c6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80013c8:	4b1d      	ldr	r3, [pc, #116]	; (8001440 <MX_ADC2_Init+0x98>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 80013ce:	4b1c      	ldr	r3, [pc, #112]	; (8001440 <MX_ADC2_Init+0x98>)
 80013d0:	2201      	movs	r2, #1
 80013d2:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80013d4:	4b1a      	ldr	r3, [pc, #104]	; (8001440 <MX_ADC2_Init+0x98>)
 80013d6:	2201      	movs	r2, #1
 80013d8:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80013da:	4b19      	ldr	r3, [pc, #100]	; (8001440 <MX_ADC2_Init+0x98>)
 80013dc:	2200      	movs	r2, #0
 80013de:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013e2:	4b17      	ldr	r3, [pc, #92]	; (8001440 <MX_ADC2_Init+0x98>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013e8:	4b15      	ldr	r3, [pc, #84]	; (8001440 <MX_ADC2_Init+0x98>)
 80013ea:	4a17      	ldr	r2, [pc, #92]	; (8001448 <MX_ADC2_Init+0xa0>)
 80013ec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013ee:	4b14      	ldr	r3, [pc, #80]	; (8001440 <MX_ADC2_Init+0x98>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80013f4:	4b12      	ldr	r3, [pc, #72]	; (8001440 <MX_ADC2_Init+0x98>)
 80013f6:	2201      	movs	r2, #1
 80013f8:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80013fa:	4b11      	ldr	r3, [pc, #68]	; (8001440 <MX_ADC2_Init+0x98>)
 80013fc:	2201      	movs	r2, #1
 80013fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001402:	4b0f      	ldr	r3, [pc, #60]	; (8001440 <MX_ADC2_Init+0x98>)
 8001404:	2201      	movs	r2, #1
 8001406:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001408:	480d      	ldr	r0, [pc, #52]	; (8001440 <MX_ADC2_Init+0x98>)
 800140a:	f000 fef5 	bl	80021f8 <HAL_ADC_Init>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001414:	f000 fb72 	bl	8001afc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001418:	230b      	movs	r3, #11
 800141a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800141c:	2301      	movs	r3, #1
 800141e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001420:	2300      	movs	r3, #0
 8001422:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001424:	463b      	mov	r3, r7
 8001426:	4619      	mov	r1, r3
 8001428:	4805      	ldr	r0, [pc, #20]	; (8001440 <MX_ADC2_Init+0x98>)
 800142a:	f001 f95d 	bl	80026e8 <HAL_ADC_ConfigChannel>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001434:	f000 fb62 	bl	8001afc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001438:	bf00      	nop
 800143a:	3710      	adds	r7, #16
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	20000240 	.word	0x20000240
 8001444:	40012100 	.word	0x40012100
 8001448:	0f000001 	.word	0x0f000001

0800144c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b096      	sub	sp, #88	; 0x58
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001452:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	609a      	str	r2, [r3, #8]
 800145e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001460:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800146a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]
 8001474:	609a      	str	r2, [r3, #8]
 8001476:	60da      	str	r2, [r3, #12]
 8001478:	611a      	str	r2, [r3, #16]
 800147a:	615a      	str	r2, [r3, #20]
 800147c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800147e:	1d3b      	adds	r3, r7, #4
 8001480:	2220      	movs	r2, #32
 8001482:	2100      	movs	r1, #0
 8001484:	4618      	mov	r0, r3
 8001486:	f004 fad3 	bl	8005a30 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800148a:	4b3e      	ldr	r3, [pc, #248]	; (8001584 <MX_TIM1_Init+0x138>)
 800148c:	4a3e      	ldr	r2, [pc, #248]	; (8001588 <MX_TIM1_Init+0x13c>)
 800148e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 30-1;
 8001490:	4b3c      	ldr	r3, [pc, #240]	; (8001584 <MX_TIM1_Init+0x138>)
 8001492:	221d      	movs	r2, #29
 8001494:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001496:	4b3b      	ldr	r3, [pc, #236]	; (8001584 <MX_TIM1_Init+0x138>)
 8001498:	2200      	movs	r2, #0
 800149a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 56000-1;
 800149c:	4b39      	ldr	r3, [pc, #228]	; (8001584 <MX_TIM1_Init+0x138>)
 800149e:	f64d 22bf 	movw	r2, #55999	; 0xdabf
 80014a2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014a4:	4b37      	ldr	r3, [pc, #220]	; (8001584 <MX_TIM1_Init+0x138>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014aa:	4b36      	ldr	r3, [pc, #216]	; (8001584 <MX_TIM1_Init+0x138>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014b0:	4b34      	ldr	r3, [pc, #208]	; (8001584 <MX_TIM1_Init+0x138>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014b6:	4833      	ldr	r0, [pc, #204]	; (8001584 <MX_TIM1_Init+0x138>)
 80014b8:	f002 ffe8 	bl	800448c <HAL_TIM_Base_Init>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80014c2:	f000 fb1b 	bl	8001afc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ca:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014cc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014d0:	4619      	mov	r1, r3
 80014d2:	482c      	ldr	r0, [pc, #176]	; (8001584 <MX_TIM1_Init+0x138>)
 80014d4:	f003 fa0c 	bl	80048f0 <HAL_TIM_ConfigClockSource>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80014de:	f000 fb0d 	bl	8001afc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80014e2:	4828      	ldr	r0, [pc, #160]	; (8001584 <MX_TIM1_Init+0x138>)
 80014e4:	f003 f821 	bl	800452a <HAL_TIM_PWM_Init>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80014ee:	f000 fb05 	bl	8001afc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014f2:	2300      	movs	r3, #0
 80014f4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014f6:	2300      	movs	r3, #0
 80014f8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014fe:	4619      	mov	r1, r3
 8001500:	4820      	ldr	r0, [pc, #128]	; (8001584 <MX_TIM1_Init+0x138>)
 8001502:	f003 fdcd 	bl	80050a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800150c:	f000 faf6 	bl	8001afc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001510:	2360      	movs	r3, #96	; 0x60
 8001512:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001518:	2300      	movs	r3, #0
 800151a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800151c:	2300      	movs	r3, #0
 800151e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001520:	2300      	movs	r3, #0
 8001522:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001524:	2300      	movs	r3, #0
 8001526:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001528:	2300      	movs	r3, #0
 800152a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800152c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001530:	2208      	movs	r2, #8
 8001532:	4619      	mov	r1, r3
 8001534:	4813      	ldr	r0, [pc, #76]	; (8001584 <MX_TIM1_Init+0x138>)
 8001536:	f003 f919 	bl	800476c <HAL_TIM_PWM_ConfigChannel>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001540:	f000 fadc 	bl	8001afc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001544:	2300      	movs	r3, #0
 8001546:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001548:	2300      	movs	r3, #0
 800154a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800154c:	2300      	movs	r3, #0
 800154e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001550:	2300      	movs	r3, #0
 8001552:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001554:	2300      	movs	r3, #0
 8001556:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001558:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800155c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800155e:	2300      	movs	r3, #0
 8001560:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001562:	1d3b      	adds	r3, r7, #4
 8001564:	4619      	mov	r1, r3
 8001566:	4807      	ldr	r0, [pc, #28]	; (8001584 <MX_TIM1_Init+0x138>)
 8001568:	f003 fe16 	bl	8005198 <HAL_TIMEx_ConfigBreakDeadTime>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001572:	f000 fac3 	bl	8001afc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001576:	4803      	ldr	r0, [pc, #12]	; (8001584 <MX_TIM1_Init+0x138>)
 8001578:	f000 fbfc 	bl	8001d74 <HAL_TIM_MspPostInit>

}
 800157c:	bf00      	nop
 800157e:	3758      	adds	r7, #88	; 0x58
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20000348 	.word	0x20000348
 8001588:	40010000 	.word	0x40010000

0800158c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001590:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <MX_USART2_UART_Init+0x4c>)
 8001592:	4a12      	ldr	r2, [pc, #72]	; (80015dc <MX_USART2_UART_Init+0x50>)
 8001594:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001596:	4b10      	ldr	r3, [pc, #64]	; (80015d8 <MX_USART2_UART_Init+0x4c>)
 8001598:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800159c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800159e:	4b0e      	ldr	r3, [pc, #56]	; (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015a4:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015aa:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015b0:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015b2:	220c      	movs	r2, #12
 80015b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015b6:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015bc:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015be:	2200      	movs	r2, #0
 80015c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015c2:	4805      	ldr	r0, [pc, #20]	; (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015c4:	f003 fe3a 	bl	800523c <HAL_UART_Init>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015ce:	f000 fa95 	bl	8001afc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	20000390 	.word	0x20000390
 80015dc:	40004400 	.word	0x40004400

080015e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	607b      	str	r3, [r7, #4]
 80015ea:	4b10      	ldr	r3, [pc, #64]	; (800162c <MX_DMA_Init+0x4c>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	4a0f      	ldr	r2, [pc, #60]	; (800162c <MX_DMA_Init+0x4c>)
 80015f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015f4:	6313      	str	r3, [r2, #48]	; 0x30
 80015f6:	4b0d      	ldr	r3, [pc, #52]	; (800162c <MX_DMA_Init+0x4c>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015fe:	607b      	str	r3, [r7, #4]
 8001600:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001602:	2200      	movs	r2, #0
 8001604:	2100      	movs	r1, #0
 8001606:	2038      	movs	r0, #56	; 0x38
 8001608:	f001 fc03 	bl	8002e12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800160c:	2038      	movs	r0, #56	; 0x38
 800160e:	f001 fc1c 	bl	8002e4a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001612:	2200      	movs	r2, #0
 8001614:	2100      	movs	r1, #0
 8001616:	203a      	movs	r0, #58	; 0x3a
 8001618:	f001 fbfb 	bl	8002e12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800161c:	203a      	movs	r0, #58	; 0x3a
 800161e:	f001 fc14 	bl	8002e4a <HAL_NVIC_EnableIRQ>

}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40023800 	.word	0x40023800

08001630 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b08a      	sub	sp, #40	; 0x28
 8001634:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001636:	f107 0314 	add.w	r3, r7, #20
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	605a      	str	r2, [r3, #4]
 8001640:	609a      	str	r2, [r3, #8]
 8001642:	60da      	str	r2, [r3, #12]
 8001644:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	613b      	str	r3, [r7, #16]
 800164a:	4b26      	ldr	r3, [pc, #152]	; (80016e4 <MX_GPIO_Init+0xb4>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	4a25      	ldr	r2, [pc, #148]	; (80016e4 <MX_GPIO_Init+0xb4>)
 8001650:	f043 0304 	orr.w	r3, r3, #4
 8001654:	6313      	str	r3, [r2, #48]	; 0x30
 8001656:	4b23      	ldr	r3, [pc, #140]	; (80016e4 <MX_GPIO_Init+0xb4>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	f003 0304 	and.w	r3, r3, #4
 800165e:	613b      	str	r3, [r7, #16]
 8001660:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	4b1f      	ldr	r3, [pc, #124]	; (80016e4 <MX_GPIO_Init+0xb4>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	4a1e      	ldr	r2, [pc, #120]	; (80016e4 <MX_GPIO_Init+0xb4>)
 800166c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001670:	6313      	str	r3, [r2, #48]	; 0x30
 8001672:	4b1c      	ldr	r3, [pc, #112]	; (80016e4 <MX_GPIO_Init+0xb4>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	60bb      	str	r3, [r7, #8]
 8001682:	4b18      	ldr	r3, [pc, #96]	; (80016e4 <MX_GPIO_Init+0xb4>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	4a17      	ldr	r2, [pc, #92]	; (80016e4 <MX_GPIO_Init+0xb4>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	6313      	str	r3, [r2, #48]	; 0x30
 800168e:	4b15      	ldr	r3, [pc, #84]	; (80016e4 <MX_GPIO_Init+0xb4>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	60bb      	str	r3, [r7, #8]
 8001698:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	607b      	str	r3, [r7, #4]
 800169e:	4b11      	ldr	r3, [pc, #68]	; (80016e4 <MX_GPIO_Init+0xb4>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	4a10      	ldr	r2, [pc, #64]	; (80016e4 <MX_GPIO_Init+0xb4>)
 80016a4:	f043 0302 	orr.w	r3, r3, #2
 80016a8:	6313      	str	r3, [r2, #48]	; 0x30
 80016aa:	4b0e      	ldr	r3, [pc, #56]	; (80016e4 <MX_GPIO_Init+0xb4>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	607b      	str	r3, [r7, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 80016b6:	2200      	movs	r2, #0
 80016b8:	2140      	movs	r1, #64	; 0x40
 80016ba:	480b      	ldr	r0, [pc, #44]	; (80016e8 <MX_GPIO_Init+0xb8>)
 80016bc:	f002 f8e4 	bl	8003888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_LED_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 80016c0:	2340      	movs	r3, #64	; 0x40
 80016c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c4:	2301      	movs	r3, #1
 80016c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c8:	2300      	movs	r3, #0
 80016ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016cc:	2300      	movs	r3, #0
 80016ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 80016d0:	f107 0314 	add.w	r3, r7, #20
 80016d4:	4619      	mov	r1, r3
 80016d6:	4804      	ldr	r0, [pc, #16]	; (80016e8 <MX_GPIO_Init+0xb8>)
 80016d8:	f001 ff42 	bl	8003560 <HAL_GPIO_Init>

}
 80016dc:	bf00      	nop
 80016de:	3728      	adds	r7, #40	; 0x28
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40023800 	.word	0x40023800
 80016e8:	40020000 	.word	0x40020000

080016ec <relative_average>:
		sum += samples[i];
	}
	return ( sum / length );
}

float relative_average(const float* samples, size_t length, uint8_t moving_point) {
 80016ec:	b480      	push	{r7}
 80016ee:	b087      	sub	sp, #28
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	4613      	mov	r3, r2
 80016f8:	71fb      	strb	r3, [r7, #7]
	float sum = 0.0f;
 80016fa:	f04f 0300 	mov.w	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]
	uint16_t half_interval = (moving_point - 1) / 2;
 8001700:	79fb      	ldrb	r3, [r7, #7]
 8001702:	3b01      	subs	r3, #1
 8001704:	0fda      	lsrs	r2, r3, #31
 8001706:	4413      	add	r3, r2
 8001708:	105b      	asrs	r3, r3, #1
 800170a:	823b      	strh	r3, [r7, #16]

	for (uint16_t i = half_interval; i < length - half_interval; ++i) {
 800170c:	8a3b      	ldrh	r3, [r7, #16]
 800170e:	827b      	strh	r3, [r7, #18]
 8001710:	e00e      	b.n	8001730 <relative_average+0x44>
		sum += samples[i];
 8001712:	8a7b      	ldrh	r3, [r7, #18]
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	68fa      	ldr	r2, [r7, #12]
 8001718:	4413      	add	r3, r2
 800171a:	edd3 7a00 	vldr	s15, [r3]
 800171e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001722:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001726:	edc7 7a05 	vstr	s15, [r7, #20]
	for (uint16_t i = half_interval; i < length - half_interval; ++i) {
 800172a:	8a7b      	ldrh	r3, [r7, #18]
 800172c:	3301      	adds	r3, #1
 800172e:	827b      	strh	r3, [r7, #18]
 8001730:	8a7a      	ldrh	r2, [r7, #18]
 8001732:	8a3b      	ldrh	r3, [r7, #16]
 8001734:	68b9      	ldr	r1, [r7, #8]
 8001736:	1acb      	subs	r3, r1, r3
 8001738:	429a      	cmp	r2, r3
 800173a:	d3ea      	bcc.n	8001712 <relative_average+0x26>
	}
	return sum / (length - moving_point - 1) ;
 800173c:	79fb      	ldrb	r3, [r7, #7]
 800173e:	68ba      	ldr	r2, [r7, #8]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	3b01      	subs	r3, #1
 8001744:	ee07 3a90 	vmov	s15, r3
 8001748:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800174c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001750:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001754:	eef0 7a66 	vmov.f32	s15, s13
}
 8001758:	eeb0 0a67 	vmov.f32	s0, s15
 800175c:	371c      	adds	r7, #28
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr

08001766 <moving_average_filter>:

void moving_average_filter(const uint16_t* samples, float* filtered, size_t length, uint16_t moving_point) {
 8001766:	b480      	push	{r7}
 8001768:	b087      	sub	sp, #28
 800176a:	af00      	add	r7, sp, #0
 800176c:	60f8      	str	r0, [r7, #12]
 800176e:	60b9      	str	r1, [r7, #8]
 8001770:	607a      	str	r2, [r7, #4]
 8001772:	807b      	strh	r3, [r7, #2]
	uint16_t half_interval = (moving_point - 1) / 2;
 8001774:	887b      	ldrh	r3, [r7, #2]
 8001776:	3b01      	subs	r3, #1
 8001778:	0fda      	lsrs	r2, r3, #31
 800177a:	4413      	add	r3, r2
 800177c:	105b      	asrs	r3, r3, #1
 800177e:	827b      	strh	r3, [r7, #18]

	for (uint16_t i = half_interval; i < length - half_interval; i++) {
 8001780:	8a7b      	ldrh	r3, [r7, #18]
 8001782:	82fb      	strh	r3, [r7, #22]
 8001784:	e046      	b.n	8001814 <moving_average_filter+0xae>
		filtered[i] = 0.0f;
 8001786:	8afb      	ldrh	r3, [r7, #22]
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	68ba      	ldr	r2, [r7, #8]
 800178c:	4413      	add	r3, r2
 800178e:	f04f 0200 	mov.w	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
		for (int16_t j = -half_interval; j < half_interval; j++) {
 8001794:	8a7b      	ldrh	r3, [r7, #18]
 8001796:	425b      	negs	r3, r3
 8001798:	b29b      	uxth	r3, r3
 800179a:	82bb      	strh	r3, [r7, #20]
 800179c:	e01f      	b.n	80017de <moving_average_filter+0x78>
			filtered[i] = filtered[i] + samples[i + j];
 800179e:	8afb      	ldrh	r3, [r7, #22]
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	68ba      	ldr	r2, [r7, #8]
 80017a4:	4413      	add	r3, r2
 80017a6:	ed93 7a00 	vldr	s14, [r3]
 80017aa:	8afa      	ldrh	r2, [r7, #22]
 80017ac:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80017b0:	4413      	add	r3, r2
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	68fa      	ldr	r2, [r7, #12]
 80017b6:	4413      	add	r3, r2
 80017b8:	881b      	ldrh	r3, [r3, #0]
 80017ba:	ee07 3a90 	vmov	s15, r3
 80017be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017c2:	8afb      	ldrh	r3, [r7, #22]
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	68ba      	ldr	r2, [r7, #8]
 80017c8:	4413      	add	r3, r2
 80017ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017ce:	edc3 7a00 	vstr	s15, [r3]
		for (int16_t j = -half_interval; j < half_interval; j++) {
 80017d2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	3301      	adds	r3, #1
 80017da:	b29b      	uxth	r3, r3
 80017dc:	82bb      	strh	r3, [r7, #20]
 80017de:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80017e2:	8a7b      	ldrh	r3, [r7, #18]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	dbda      	blt.n	800179e <moving_average_filter+0x38>
		}
		filtered[i] = (float) filtered[i] / moving_point;
 80017e8:	8afb      	ldrh	r3, [r7, #22]
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	68ba      	ldr	r2, [r7, #8]
 80017ee:	4413      	add	r3, r2
 80017f0:	edd3 6a00 	vldr	s13, [r3]
 80017f4:	887b      	ldrh	r3, [r7, #2]
 80017f6:	ee07 3a90 	vmov	s15, r3
 80017fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017fe:	8afb      	ldrh	r3, [r7, #22]
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	68ba      	ldr	r2, [r7, #8]
 8001804:	4413      	add	r3, r2
 8001806:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800180a:	edc3 7a00 	vstr	s15, [r3]
	for (uint16_t i = half_interval; i < length - half_interval; i++) {
 800180e:	8afb      	ldrh	r3, [r7, #22]
 8001810:	3301      	adds	r3, #1
 8001812:	82fb      	strh	r3, [r7, #22]
 8001814:	8afa      	ldrh	r2, [r7, #22]
 8001816:	8a7b      	ldrh	r3, [r7, #18]
 8001818:	6879      	ldr	r1, [r7, #4]
 800181a:	1acb      	subs	r3, r1, r3
 800181c:	429a      	cmp	r2, r3
 800181e:	d3b2      	bcc.n	8001786 <moving_average_filter+0x20>
	}

}
 8001820:	bf00      	nop
 8001822:	bf00      	nop
 8001824:	371c      	adds	r7, #28
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
	...

08001830 <console_log>:

	memcpy(filtered, t_filtered, length);

}

void console_log(const char* message) {
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) message, strlen(message), HAL_MAX_DELAY);
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f7fe fce9 	bl	8000210 <strlen>
 800183e:	4603      	mov	r3, r0
 8001840:	b29a      	uxth	r2, r3
 8001842:	f04f 33ff 	mov.w	r3, #4294967295
 8001846:	6879      	ldr	r1, [r7, #4]
 8001848:	4803      	ldr	r0, [pc, #12]	; (8001858 <console_log+0x28>)
 800184a:	f003 fd44 	bl	80052d6 <HAL_UART_Transmit>
}
 800184e:	bf00      	nop
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	20000390 	.word	0x20000390

0800185c <light_pin>:


void light_pin(GPIO_PinState state) {
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, state);
 8001866:	79fb      	ldrb	r3, [r7, #7]
 8001868:	461a      	mov	r2, r3
 800186a:	2140      	movs	r1, #64	; 0x40
 800186c:	4803      	ldr	r0, [pc, #12]	; (800187c <light_pin+0x20>)
 800186e:	f002 f80b 	bl	8003888 <HAL_GPIO_WritePin>
}
 8001872:	bf00      	nop
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40020000 	.word	0x40020000

08001880 <min>:

uint16_t min(uint16_t *buff, size_t length) {
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
	uint16_t min = buff[0];
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	881b      	ldrh	r3, [r3, #0]
 800188e:	81fb      	strh	r3, [r7, #14]
	for (uint16_t i = 1; i < length; ++i) {
 8001890:	2301      	movs	r3, #1
 8001892:	81bb      	strh	r3, [r7, #12]
 8001894:	e010      	b.n	80018b8 <min+0x38>
		if (buff[i] < min) {
 8001896:	89bb      	ldrh	r3, [r7, #12]
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	4413      	add	r3, r2
 800189e:	881b      	ldrh	r3, [r3, #0]
 80018a0:	89fa      	ldrh	r2, [r7, #14]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d905      	bls.n	80018b2 <min+0x32>
			min = buff[i];
 80018a6:	89bb      	ldrh	r3, [r7, #12]
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	4413      	add	r3, r2
 80018ae:	881b      	ldrh	r3, [r3, #0]
 80018b0:	81fb      	strh	r3, [r7, #14]
	for (uint16_t i = 1; i < length; ++i) {
 80018b2:	89bb      	ldrh	r3, [r7, #12]
 80018b4:	3301      	adds	r3, #1
 80018b6:	81bb      	strh	r3, [r7, #12]
 80018b8:	89bb      	ldrh	r3, [r7, #12]
 80018ba:	683a      	ldr	r2, [r7, #0]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d8ea      	bhi.n	8001896 <min+0x16>
		}
	}
	return min;
 80018c0:	89fb      	ldrh	r3, [r7, #14]
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3714      	adds	r7, #20
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr

080018ce <max>:

uint16_t max(uint16_t *buff, size_t length) {
 80018ce:	b480      	push	{r7}
 80018d0:	b085      	sub	sp, #20
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
 80018d6:	6039      	str	r1, [r7, #0]
	uint16_t max = buff[0];
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	881b      	ldrh	r3, [r3, #0]
 80018dc:	81fb      	strh	r3, [r7, #14]
	for (uint16_t i = 1; i < length; ++i) {
 80018de:	2301      	movs	r3, #1
 80018e0:	81bb      	strh	r3, [r7, #12]
 80018e2:	e010      	b.n	8001906 <max+0x38>
		if (buff[i] > max) {
 80018e4:	89bb      	ldrh	r3, [r7, #12]
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	4413      	add	r3, r2
 80018ec:	881b      	ldrh	r3, [r3, #0]
 80018ee:	89fa      	ldrh	r2, [r7, #14]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d205      	bcs.n	8001900 <max+0x32>
			max = buff[i];
 80018f4:	89bb      	ldrh	r3, [r7, #12]
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	4413      	add	r3, r2
 80018fc:	881b      	ldrh	r3, [r3, #0]
 80018fe:	81fb      	strh	r3, [r7, #14]
	for (uint16_t i = 1; i < length; ++i) {
 8001900:	89bb      	ldrh	r3, [r7, #12]
 8001902:	3301      	adds	r3, #1
 8001904:	81bb      	strh	r3, [r7, #12]
 8001906:	89bb      	ldrh	r3, [r7, #12]
 8001908:	683a      	ldr	r2, [r7, #0]
 800190a:	429a      	cmp	r2, r3
 800190c:	d8ea      	bhi.n	80018e4 <max+0x16>
		}
	}
	return max;
 800190e:	89fb      	ldrh	r3, [r7, #14]
}
 8001910:	4618      	mov	r0, r3
 8001912:	3714      	adds	r7, #20
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <emg_read_loop>:

float map(float val, const float in_min, const float in_max, const float out_min, const float out_max) {
	return (val - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

void emg_read_loop() {
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc1_buf, ADC1_BUF_LEN);
 8001920:	f240 42e7 	movw	r2, #1255	; 0x4e7
 8001924:	4906      	ldr	r1, [pc, #24]	; (8001940 <emg_read_loop+0x24>)
 8001926:	4807      	ldr	r0, [pc, #28]	; (8001944 <emg_read_loop+0x28>)
 8001928:	f000 fdba 	bl	80024a0 <HAL_ADC_Start_DMA>
	while(adc1_conv_complete == 0) {
 800192c:	bf00      	nop
 800192e:	4b06      	ldr	r3, [pc, #24]	; (8001948 <emg_read_loop+0x2c>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d0fb      	beq.n	800192e <emg_read_loop+0x12>

	}
	adc1_conv_complete = 0;
 8001936:	4b04      	ldr	r3, [pc, #16]	; (8001948 <emg_read_loop+0x2c>)
 8001938:	2200      	movs	r2, #0
 800193a:	701a      	strb	r2, [r3, #0]
}
 800193c:	bf00      	nop
 800193e:	bd80      	pop	{r7, pc}
 8001940:	2000043c 	.word	0x2000043c
 8001944:	200001f8 	.word	0x200001f8
 8001948:	20000e0e 	.word	0x20000e0e

0800194c <normalize_emg>:

float normalize_emg(uint16_t* buffer) {
 800194c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800194e:	f5ad 5d9d 	sub.w	sp, sp, #5024	; 0x13a0
 8001952:	b085      	sub	sp, #20
 8001954:	af02      	add	r7, sp, #8
 8001956:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 800195a:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 800195e:	6018      	str	r0, [r3, #0]
	float myoware_filtered[ADC1_BUF_LEN] = { 0.0f };
 8001960:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8001964:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8001968:	4618      	mov	r0, r3
 800196a:	f241 339c 	movw	r3, #5020	; 0x139c
 800196e:	461a      	mov	r2, r3
 8001970:	2100      	movs	r1, #0
 8001972:	f004 f85d 	bl	8005a30 <memset>
	moving_average_filter(buffer, myoware_filtered, ADC1_BUF_LEN, MOVING_POINT);
 8001976:	f107 0108 	add.w	r1, r7, #8
 800197a:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 800197e:	f5a3 7069 	sub.w	r0, r3, #932	; 0x3a4
 8001982:	2319      	movs	r3, #25
 8001984:	f240 42e7 	movw	r2, #1255	; 0x4e7
 8001988:	6800      	ldr	r0, [r0, #0]
 800198a:	f7ff feec 	bl	8001766 <moving_average_filter>
	float myoware_avg = relative_average(myoware_filtered, ADC1_BUF_LEN, MOVING_POINT) / 10;
 800198e:	f107 0308 	add.w	r3, r7, #8
 8001992:	2219      	movs	r2, #25
 8001994:	f240 41e7 	movw	r1, #1255	; 0x4e7
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff fea7 	bl	80016ec <relative_average>
 800199e:	eeb0 7a40 	vmov.f32	s14, s0
 80019a2:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80019a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019aa:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 80019ae:	f103 0304 	add.w	r3, r3, #4
 80019b2:	edc3 7a00 	vstr	s15, [r3]

	sprintf(
 80019b6:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 80019ba:	f103 0304 	add.w	r3, r3, #4
 80019be:	6818      	ldr	r0, [r3, #0]
 80019c0:	f7fe fde2 	bl	8000588 <__aeabi_f2d>
 80019c4:	4604      	mov	r4, r0
 80019c6:	460d      	mov	r5, r1
		msg,
		"Myoware = %.2f, min = %hu, max = %hu \r\n",
		myoware_avg,
		min(buffer, ADC1_BUF_LEN),
 80019c8:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 80019cc:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80019d0:	f240 41e7 	movw	r1, #1255	; 0x4e7
 80019d4:	6818      	ldr	r0, [r3, #0]
 80019d6:	f7ff ff53 	bl	8001880 <min>
 80019da:	4603      	mov	r3, r0
	sprintf(
 80019dc:	461e      	mov	r6, r3
		max(buffer, ADC1_BUF_LEN)
 80019de:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 80019e2:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80019e6:	f240 41e7 	movw	r1, #1255	; 0x4e7
 80019ea:	6818      	ldr	r0, [r3, #0]
 80019ec:	f7ff ff6f 	bl	80018ce <max>
 80019f0:	4603      	mov	r3, r0
	sprintf(
 80019f2:	9301      	str	r3, [sp, #4]
 80019f4:	9600      	str	r6, [sp, #0]
 80019f6:	4622      	mov	r2, r4
 80019f8:	462b      	mov	r3, r5
 80019fa:	490a      	ldr	r1, [pc, #40]	; (8001a24 <normalize_emg+0xd8>)
 80019fc:	480a      	ldr	r0, [pc, #40]	; (8001a28 <normalize_emg+0xdc>)
 80019fe:	f004 fc89 	bl	8006314 <siprintf>
	);
	console_log(msg);
 8001a02:	4809      	ldr	r0, [pc, #36]	; (8001a28 <normalize_emg+0xdc>)
 8001a04:	f7ff ff14 	bl	8001830 <console_log>

	return myoware_avg;
 8001a08:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 8001a0c:	f103 0304 	add.w	r3, r3, #4
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	ee07 3a90 	vmov	s15, r3
}
 8001a16:	eeb0 0a67 	vmov.f32	s0, s15
 8001a1a:	f507 579d 	add.w	r7, r7, #5024	; 0x13a0
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a24:	08008850 	.word	0x08008850
 8001a28:	200003d4 	.word	0x200003d4

08001a2c <move_servo_by_emg>:

void move_servo_by_emg(float emg) {
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	ed87 0a01 	vstr	s0, [r7, #4]
	float target_angle = servo.max_angle / 2;
 8001a36:	4b12      	ldr	r3, [pc, #72]	; (8001a80 <move_servo_by_emg+0x54>)
 8001a38:	ed93 7a03 	vldr	s14, [r3, #12]
 8001a3c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001a40:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a44:	edc7 7a03 	vstr	s15, [r7, #12]
	if (emg > TRESHOLD) {
 8001a48:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a4c:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001a84 <move_servo_by_emg+0x58>
 8001a50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a58:	dd08      	ble.n	8001a6c <move_servo_by_emg+0x40>
		target_angle = servo.max_angle - 15.0;
 8001a5a:	4b09      	ldr	r3, [pc, #36]	; (8001a80 <move_servo_by_emg+0x54>)
 8001a5c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001a60:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8001a64:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a68:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	servo_write_deg(&servo, target_angle);
 8001a6c:	ed97 0a03 	vldr	s0, [r7, #12]
 8001a70:	4803      	ldr	r0, [pc, #12]	; (8001a80 <move_servo_by_emg+0x54>)
 8001a72:	f7ff fac9 	bl	8001008 <servo_write_deg>
	// map(myoware_avg, 3.5, 10.5, servo.min_angle, servo.max_angle)
}
 8001a76:	bf00      	nop
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	20000e10 	.word	0x20000e10
 8001a84:	42a00000 	.word	0x42a00000

08001a88 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
}
 8001a90:	bf00      	nop
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <HAL_ADC_ConvCpltCallback>:



void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]

	if (hadc == &hadc1) {
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	4a0e      	ldr	r2, [pc, #56]	; (8001ae0 <HAL_ADC_ConvCpltCallback+0x44>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d102      	bne.n	8001ab2 <HAL_ADC_ConvCpltCallback+0x16>
		adc1_conv_complete = 1;
 8001aac:	4b0d      	ldr	r3, [pc, #52]	; (8001ae4 <HAL_ADC_ConvCpltCallback+0x48>)
 8001aae:	2201      	movs	r2, #1
 8001ab0:	701a      	strb	r2, [r3, #0]
	}

	if (hadc == &hadc2) {
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a0c      	ldr	r2, [pc, #48]	; (8001ae8 <HAL_ADC_ConvCpltCallback+0x4c>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d10d      	bne.n	8001ad6 <HAL_ADC_ConvCpltCallback+0x3a>
		servo_feedback_value = adc2_buf[0];
 8001aba:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <HAL_ADC_ConvCpltCallback+0x50>)
 8001abc:	881a      	ldrh	r2, [r3, #0]
 8001abe:	4b0c      	ldr	r3, [pc, #48]	; (8001af0 <HAL_ADC_ConvCpltCallback+0x54>)
 8001ac0:	801a      	strh	r2, [r3, #0]
		sprintf(
 8001ac2:	4b0b      	ldr	r3, [pc, #44]	; (8001af0 <HAL_ADC_ConvCpltCallback+0x54>)
 8001ac4:	881b      	ldrh	r3, [r3, #0]
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	490a      	ldr	r1, [pc, #40]	; (8001af4 <HAL_ADC_ConvCpltCallback+0x58>)
 8001aca:	480b      	ldr	r0, [pc, #44]	; (8001af8 <HAL_ADC_ConvCpltCallback+0x5c>)
 8001acc:	f004 fc22 	bl	8006314 <siprintf>
			msg,
			"Servo feedback value = %d \r\n",
			servo_feedback_value
		);
		console_log(msg);
 8001ad0:	4809      	ldr	r0, [pc, #36]	; (8001af8 <HAL_ADC_ConvCpltCallback+0x5c>)
 8001ad2:	f7ff fead 	bl	8001830 <console_log>
	}

}
 8001ad6:	bf00      	nop
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	200001f8 	.word	0x200001f8
 8001ae4:	20000e0e 	.word	0x20000e0e
 8001ae8:	20000240 	.word	0x20000240
 8001aec:	20000e0c 	.word	0x20000e0c
 8001af0:	20000438 	.word	0x20000438
 8001af4:	08008878 	.word	0x08008878
 8001af8:	200003d4 	.word	0x200003d4

08001afc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b00:	b672      	cpsid	i
}
 8001b02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b04:	e7fe      	b.n	8001b04 <Error_Handler+0x8>
	...

08001b08 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	607b      	str	r3, [r7, #4]
 8001b12:	4b10      	ldr	r3, [pc, #64]	; (8001b54 <HAL_MspInit+0x4c>)
 8001b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b16:	4a0f      	ldr	r2, [pc, #60]	; (8001b54 <HAL_MspInit+0x4c>)
 8001b18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b1e:	4b0d      	ldr	r3, [pc, #52]	; (8001b54 <HAL_MspInit+0x4c>)
 8001b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b26:	607b      	str	r3, [r7, #4]
 8001b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	603b      	str	r3, [r7, #0]
 8001b2e:	4b09      	ldr	r3, [pc, #36]	; (8001b54 <HAL_MspInit+0x4c>)
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	4a08      	ldr	r2, [pc, #32]	; (8001b54 <HAL_MspInit+0x4c>)
 8001b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b38:	6413      	str	r3, [r2, #64]	; 0x40
 8001b3a:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <HAL_MspInit+0x4c>)
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b42:	603b      	str	r3, [r7, #0]
 8001b44:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b46:	2007      	movs	r0, #7
 8001b48:	f001 f958 	bl	8002dfc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b4c:	bf00      	nop
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40023800 	.word	0x40023800

08001b58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b08c      	sub	sp, #48	; 0x30
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b60:	f107 031c 	add.w	r3, r7, #28
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	605a      	str	r2, [r3, #4]
 8001b6a:	609a      	str	r2, [r3, #8]
 8001b6c:	60da      	str	r2, [r3, #12]
 8001b6e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a66      	ldr	r2, [pc, #408]	; (8001d10 <HAL_ADC_MspInit+0x1b8>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d160      	bne.n	8001c3c <HAL_ADC_MspInit+0xe4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	61bb      	str	r3, [r7, #24]
 8001b7e:	4b65      	ldr	r3, [pc, #404]	; (8001d14 <HAL_ADC_MspInit+0x1bc>)
 8001b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b82:	4a64      	ldr	r2, [pc, #400]	; (8001d14 <HAL_ADC_MspInit+0x1bc>)
 8001b84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b88:	6453      	str	r3, [r2, #68]	; 0x44
 8001b8a:	4b62      	ldr	r3, [pc, #392]	; (8001d14 <HAL_ADC_MspInit+0x1bc>)
 8001b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b92:	61bb      	str	r3, [r7, #24]
 8001b94:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b96:	2300      	movs	r3, #0
 8001b98:	617b      	str	r3, [r7, #20]
 8001b9a:	4b5e      	ldr	r3, [pc, #376]	; (8001d14 <HAL_ADC_MspInit+0x1bc>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9e:	4a5d      	ldr	r2, [pc, #372]	; (8001d14 <HAL_ADC_MspInit+0x1bc>)
 8001ba0:	f043 0304 	orr.w	r3, r3, #4
 8001ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba6:	4b5b      	ldr	r3, [pc, #364]	; (8001d14 <HAL_ADC_MspInit+0x1bc>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001baa:	f003 0304 	and.w	r3, r3, #4
 8001bae:	617b      	str	r3, [r7, #20]
 8001bb0:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = MYOWARE_Pin;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MYOWARE_GPIO_Port, &GPIO_InitStruct);
 8001bbe:	f107 031c 	add.w	r3, r7, #28
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4854      	ldr	r0, [pc, #336]	; (8001d18 <HAL_ADC_MspInit+0x1c0>)
 8001bc6:	f001 fccb 	bl	8003560 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001bca:	4b54      	ldr	r3, [pc, #336]	; (8001d1c <HAL_ADC_MspInit+0x1c4>)
 8001bcc:	4a54      	ldr	r2, [pc, #336]	; (8001d20 <HAL_ADC_MspInit+0x1c8>)
 8001bce:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001bd0:	4b52      	ldr	r3, [pc, #328]	; (8001d1c <HAL_ADC_MspInit+0x1c4>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bd6:	4b51      	ldr	r3, [pc, #324]	; (8001d1c <HAL_ADC_MspInit+0x1c4>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bdc:	4b4f      	ldr	r3, [pc, #316]	; (8001d1c <HAL_ADC_MspInit+0x1c4>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001be2:	4b4e      	ldr	r3, [pc, #312]	; (8001d1c <HAL_ADC_MspInit+0x1c4>)
 8001be4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001be8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001bea:	4b4c      	ldr	r3, [pc, #304]	; (8001d1c <HAL_ADC_MspInit+0x1c4>)
 8001bec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001bf0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001bf2:	4b4a      	ldr	r3, [pc, #296]	; (8001d1c <HAL_ADC_MspInit+0x1c4>)
 8001bf4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bf8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001bfa:	4b48      	ldr	r3, [pc, #288]	; (8001d1c <HAL_ADC_MspInit+0x1c4>)
 8001bfc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c00:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001c02:	4b46      	ldr	r3, [pc, #280]	; (8001d1c <HAL_ADC_MspInit+0x1c4>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c08:	4b44      	ldr	r3, [pc, #272]	; (8001d1c <HAL_ADC_MspInit+0x1c4>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001c0e:	4843      	ldr	r0, [pc, #268]	; (8001d1c <HAL_ADC_MspInit+0x1c4>)
 8001c10:	f001 f936 	bl	8002e80 <HAL_DMA_Init>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001c1a:	f7ff ff6f 	bl	8001afc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a3e      	ldr	r2, [pc, #248]	; (8001d1c <HAL_ADC_MspInit+0x1c4>)
 8001c22:	639a      	str	r2, [r3, #56]	; 0x38
 8001c24:	4a3d      	ldr	r2, [pc, #244]	; (8001d1c <HAL_ADC_MspInit+0x1c4>)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	2012      	movs	r0, #18
 8001c30:	f001 f8ef 	bl	8002e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001c34:	2012      	movs	r0, #18
 8001c36:	f001 f908 	bl	8002e4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001c3a:	e065      	b.n	8001d08 <HAL_ADC_MspInit+0x1b0>
  else if(hadc->Instance==ADC2)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a38      	ldr	r2, [pc, #224]	; (8001d24 <HAL_ADC_MspInit+0x1cc>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d160      	bne.n	8001d08 <HAL_ADC_MspInit+0x1b0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	613b      	str	r3, [r7, #16]
 8001c4a:	4b32      	ldr	r3, [pc, #200]	; (8001d14 <HAL_ADC_MspInit+0x1bc>)
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4e:	4a31      	ldr	r2, [pc, #196]	; (8001d14 <HAL_ADC_MspInit+0x1bc>)
 8001c50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c54:	6453      	str	r3, [r2, #68]	; 0x44
 8001c56:	4b2f      	ldr	r3, [pc, #188]	; (8001d14 <HAL_ADC_MspInit+0x1bc>)
 8001c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c5e:	613b      	str	r3, [r7, #16]
 8001c60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	4b2b      	ldr	r3, [pc, #172]	; (8001d14 <HAL_ADC_MspInit+0x1bc>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	4a2a      	ldr	r2, [pc, #168]	; (8001d14 <HAL_ADC_MspInit+0x1bc>)
 8001c6c:	f043 0304 	orr.w	r3, r3, #4
 8001c70:	6313      	str	r3, [r2, #48]	; 0x30
 8001c72:	4b28      	ldr	r3, [pc, #160]	; (8001d14 <HAL_ADC_MspInit+0x1bc>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c76:	f003 0304 	and.w	r3, r3, #4
 8001c7a:	60fb      	str	r3, [r7, #12]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO_FEEDBACK_Pin;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c82:	2303      	movs	r3, #3
 8001c84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVO_FEEDBACK_GPIO_Port, &GPIO_InitStruct);
 8001c8a:	f107 031c 	add.w	r3, r7, #28
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4821      	ldr	r0, [pc, #132]	; (8001d18 <HAL_ADC_MspInit+0x1c0>)
 8001c92:	f001 fc65 	bl	8003560 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8001c96:	4b24      	ldr	r3, [pc, #144]	; (8001d28 <HAL_ADC_MspInit+0x1d0>)
 8001c98:	4a24      	ldr	r2, [pc, #144]	; (8001d2c <HAL_ADC_MspInit+0x1d4>)
 8001c9a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8001c9c:	4b22      	ldr	r3, [pc, #136]	; (8001d28 <HAL_ADC_MspInit+0x1d0>)
 8001c9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ca2:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ca4:	4b20      	ldr	r3, [pc, #128]	; (8001d28 <HAL_ADC_MspInit+0x1d0>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001caa:	4b1f      	ldr	r3, [pc, #124]	; (8001d28 <HAL_ADC_MspInit+0x1d0>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001cb0:	4b1d      	ldr	r3, [pc, #116]	; (8001d28 <HAL_ADC_MspInit+0x1d0>)
 8001cb2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cb6:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001cb8:	4b1b      	ldr	r3, [pc, #108]	; (8001d28 <HAL_ADC_MspInit+0x1d0>)
 8001cba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001cbe:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001cc0:	4b19      	ldr	r3, [pc, #100]	; (8001d28 <HAL_ADC_MspInit+0x1d0>)
 8001cc2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cc6:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001cc8:	4b17      	ldr	r3, [pc, #92]	; (8001d28 <HAL_ADC_MspInit+0x1d0>)
 8001cca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cce:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001cd0:	4b15      	ldr	r3, [pc, #84]	; (8001d28 <HAL_ADC_MspInit+0x1d0>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cd6:	4b14      	ldr	r3, [pc, #80]	; (8001d28 <HAL_ADC_MspInit+0x1d0>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001cdc:	4812      	ldr	r0, [pc, #72]	; (8001d28 <HAL_ADC_MspInit+0x1d0>)
 8001cde:	f001 f8cf 	bl	8002e80 <HAL_DMA_Init>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <HAL_ADC_MspInit+0x194>
      Error_Handler();
 8001ce8:	f7ff ff08 	bl	8001afc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4a0e      	ldr	r2, [pc, #56]	; (8001d28 <HAL_ADC_MspInit+0x1d0>)
 8001cf0:	639a      	str	r2, [r3, #56]	; 0x38
 8001cf2:	4a0d      	ldr	r2, [pc, #52]	; (8001d28 <HAL_ADC_MspInit+0x1d0>)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	2012      	movs	r0, #18
 8001cfe:	f001 f888 	bl	8002e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001d02:	2012      	movs	r0, #18
 8001d04:	f001 f8a1 	bl	8002e4a <HAL_NVIC_EnableIRQ>
}
 8001d08:	bf00      	nop
 8001d0a:	3730      	adds	r7, #48	; 0x30
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40012000 	.word	0x40012000
 8001d14:	40023800 	.word	0x40023800
 8001d18:	40020800 	.word	0x40020800
 8001d1c:	20000288 	.word	0x20000288
 8001d20:	40026410 	.word	0x40026410
 8001d24:	40012100 	.word	0x40012100
 8001d28:	200002e8 	.word	0x200002e8
 8001d2c:	40026440 	.word	0x40026440

08001d30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a0b      	ldr	r2, [pc, #44]	; (8001d6c <HAL_TIM_Base_MspInit+0x3c>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d10d      	bne.n	8001d5e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	4b0a      	ldr	r3, [pc, #40]	; (8001d70 <HAL_TIM_Base_MspInit+0x40>)
 8001d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4a:	4a09      	ldr	r2, [pc, #36]	; (8001d70 <HAL_TIM_Base_MspInit+0x40>)
 8001d4c:	f043 0301 	orr.w	r3, r3, #1
 8001d50:	6453      	str	r3, [r2, #68]	; 0x44
 8001d52:	4b07      	ldr	r3, [pc, #28]	; (8001d70 <HAL_TIM_Base_MspInit+0x40>)
 8001d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	60fb      	str	r3, [r7, #12]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001d5e:	bf00      	nop
 8001d60:	3714      	adds	r7, #20
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	40010000 	.word	0x40010000
 8001d70:	40023800 	.word	0x40023800

08001d74 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b088      	sub	sp, #32
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d7c:	f107 030c 	add.w	r3, r7, #12
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	605a      	str	r2, [r3, #4]
 8001d86:	609a      	str	r2, [r3, #8]
 8001d88:	60da      	str	r2, [r3, #12]
 8001d8a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a12      	ldr	r2, [pc, #72]	; (8001ddc <HAL_TIM_MspPostInit+0x68>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d11e      	bne.n	8001dd4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d96:	2300      	movs	r3, #0
 8001d98:	60bb      	str	r3, [r7, #8]
 8001d9a:	4b11      	ldr	r3, [pc, #68]	; (8001de0 <HAL_TIM_MspPostInit+0x6c>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9e:	4a10      	ldr	r2, [pc, #64]	; (8001de0 <HAL_TIM_MspPostInit+0x6c>)
 8001da0:	f043 0301 	orr.w	r3, r3, #1
 8001da4:	6313      	str	r3, [r2, #48]	; 0x30
 8001da6:	4b0e      	ldr	r3, [pc, #56]	; (8001de0 <HAL_TIM_MspPostInit+0x6c>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	60bb      	str	r3, [r7, #8]
 8001db0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001db2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001db6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db8:	2302      	movs	r3, #2
 8001dba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc8:	f107 030c 	add.w	r3, r7, #12
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4805      	ldr	r0, [pc, #20]	; (8001de4 <HAL_TIM_MspPostInit+0x70>)
 8001dd0:	f001 fbc6 	bl	8003560 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001dd4:	bf00      	nop
 8001dd6:	3720      	adds	r7, #32
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40010000 	.word	0x40010000
 8001de0:	40023800 	.word	0x40023800
 8001de4:	40020000 	.word	0x40020000

08001de8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b08a      	sub	sp, #40	; 0x28
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df0:	f107 0314 	add.w	r3, r7, #20
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	605a      	str	r2, [r3, #4]
 8001dfa:	609a      	str	r2, [r3, #8]
 8001dfc:	60da      	str	r2, [r3, #12]
 8001dfe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a19      	ldr	r2, [pc, #100]	; (8001e6c <HAL_UART_MspInit+0x84>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d12b      	bne.n	8001e62 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	613b      	str	r3, [r7, #16]
 8001e0e:	4b18      	ldr	r3, [pc, #96]	; (8001e70 <HAL_UART_MspInit+0x88>)
 8001e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e12:	4a17      	ldr	r2, [pc, #92]	; (8001e70 <HAL_UART_MspInit+0x88>)
 8001e14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e18:	6413      	str	r3, [r2, #64]	; 0x40
 8001e1a:	4b15      	ldr	r3, [pc, #84]	; (8001e70 <HAL_UART_MspInit+0x88>)
 8001e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e22:	613b      	str	r3, [r7, #16]
 8001e24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e26:	2300      	movs	r3, #0
 8001e28:	60fb      	str	r3, [r7, #12]
 8001e2a:	4b11      	ldr	r3, [pc, #68]	; (8001e70 <HAL_UART_MspInit+0x88>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2e:	4a10      	ldr	r2, [pc, #64]	; (8001e70 <HAL_UART_MspInit+0x88>)
 8001e30:	f043 0301 	orr.w	r3, r3, #1
 8001e34:	6313      	str	r3, [r2, #48]	; 0x30
 8001e36:	4b0e      	ldr	r3, [pc, #56]	; (8001e70 <HAL_UART_MspInit+0x88>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e42:	230c      	movs	r3, #12
 8001e44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e46:	2302      	movs	r3, #2
 8001e48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e52:	2307      	movs	r3, #7
 8001e54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e56:	f107 0314 	add.w	r3, r7, #20
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4805      	ldr	r0, [pc, #20]	; (8001e74 <HAL_UART_MspInit+0x8c>)
 8001e5e:	f001 fb7f 	bl	8003560 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e62:	bf00      	nop
 8001e64:	3728      	adds	r7, #40	; 0x28
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40004400 	.word	0x40004400
 8001e70:	40023800 	.word	0x40023800
 8001e74:	40020000 	.word	0x40020000

08001e78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e7c:	e7fe      	b.n	8001e7c <NMI_Handler+0x4>

08001e7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e82:	e7fe      	b.n	8001e82 <HardFault_Handler+0x4>

08001e84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e88:	e7fe      	b.n	8001e88 <MemManage_Handler+0x4>

08001e8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e8e:	e7fe      	b.n	8001e8e <BusFault_Handler+0x4>

08001e90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e94:	e7fe      	b.n	8001e94 <UsageFault_Handler+0x4>

08001e96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e96:	b480      	push	{r7}
 8001e98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e9a:	bf00      	nop
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ea8:	bf00      	nop
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr

08001eb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eb6:	bf00      	nop
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ec4:	f000 f978 	bl	80021b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ec8:	bf00      	nop
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001ed0:	4803      	ldr	r0, [pc, #12]	; (8001ee0 <ADC_IRQHandler+0x14>)
 8001ed2:	f000 f9d4 	bl	800227e <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001ed6:	4803      	ldr	r0, [pc, #12]	; (8001ee4 <ADC_IRQHandler+0x18>)
 8001ed8:	f000 f9d1 	bl	800227e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001edc:	bf00      	nop
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	200001f8 	.word	0x200001f8
 8001ee4:	20000240 	.word	0x20000240

08001ee8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001eec:	4802      	ldr	r0, [pc, #8]	; (8001ef8 <DMA2_Stream0_IRQHandler+0x10>)
 8001eee:	f001 f8cd 	bl	800308c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001ef2:	bf00      	nop
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	20000288 	.word	0x20000288

08001efc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001f00:	4802      	ldr	r0, [pc, #8]	; (8001f0c <DMA2_Stream2_IRQHandler+0x10>)
 8001f02:	f001 f8c3 	bl	800308c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001f06:	bf00      	nop
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	200002e8 	.word	0x200002e8

08001f10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
	return 1;
 8001f14:	2301      	movs	r3, #1
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <_kill>:

int _kill(int pid, int sig)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f2a:	f003 fd49 	bl	80059c0 <__errno>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2216      	movs	r2, #22
 8001f32:	601a      	str	r2, [r3, #0]
	return -1;
 8001f34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <_exit>:

void _exit (int status)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f48:	f04f 31ff 	mov.w	r1, #4294967295
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f7ff ffe7 	bl	8001f20 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001f52:	e7fe      	b.n	8001f52 <_exit+0x12>

08001f54 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f60:	2300      	movs	r3, #0
 8001f62:	617b      	str	r3, [r7, #20]
 8001f64:	e00a      	b.n	8001f7c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f66:	f3af 8000 	nop.w
 8001f6a:	4601      	mov	r1, r0
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	1c5a      	adds	r2, r3, #1
 8001f70:	60ba      	str	r2, [r7, #8]
 8001f72:	b2ca      	uxtb	r2, r1
 8001f74:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	3301      	adds	r3, #1
 8001f7a:	617b      	str	r3, [r7, #20]
 8001f7c:	697a      	ldr	r2, [r7, #20]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	dbf0      	blt.n	8001f66 <_read+0x12>
	}

return len;
 8001f84:	687b      	ldr	r3, [r7, #4]
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3718      	adds	r7, #24
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b086      	sub	sp, #24
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	60f8      	str	r0, [r7, #12]
 8001f96:	60b9      	str	r1, [r7, #8]
 8001f98:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	617b      	str	r3, [r7, #20]
 8001f9e:	e009      	b.n	8001fb4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	1c5a      	adds	r2, r3, #1
 8001fa4:	60ba      	str	r2, [r7, #8]
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	617b      	str	r3, [r7, #20]
 8001fb4:	697a      	ldr	r2, [r7, #20]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	dbf1      	blt.n	8001fa0 <_write+0x12>
	}
	return len;
 8001fbc:	687b      	ldr	r3, [r7, #4]
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3718      	adds	r7, #24
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <_close>:

int _close(int file)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	b083      	sub	sp, #12
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
	return -1;
 8001fce:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr

08001fde <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	b083      	sub	sp, #12
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
 8001fe6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fee:	605a      	str	r2, [r3, #4]
	return 0;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr

08001ffe <_isatty>:

int _isatty(int file)
{
 8001ffe:	b480      	push	{r7}
 8002000:	b083      	sub	sp, #12
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
	return 1;
 8002006:	2301      	movs	r3, #1
}
 8002008:	4618      	mov	r0, r3
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
	return 0;
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3714      	adds	r7, #20
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
	...

08002030 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002038:	4a14      	ldr	r2, [pc, #80]	; (800208c <_sbrk+0x5c>)
 800203a:	4b15      	ldr	r3, [pc, #84]	; (8002090 <_sbrk+0x60>)
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002044:	4b13      	ldr	r3, [pc, #76]	; (8002094 <_sbrk+0x64>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d102      	bne.n	8002052 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800204c:	4b11      	ldr	r3, [pc, #68]	; (8002094 <_sbrk+0x64>)
 800204e:	4a12      	ldr	r2, [pc, #72]	; (8002098 <_sbrk+0x68>)
 8002050:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002052:	4b10      	ldr	r3, [pc, #64]	; (8002094 <_sbrk+0x64>)
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4413      	add	r3, r2
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	429a      	cmp	r2, r3
 800205e:	d207      	bcs.n	8002070 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002060:	f003 fcae 	bl	80059c0 <__errno>
 8002064:	4603      	mov	r3, r0
 8002066:	220c      	movs	r2, #12
 8002068:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800206a:	f04f 33ff 	mov.w	r3, #4294967295
 800206e:	e009      	b.n	8002084 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002070:	4b08      	ldr	r3, [pc, #32]	; (8002094 <_sbrk+0x64>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002076:	4b07      	ldr	r3, [pc, #28]	; (8002094 <_sbrk+0x64>)
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4413      	add	r3, r2
 800207e:	4a05      	ldr	r2, [pc, #20]	; (8002094 <_sbrk+0x64>)
 8002080:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002082:	68fb      	ldr	r3, [r7, #12]
}
 8002084:	4618      	mov	r0, r3
 8002086:	3718      	adds	r7, #24
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	20020000 	.word	0x20020000
 8002090:	00000400 	.word	0x00000400
 8002094:	20000e2c 	.word	0x20000e2c
 8002098:	20000e48 	.word	0x20000e48

0800209c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020a0:	4b06      	ldr	r3, [pc, #24]	; (80020bc <SystemInit+0x20>)
 80020a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020a6:	4a05      	ldr	r2, [pc, #20]	; (80020bc <SystemInit+0x20>)
 80020a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020b0:	bf00      	nop
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	e000ed00 	.word	0xe000ed00

080020c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80020c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020c4:	480d      	ldr	r0, [pc, #52]	; (80020fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80020c6:	490e      	ldr	r1, [pc, #56]	; (8002100 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80020c8:	4a0e      	ldr	r2, [pc, #56]	; (8002104 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020cc:	e002      	b.n	80020d4 <LoopCopyDataInit>

080020ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020d2:	3304      	adds	r3, #4

080020d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020d8:	d3f9      	bcc.n	80020ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020da:	4a0b      	ldr	r2, [pc, #44]	; (8002108 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80020dc:	4c0b      	ldr	r4, [pc, #44]	; (800210c <LoopFillZerobss+0x26>)
  movs r3, #0
 80020de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020e0:	e001      	b.n	80020e6 <LoopFillZerobss>

080020e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020e4:	3204      	adds	r2, #4

080020e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020e8:	d3fb      	bcc.n	80020e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020ea:	f7ff ffd7 	bl	800209c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020ee:	f003 fc6d 	bl	80059cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020f2:	f7ff f843 	bl	800117c <main>
  bx  lr    
 80020f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80020f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002100:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002104:	08008ca4 	.word	0x08008ca4
  ldr r2, =_sbss
 8002108:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800210c:	20000e44 	.word	0x20000e44

08002110 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002110:	e7fe      	b.n	8002110 <CAN1_RX0_IRQHandler>
	...

08002114 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002118:	4b0e      	ldr	r3, [pc, #56]	; (8002154 <HAL_Init+0x40>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a0d      	ldr	r2, [pc, #52]	; (8002154 <HAL_Init+0x40>)
 800211e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002122:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002124:	4b0b      	ldr	r3, [pc, #44]	; (8002154 <HAL_Init+0x40>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a0a      	ldr	r2, [pc, #40]	; (8002154 <HAL_Init+0x40>)
 800212a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800212e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002130:	4b08      	ldr	r3, [pc, #32]	; (8002154 <HAL_Init+0x40>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a07      	ldr	r2, [pc, #28]	; (8002154 <HAL_Init+0x40>)
 8002136:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800213a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800213c:	2003      	movs	r0, #3
 800213e:	f000 fe5d 	bl	8002dfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002142:	2000      	movs	r0, #0
 8002144:	f000 f808 	bl	8002158 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002148:	f7ff fcde 	bl	8001b08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	40023c00 	.word	0x40023c00

08002158 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002160:	4b12      	ldr	r3, [pc, #72]	; (80021ac <HAL_InitTick+0x54>)
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	4b12      	ldr	r3, [pc, #72]	; (80021b0 <HAL_InitTick+0x58>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	4619      	mov	r1, r3
 800216a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800216e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002172:	fbb2 f3f3 	udiv	r3, r2, r3
 8002176:	4618      	mov	r0, r3
 8002178:	f000 fe75 	bl	8002e66 <HAL_SYSTICK_Config>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e00e      	b.n	80021a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2b0f      	cmp	r3, #15
 800218a:	d80a      	bhi.n	80021a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800218c:	2200      	movs	r2, #0
 800218e:	6879      	ldr	r1, [r7, #4]
 8002190:	f04f 30ff 	mov.w	r0, #4294967295
 8002194:	f000 fe3d 	bl	8002e12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002198:	4a06      	ldr	r2, [pc, #24]	; (80021b4 <HAL_InitTick+0x5c>)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800219e:	2300      	movs	r3, #0
 80021a0:	e000      	b.n	80021a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3708      	adds	r7, #8
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	20000000 	.word	0x20000000
 80021b0:	20000008 	.word	0x20000008
 80021b4:	20000004 	.word	0x20000004

080021b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021bc:	4b06      	ldr	r3, [pc, #24]	; (80021d8 <HAL_IncTick+0x20>)
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	461a      	mov	r2, r3
 80021c2:	4b06      	ldr	r3, [pc, #24]	; (80021dc <HAL_IncTick+0x24>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4413      	add	r3, r2
 80021c8:	4a04      	ldr	r2, [pc, #16]	; (80021dc <HAL_IncTick+0x24>)
 80021ca:	6013      	str	r3, [r2, #0]
}
 80021cc:	bf00      	nop
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	20000008 	.word	0x20000008
 80021dc:	20000e30 	.word	0x20000e30

080021e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  return uwTick;
 80021e4:	4b03      	ldr	r3, [pc, #12]	; (80021f4 <HAL_GetTick+0x14>)
 80021e6:	681b      	ldr	r3, [r3, #0]
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	20000e30 	.word	0x20000e30

080021f8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002200:	2300      	movs	r3, #0
 8002202:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d101      	bne.n	800220e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e033      	b.n	8002276 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	2b00      	cmp	r3, #0
 8002214:	d109      	bne.n	800222a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f7ff fc9e 	bl	8001b58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222e:	f003 0310 	and.w	r3, r3, #16
 8002232:	2b00      	cmp	r3, #0
 8002234:	d118      	bne.n	8002268 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800223e:	f023 0302 	bic.w	r3, r3, #2
 8002242:	f043 0202 	orr.w	r2, r3, #2
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 fb7e 	bl	800294c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	f023 0303 	bic.w	r3, r3, #3
 800225e:	f043 0201 	orr.w	r2, r3, #1
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	641a      	str	r2, [r3, #64]	; 0x40
 8002266:	e001      	b.n	800226c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002274:	7bfb      	ldrb	r3, [r7, #15]
}
 8002276:	4618      	mov	r0, r3
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800227e:	b580      	push	{r7, lr}
 8002280:	b086      	sub	sp, #24
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002286:	2300      	movs	r3, #0
 8002288:	617b      	str	r3, [r7, #20]
 800228a:	2300      	movs	r3, #0
 800228c:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	f003 0320 	and.w	r3, r3, #32
 80022ac:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d049      	beq.n	8002348 <HAL_ADC_IRQHandler+0xca>
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d046      	beq.n	8002348 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	f003 0310 	and.w	r3, r3, #16
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d105      	bne.n	80022d2 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d12b      	bne.n	8002338 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d127      	bne.n	8002338 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ee:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d006      	beq.n	8002304 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002300:	2b00      	cmp	r3, #0
 8002302:	d119      	bne.n	8002338 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	685a      	ldr	r2, [r3, #4]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f022 0220 	bic.w	r2, r2, #32
 8002312:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002318:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002324:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d105      	bne.n	8002338 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002330:	f043 0201 	orr.w	r2, r3, #1
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f7ff fbaf 	bl	8001a9c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f06f 0212 	mvn.w	r2, #18
 8002346:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f003 0304 	and.w	r3, r3, #4
 800234e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002356:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d057      	beq.n	800240e <HAL_ADC_IRQHandler+0x190>
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d054      	beq.n	800240e <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002368:	f003 0310 	and.w	r3, r3, #16
 800236c:	2b00      	cmp	r3, #0
 800236e:	d105      	bne.n	800237c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002374:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d139      	bne.n	80023fe <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002390:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002394:	2b00      	cmp	r3, #0
 8002396:	d006      	beq.n	80023a6 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d12b      	bne.n	80023fe <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d124      	bne.n	80023fe <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d11d      	bne.n	80023fe <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d119      	bne.n	80023fe <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	685a      	ldr	r2, [r3, #4]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023d8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d105      	bne.n	80023fe <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	f043 0201 	orr.w	r2, r3, #1
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 fc22 	bl	8002c48 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f06f 020c 	mvn.w	r2, #12
 800240c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800241c:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d017      	beq.n	8002454 <HAL_ADC_IRQHandler+0x1d6>
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d014      	beq.n	8002454 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0301 	and.w	r3, r3, #1
 8002434:	2b01      	cmp	r3, #1
 8002436:	d10d      	bne.n	8002454 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f000 f93b 	bl	80026c0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f06f 0201 	mvn.w	r2, #1
 8002452:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f003 0320 	and.w	r3, r3, #32
 800245a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002462:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d015      	beq.n	8002496 <HAL_ADC_IRQHandler+0x218>
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d012      	beq.n	8002496 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002474:	f043 0202 	orr.w	r2, r3, #2
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f06f 0220 	mvn.w	r2, #32
 8002484:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 f924 	bl	80026d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f06f 0220 	mvn.w	r2, #32
 8002494:	601a      	str	r2, [r3, #0]
  }
}
 8002496:	bf00      	nop
 8002498:	3718      	adds	r7, #24
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
	...

080024a0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80024ac:	2300      	movs	r3, #0
 80024ae:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d101      	bne.n	80024be <HAL_ADC_Start_DMA+0x1e>
 80024ba:	2302      	movs	r3, #2
 80024bc:	e0e9      	b.n	8002692 <HAL_ADC_Start_DMA+0x1f2>
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2201      	movs	r2, #1
 80024c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d018      	beq.n	8002506 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	689a      	ldr	r2, [r3, #8]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f042 0201 	orr.w	r2, r2, #1
 80024e2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80024e4:	4b6d      	ldr	r3, [pc, #436]	; (800269c <HAL_ADC_Start_DMA+0x1fc>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a6d      	ldr	r2, [pc, #436]	; (80026a0 <HAL_ADC_Start_DMA+0x200>)
 80024ea:	fba2 2303 	umull	r2, r3, r2, r3
 80024ee:	0c9a      	lsrs	r2, r3, #18
 80024f0:	4613      	mov	r3, r2
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	4413      	add	r3, r2
 80024f6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80024f8:	e002      	b.n	8002500 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	3b01      	subs	r3, #1
 80024fe:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1f9      	bne.n	80024fa <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002510:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002514:	d107      	bne.n	8002526 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	689a      	ldr	r2, [r3, #8]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002524:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f003 0301 	and.w	r3, r3, #1
 8002530:	2b01      	cmp	r3, #1
 8002532:	f040 80a1 	bne.w	8002678 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800253e:	f023 0301 	bic.w	r3, r3, #1
 8002542:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002554:	2b00      	cmp	r3, #0
 8002556:	d007      	beq.n	8002568 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002560:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002570:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002574:	d106      	bne.n	8002584 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257a:	f023 0206 	bic.w	r2, r3, #6
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	645a      	str	r2, [r3, #68]	; 0x44
 8002582:	e002      	b.n	800258a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2200      	movs	r2, #0
 8002588:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002592:	4b44      	ldr	r3, [pc, #272]	; (80026a4 <HAL_ADC_Start_DMA+0x204>)
 8002594:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800259a:	4a43      	ldr	r2, [pc, #268]	; (80026a8 <HAL_ADC_Start_DMA+0x208>)
 800259c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a2:	4a42      	ldr	r2, [pc, #264]	; (80026ac <HAL_ADC_Start_DMA+0x20c>)
 80025a4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025aa:	4a41      	ldr	r2, [pc, #260]	; (80026b0 <HAL_ADC_Start_DMA+0x210>)
 80025ac:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80025b6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	685a      	ldr	r2, [r3, #4]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80025c6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	689a      	ldr	r2, [r3, #8]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025d6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	334c      	adds	r3, #76	; 0x4c
 80025e2:	4619      	mov	r1, r3
 80025e4:	68ba      	ldr	r2, [r7, #8]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f000 fcf8 	bl	8002fdc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f003 031f 	and.w	r3, r3, #31
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d12a      	bne.n	800264e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a2d      	ldr	r2, [pc, #180]	; (80026b4 <HAL_ADC_Start_DMA+0x214>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d015      	beq.n	800262e <HAL_ADC_Start_DMA+0x18e>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a2c      	ldr	r2, [pc, #176]	; (80026b8 <HAL_ADC_Start_DMA+0x218>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d105      	bne.n	8002618 <HAL_ADC_Start_DMA+0x178>
 800260c:	4b25      	ldr	r3, [pc, #148]	; (80026a4 <HAL_ADC_Start_DMA+0x204>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f003 031f 	and.w	r3, r3, #31
 8002614:	2b00      	cmp	r3, #0
 8002616:	d00a      	beq.n	800262e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a27      	ldr	r2, [pc, #156]	; (80026bc <HAL_ADC_Start_DMA+0x21c>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d136      	bne.n	8002690 <HAL_ADC_Start_DMA+0x1f0>
 8002622:	4b20      	ldr	r3, [pc, #128]	; (80026a4 <HAL_ADC_Start_DMA+0x204>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f003 0310 	and.w	r3, r3, #16
 800262a:	2b00      	cmp	r3, #0
 800262c:	d130      	bne.n	8002690 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d129      	bne.n	8002690 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	689a      	ldr	r2, [r3, #8]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800264a:	609a      	str	r2, [r3, #8]
 800264c:	e020      	b.n	8002690 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a18      	ldr	r2, [pc, #96]	; (80026b4 <HAL_ADC_Start_DMA+0x214>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d11b      	bne.n	8002690 <HAL_ADC_Start_DMA+0x1f0>
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d114      	bne.n	8002690 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	689a      	ldr	r2, [r3, #8]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002674:	609a      	str	r2, [r3, #8]
 8002676:	e00b      	b.n	8002690 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267c:	f043 0210 	orr.w	r2, r3, #16
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002688:	f043 0201 	orr.w	r2, r3, #1
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3718      	adds	r7, #24
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	20000000 	.word	0x20000000
 80026a0:	431bde83 	.word	0x431bde83
 80026a4:	40012300 	.word	0x40012300
 80026a8:	08002b45 	.word	0x08002b45
 80026ac:	08002bff 	.word	0x08002bff
 80026b0:	08002c1b 	.word	0x08002c1b
 80026b4:	40012000 	.word	0x40012000
 80026b8:	40012100 	.word	0x40012100
 80026bc:	40012200 	.word	0x40012200

080026c0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80026c8:	bf00      	nop
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80026f2:	2300      	movs	r3, #0
 80026f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d101      	bne.n	8002704 <HAL_ADC_ConfigChannel+0x1c>
 8002700:	2302      	movs	r3, #2
 8002702:	e113      	b.n	800292c <HAL_ADC_ConfigChannel+0x244>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2b09      	cmp	r3, #9
 8002712:	d925      	bls.n	8002760 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	68d9      	ldr	r1, [r3, #12]
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	b29b      	uxth	r3, r3
 8002720:	461a      	mov	r2, r3
 8002722:	4613      	mov	r3, r2
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	4413      	add	r3, r2
 8002728:	3b1e      	subs	r3, #30
 800272a:	2207      	movs	r2, #7
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	43da      	mvns	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	400a      	ands	r2, r1
 8002738:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68d9      	ldr	r1, [r3, #12]
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	689a      	ldr	r2, [r3, #8]
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	b29b      	uxth	r3, r3
 800274a:	4618      	mov	r0, r3
 800274c:	4603      	mov	r3, r0
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	4403      	add	r3, r0
 8002752:	3b1e      	subs	r3, #30
 8002754:	409a      	lsls	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	430a      	orrs	r2, r1
 800275c:	60da      	str	r2, [r3, #12]
 800275e:	e022      	b.n	80027a6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	6919      	ldr	r1, [r3, #16]
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	b29b      	uxth	r3, r3
 800276c:	461a      	mov	r2, r3
 800276e:	4613      	mov	r3, r2
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	4413      	add	r3, r2
 8002774:	2207      	movs	r2, #7
 8002776:	fa02 f303 	lsl.w	r3, r2, r3
 800277a:	43da      	mvns	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	400a      	ands	r2, r1
 8002782:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	6919      	ldr	r1, [r3, #16]
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	689a      	ldr	r2, [r3, #8]
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	b29b      	uxth	r3, r3
 8002794:	4618      	mov	r0, r3
 8002796:	4603      	mov	r3, r0
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	4403      	add	r3, r0
 800279c:	409a      	lsls	r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	430a      	orrs	r2, r1
 80027a4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	2b06      	cmp	r3, #6
 80027ac:	d824      	bhi.n	80027f8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685a      	ldr	r2, [r3, #4]
 80027b8:	4613      	mov	r3, r2
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	4413      	add	r3, r2
 80027be:	3b05      	subs	r3, #5
 80027c0:	221f      	movs	r2, #31
 80027c2:	fa02 f303 	lsl.w	r3, r2, r3
 80027c6:	43da      	mvns	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	400a      	ands	r2, r1
 80027ce:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	b29b      	uxth	r3, r3
 80027dc:	4618      	mov	r0, r3
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685a      	ldr	r2, [r3, #4]
 80027e2:	4613      	mov	r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	4413      	add	r3, r2
 80027e8:	3b05      	subs	r3, #5
 80027ea:	fa00 f203 	lsl.w	r2, r0, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	430a      	orrs	r2, r1
 80027f4:	635a      	str	r2, [r3, #52]	; 0x34
 80027f6:	e04c      	b.n	8002892 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	2b0c      	cmp	r3, #12
 80027fe:	d824      	bhi.n	800284a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685a      	ldr	r2, [r3, #4]
 800280a:	4613      	mov	r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	4413      	add	r3, r2
 8002810:	3b23      	subs	r3, #35	; 0x23
 8002812:	221f      	movs	r2, #31
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	43da      	mvns	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	400a      	ands	r2, r1
 8002820:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	b29b      	uxth	r3, r3
 800282e:	4618      	mov	r0, r3
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685a      	ldr	r2, [r3, #4]
 8002834:	4613      	mov	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	4413      	add	r3, r2
 800283a:	3b23      	subs	r3, #35	; 0x23
 800283c:	fa00 f203 	lsl.w	r2, r0, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	430a      	orrs	r2, r1
 8002846:	631a      	str	r2, [r3, #48]	; 0x30
 8002848:	e023      	b.n	8002892 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	4613      	mov	r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	4413      	add	r3, r2
 800285a:	3b41      	subs	r3, #65	; 0x41
 800285c:	221f      	movs	r2, #31
 800285e:	fa02 f303 	lsl.w	r3, r2, r3
 8002862:	43da      	mvns	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	400a      	ands	r2, r1
 800286a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	b29b      	uxth	r3, r3
 8002878:	4618      	mov	r0, r3
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685a      	ldr	r2, [r3, #4]
 800287e:	4613      	mov	r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	4413      	add	r3, r2
 8002884:	3b41      	subs	r3, #65	; 0x41
 8002886:	fa00 f203 	lsl.w	r2, r0, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	430a      	orrs	r2, r1
 8002890:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002892:	4b29      	ldr	r3, [pc, #164]	; (8002938 <HAL_ADC_ConfigChannel+0x250>)
 8002894:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a28      	ldr	r2, [pc, #160]	; (800293c <HAL_ADC_ConfigChannel+0x254>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d10f      	bne.n	80028c0 <HAL_ADC_ConfigChannel+0x1d8>
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2b12      	cmp	r3, #18
 80028a6:	d10b      	bne.n	80028c0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a1d      	ldr	r2, [pc, #116]	; (800293c <HAL_ADC_ConfigChannel+0x254>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d12b      	bne.n	8002922 <HAL_ADC_ConfigChannel+0x23a>
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a1c      	ldr	r2, [pc, #112]	; (8002940 <HAL_ADC_ConfigChannel+0x258>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d003      	beq.n	80028dc <HAL_ADC_ConfigChannel+0x1f4>
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2b11      	cmp	r3, #17
 80028da:	d122      	bne.n	8002922 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a11      	ldr	r2, [pc, #68]	; (8002940 <HAL_ADC_ConfigChannel+0x258>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d111      	bne.n	8002922 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80028fe:	4b11      	ldr	r3, [pc, #68]	; (8002944 <HAL_ADC_ConfigChannel+0x25c>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a11      	ldr	r2, [pc, #68]	; (8002948 <HAL_ADC_ConfigChannel+0x260>)
 8002904:	fba2 2303 	umull	r2, r3, r2, r3
 8002908:	0c9a      	lsrs	r2, r3, #18
 800290a:	4613      	mov	r3, r2
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	4413      	add	r3, r2
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002914:	e002      	b.n	800291c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	3b01      	subs	r3, #1
 800291a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1f9      	bne.n	8002916 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800292a:	2300      	movs	r3, #0
}
 800292c:	4618      	mov	r0, r3
 800292e:	3714      	adds	r7, #20
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr
 8002938:	40012300 	.word	0x40012300
 800293c:	40012000 	.word	0x40012000
 8002940:	10000012 	.word	0x10000012
 8002944:	20000000 	.word	0x20000000
 8002948:	431bde83 	.word	0x431bde83

0800294c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800294c:	b480      	push	{r7}
 800294e:	b085      	sub	sp, #20
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002954:	4b79      	ldr	r3, [pc, #484]	; (8002b3c <ADC_Init+0x1f0>)
 8002956:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	685a      	ldr	r2, [r3, #4]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	431a      	orrs	r2, r3
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	685a      	ldr	r2, [r3, #4]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002980:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	6859      	ldr	r1, [r3, #4]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	691b      	ldr	r3, [r3, #16]
 800298c:	021a      	lsls	r2, r3, #8
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	430a      	orrs	r2, r1
 8002994:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	685a      	ldr	r2, [r3, #4]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80029a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	6859      	ldr	r1, [r3, #4]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689a      	ldr	r2, [r3, #8]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	430a      	orrs	r2, r1
 80029b6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	689a      	ldr	r2, [r3, #8]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	6899      	ldr	r1, [r3, #8]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	68da      	ldr	r2, [r3, #12]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	430a      	orrs	r2, r1
 80029d8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029de:	4a58      	ldr	r2, [pc, #352]	; (8002b40 <ADC_Init+0x1f4>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d022      	beq.n	8002a2a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	689a      	ldr	r2, [r3, #8]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029f2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	6899      	ldr	r1, [r3, #8]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	430a      	orrs	r2, r1
 8002a04:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	689a      	ldr	r2, [r3, #8]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a14:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	6899      	ldr	r1, [r3, #8]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	430a      	orrs	r2, r1
 8002a26:	609a      	str	r2, [r3, #8]
 8002a28:	e00f      	b.n	8002a4a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	689a      	ldr	r2, [r3, #8]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a38:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	689a      	ldr	r2, [r3, #8]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a48:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	689a      	ldr	r2, [r3, #8]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f022 0202 	bic.w	r2, r2, #2
 8002a58:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	6899      	ldr	r1, [r3, #8]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	7e1b      	ldrb	r3, [r3, #24]
 8002a64:	005a      	lsls	r2, r3, #1
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d01b      	beq.n	8002ab0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	685a      	ldr	r2, [r3, #4]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a86:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	685a      	ldr	r2, [r3, #4]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002a96:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6859      	ldr	r1, [r3, #4]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	035a      	lsls	r2, r3, #13
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	605a      	str	r2, [r3, #4]
 8002aae:	e007      	b.n	8002ac0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	685a      	ldr	r2, [r3, #4]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002abe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002ace:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	69db      	ldr	r3, [r3, #28]
 8002ada:	3b01      	subs	r3, #1
 8002adc:	051a      	lsls	r2, r3, #20
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	689a      	ldr	r2, [r3, #8]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002af4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	6899      	ldr	r1, [r3, #8]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b02:	025a      	lsls	r2, r3, #9
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	689a      	ldr	r2, [r3, #8]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b1a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	6899      	ldr	r1, [r3, #8]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	029a      	lsls	r2, r3, #10
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	609a      	str	r2, [r3, #8]
}
 8002b30:	bf00      	nop
 8002b32:	3714      	adds	r7, #20
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr
 8002b3c:	40012300 	.word	0x40012300
 8002b40:	0f000001 	.word	0x0f000001

08002b44 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b50:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b56:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d13c      	bne.n	8002bd8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b62:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d12b      	bne.n	8002bd0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d127      	bne.n	8002bd0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b86:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d006      	beq.n	8002b9c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d119      	bne.n	8002bd0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	685a      	ldr	r2, [r3, #4]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f022 0220 	bic.w	r2, r2, #32
 8002baa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d105      	bne.n	8002bd0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc8:	f043 0201 	orr.w	r2, r3, #1
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002bd0:	68f8      	ldr	r0, [r7, #12]
 8002bd2:	f7fe ff63 	bl	8001a9c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002bd6:	e00e      	b.n	8002bf6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bdc:	f003 0310 	and.w	r3, r3, #16
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d003      	beq.n	8002bec <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002be4:	68f8      	ldr	r0, [r7, #12]
 8002be6:	f7ff fd75 	bl	80026d4 <HAL_ADC_ErrorCallback>
}
 8002bea:	e004      	b.n	8002bf6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	4798      	blx	r3
}
 8002bf6:	bf00      	nop
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b084      	sub	sp, #16
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c0a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002c0c:	68f8      	ldr	r0, [r7, #12]
 8002c0e:	f7fe ff3b 	bl	8001a88 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c12:	bf00      	nop
 8002c14:	3710      	adds	r7, #16
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b084      	sub	sp, #16
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c26:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2240      	movs	r2, #64	; 0x40
 8002c2c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c32:	f043 0204 	orr.w	r2, r3, #4
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002c3a:	68f8      	ldr	r0, [r7, #12]
 8002c3c:	f7ff fd4a 	bl	80026d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c40:	bf00      	nop
 8002c42:	3710      	adds	r7, #16
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f003 0307 	and.w	r3, r3, #7
 8002c6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c72:	68ba      	ldr	r2, [r7, #8]
 8002c74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c78:	4013      	ands	r3, r2
 8002c7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c8e:	4a04      	ldr	r2, [pc, #16]	; (8002ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	60d3      	str	r3, [r2, #12]
}
 8002c94:	bf00      	nop
 8002c96:	3714      	adds	r7, #20
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr
 8002ca0:	e000ed00 	.word	0xe000ed00

08002ca4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ca8:	4b04      	ldr	r3, [pc, #16]	; (8002cbc <__NVIC_GetPriorityGrouping+0x18>)
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	0a1b      	lsrs	r3, r3, #8
 8002cae:	f003 0307 	and.w	r3, r3, #7
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr
 8002cbc:	e000ed00 	.word	0xe000ed00

08002cc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	db0b      	blt.n	8002cea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cd2:	79fb      	ldrb	r3, [r7, #7]
 8002cd4:	f003 021f 	and.w	r2, r3, #31
 8002cd8:	4907      	ldr	r1, [pc, #28]	; (8002cf8 <__NVIC_EnableIRQ+0x38>)
 8002cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cde:	095b      	lsrs	r3, r3, #5
 8002ce0:	2001      	movs	r0, #1
 8002ce2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cea:	bf00      	nop
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	e000e100 	.word	0xe000e100

08002cfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	4603      	mov	r3, r0
 8002d04:	6039      	str	r1, [r7, #0]
 8002d06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	db0a      	blt.n	8002d26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	b2da      	uxtb	r2, r3
 8002d14:	490c      	ldr	r1, [pc, #48]	; (8002d48 <__NVIC_SetPriority+0x4c>)
 8002d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1a:	0112      	lsls	r2, r2, #4
 8002d1c:	b2d2      	uxtb	r2, r2
 8002d1e:	440b      	add	r3, r1
 8002d20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d24:	e00a      	b.n	8002d3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	b2da      	uxtb	r2, r3
 8002d2a:	4908      	ldr	r1, [pc, #32]	; (8002d4c <__NVIC_SetPriority+0x50>)
 8002d2c:	79fb      	ldrb	r3, [r7, #7]
 8002d2e:	f003 030f 	and.w	r3, r3, #15
 8002d32:	3b04      	subs	r3, #4
 8002d34:	0112      	lsls	r2, r2, #4
 8002d36:	b2d2      	uxtb	r2, r2
 8002d38:	440b      	add	r3, r1
 8002d3a:	761a      	strb	r2, [r3, #24]
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr
 8002d48:	e000e100 	.word	0xe000e100
 8002d4c:	e000ed00 	.word	0xe000ed00

08002d50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b089      	sub	sp, #36	; 0x24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f003 0307 	and.w	r3, r3, #7
 8002d62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	f1c3 0307 	rsb	r3, r3, #7
 8002d6a:	2b04      	cmp	r3, #4
 8002d6c:	bf28      	it	cs
 8002d6e:	2304      	movcs	r3, #4
 8002d70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	3304      	adds	r3, #4
 8002d76:	2b06      	cmp	r3, #6
 8002d78:	d902      	bls.n	8002d80 <NVIC_EncodePriority+0x30>
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	3b03      	subs	r3, #3
 8002d7e:	e000      	b.n	8002d82 <NVIC_EncodePriority+0x32>
 8002d80:	2300      	movs	r3, #0
 8002d82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d84:	f04f 32ff 	mov.w	r2, #4294967295
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8e:	43da      	mvns	r2, r3
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	401a      	ands	r2, r3
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d98:	f04f 31ff 	mov.w	r1, #4294967295
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002da2:	43d9      	mvns	r1, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002da8:	4313      	orrs	r3, r2
         );
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3724      	adds	r7, #36	; 0x24
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
	...

08002db8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dc8:	d301      	bcc.n	8002dce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e00f      	b.n	8002dee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dce:	4a0a      	ldr	r2, [pc, #40]	; (8002df8 <SysTick_Config+0x40>)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dd6:	210f      	movs	r1, #15
 8002dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ddc:	f7ff ff8e 	bl	8002cfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002de0:	4b05      	ldr	r3, [pc, #20]	; (8002df8 <SysTick_Config+0x40>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002de6:	4b04      	ldr	r3, [pc, #16]	; (8002df8 <SysTick_Config+0x40>)
 8002de8:	2207      	movs	r2, #7
 8002dea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	e000e010 	.word	0xe000e010

08002dfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f7ff ff29 	bl	8002c5c <__NVIC_SetPriorityGrouping>
}
 8002e0a:	bf00      	nop
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b086      	sub	sp, #24
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	4603      	mov	r3, r0
 8002e1a:	60b9      	str	r1, [r7, #8]
 8002e1c:	607a      	str	r2, [r7, #4]
 8002e1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e20:	2300      	movs	r3, #0
 8002e22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e24:	f7ff ff3e 	bl	8002ca4 <__NVIC_GetPriorityGrouping>
 8002e28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	68b9      	ldr	r1, [r7, #8]
 8002e2e:	6978      	ldr	r0, [r7, #20]
 8002e30:	f7ff ff8e 	bl	8002d50 <NVIC_EncodePriority>
 8002e34:	4602      	mov	r2, r0
 8002e36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e3a:	4611      	mov	r1, r2
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff ff5d 	bl	8002cfc <__NVIC_SetPriority>
}
 8002e42:	bf00      	nop
 8002e44:	3718      	adds	r7, #24
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b082      	sub	sp, #8
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	4603      	mov	r3, r0
 8002e52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7ff ff31 	bl	8002cc0 <__NVIC_EnableIRQ>
}
 8002e5e:	bf00      	nop
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b082      	sub	sp, #8
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f7ff ffa2 	bl	8002db8 <SysTick_Config>
 8002e74:	4603      	mov	r3, r0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
	...

08002e80 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b086      	sub	sp, #24
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e8c:	f7ff f9a8 	bl	80021e0 <HAL_GetTick>
 8002e90:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d101      	bne.n	8002e9c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e099      	b.n	8002fd0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f022 0201 	bic.w	r2, r2, #1
 8002eba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ebc:	e00f      	b.n	8002ede <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ebe:	f7ff f98f 	bl	80021e0 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	2b05      	cmp	r3, #5
 8002eca:	d908      	bls.n	8002ede <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2220      	movs	r2, #32
 8002ed0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2203      	movs	r2, #3
 8002ed6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e078      	b.n	8002fd0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0301 	and.w	r3, r3, #1
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d1e8      	bne.n	8002ebe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ef4:	697a      	ldr	r2, [r7, #20]
 8002ef6:	4b38      	ldr	r3, [pc, #224]	; (8002fd8 <HAL_DMA_Init+0x158>)
 8002ef8:	4013      	ands	r3, r2
 8002efa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685a      	ldr	r2, [r3, #4]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a1b      	ldr	r3, [r3, #32]
 8002f28:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f2a:	697a      	ldr	r2, [r7, #20]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f34:	2b04      	cmp	r3, #4
 8002f36:	d107      	bne.n	8002f48 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f40:	4313      	orrs	r3, r2
 8002f42:	697a      	ldr	r2, [r7, #20]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	f023 0307 	bic.w	r3, r3, #7
 8002f5e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f64:	697a      	ldr	r2, [r7, #20]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6e:	2b04      	cmp	r3, #4
 8002f70:	d117      	bne.n	8002fa2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f76:	697a      	ldr	r2, [r7, #20]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d00e      	beq.n	8002fa2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f000 fa6f 	bl	8003468 <DMA_CheckFifoParam>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d008      	beq.n	8002fa2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2240      	movs	r2, #64	; 0x40
 8002f94:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e016      	b.n	8002fd0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	697a      	ldr	r2, [r7, #20]
 8002fa8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 fa26 	bl	80033fc <DMA_CalcBaseAndBitshift>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb8:	223f      	movs	r2, #63	; 0x3f
 8002fba:	409a      	lsls	r2, r3
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3718      	adds	r7, #24
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	f010803f 	.word	0xf010803f

08002fdc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	607a      	str	r2, [r7, #4]
 8002fe8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fea:	2300      	movs	r3, #0
 8002fec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d101      	bne.n	8003002 <HAL_DMA_Start_IT+0x26>
 8002ffe:	2302      	movs	r3, #2
 8003000:	e040      	b.n	8003084 <HAL_DMA_Start_IT+0xa8>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2201      	movs	r2, #1
 8003006:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b01      	cmp	r3, #1
 8003014:	d12f      	bne.n	8003076 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2202      	movs	r2, #2
 800301a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	68b9      	ldr	r1, [r7, #8]
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	f000 f9b8 	bl	80033a0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003034:	223f      	movs	r2, #63	; 0x3f
 8003036:	409a      	lsls	r2, r3
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f042 0216 	orr.w	r2, r2, #22
 800304a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003050:	2b00      	cmp	r3, #0
 8003052:	d007      	beq.n	8003064 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f042 0208 	orr.w	r2, r2, #8
 8003062:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f042 0201 	orr.w	r2, r2, #1
 8003072:	601a      	str	r2, [r3, #0]
 8003074:	e005      	b.n	8003082 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800307e:	2302      	movs	r3, #2
 8003080:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003082:	7dfb      	ldrb	r3, [r7, #23]
}
 8003084:	4618      	mov	r0, r3
 8003086:	3718      	adds	r7, #24
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b086      	sub	sp, #24
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003094:	2300      	movs	r3, #0
 8003096:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003098:	4b8e      	ldr	r3, [pc, #568]	; (80032d4 <HAL_DMA_IRQHandler+0x248>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a8e      	ldr	r2, [pc, #568]	; (80032d8 <HAL_DMA_IRQHandler+0x24c>)
 800309e:	fba2 2303 	umull	r2, r3, r2, r3
 80030a2:	0a9b      	lsrs	r3, r3, #10
 80030a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b6:	2208      	movs	r2, #8
 80030b8:	409a      	lsls	r2, r3
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	4013      	ands	r3, r2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d01a      	beq.n	80030f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0304 	and.w	r3, r3, #4
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d013      	beq.n	80030f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f022 0204 	bic.w	r2, r2, #4
 80030de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e4:	2208      	movs	r2, #8
 80030e6:	409a      	lsls	r2, r3
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f0:	f043 0201 	orr.w	r2, r3, #1
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030fc:	2201      	movs	r2, #1
 80030fe:	409a      	lsls	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	4013      	ands	r3, r2
 8003104:	2b00      	cmp	r3, #0
 8003106:	d012      	beq.n	800312e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00b      	beq.n	800312e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800311a:	2201      	movs	r2, #1
 800311c:	409a      	lsls	r2, r3
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003126:	f043 0202 	orr.w	r2, r3, #2
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003132:	2204      	movs	r2, #4
 8003134:	409a      	lsls	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	4013      	ands	r3, r2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d012      	beq.n	8003164 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0302 	and.w	r3, r3, #2
 8003148:	2b00      	cmp	r3, #0
 800314a:	d00b      	beq.n	8003164 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003150:	2204      	movs	r2, #4
 8003152:	409a      	lsls	r2, r3
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800315c:	f043 0204 	orr.w	r2, r3, #4
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003168:	2210      	movs	r2, #16
 800316a:	409a      	lsls	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	4013      	ands	r3, r2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d043      	beq.n	80031fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0308 	and.w	r3, r3, #8
 800317e:	2b00      	cmp	r3, #0
 8003180:	d03c      	beq.n	80031fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003186:	2210      	movs	r2, #16
 8003188:	409a      	lsls	r2, r3
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d018      	beq.n	80031ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d108      	bne.n	80031bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d024      	beq.n	80031fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	4798      	blx	r3
 80031ba:	e01f      	b.n	80031fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d01b      	beq.n	80031fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	4798      	blx	r3
 80031cc:	e016      	b.n	80031fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d107      	bne.n	80031ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f022 0208 	bic.w	r2, r2, #8
 80031ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d003      	beq.n	80031fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003200:	2220      	movs	r2, #32
 8003202:	409a      	lsls	r2, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	4013      	ands	r3, r2
 8003208:	2b00      	cmp	r3, #0
 800320a:	f000 808f 	beq.w	800332c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0310 	and.w	r3, r3, #16
 8003218:	2b00      	cmp	r3, #0
 800321a:	f000 8087 	beq.w	800332c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003222:	2220      	movs	r2, #32
 8003224:	409a      	lsls	r2, r3
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003230:	b2db      	uxtb	r3, r3
 8003232:	2b05      	cmp	r3, #5
 8003234:	d136      	bne.n	80032a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f022 0216 	bic.w	r2, r2, #22
 8003244:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	695a      	ldr	r2, [r3, #20]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003254:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325a:	2b00      	cmp	r3, #0
 800325c:	d103      	bne.n	8003266 <HAL_DMA_IRQHandler+0x1da>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003262:	2b00      	cmp	r3, #0
 8003264:	d007      	beq.n	8003276 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f022 0208 	bic.w	r2, r2, #8
 8003274:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800327a:	223f      	movs	r2, #63	; 0x3f
 800327c:	409a      	lsls	r2, r3
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2201      	movs	r2, #1
 8003286:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003296:	2b00      	cmp	r3, #0
 8003298:	d07e      	beq.n	8003398 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	4798      	blx	r3
        }
        return;
 80032a2:	e079      	b.n	8003398 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d01d      	beq.n	80032ee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d10d      	bne.n	80032dc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d031      	beq.n	800332c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	4798      	blx	r3
 80032d0:	e02c      	b.n	800332c <HAL_DMA_IRQHandler+0x2a0>
 80032d2:	bf00      	nop
 80032d4:	20000000 	.word	0x20000000
 80032d8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d023      	beq.n	800332c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	4798      	blx	r3
 80032ec:	e01e      	b.n	800332c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d10f      	bne.n	800331c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f022 0210 	bic.w	r2, r2, #16
 800330a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003320:	2b00      	cmp	r3, #0
 8003322:	d003      	beq.n	800332c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003330:	2b00      	cmp	r3, #0
 8003332:	d032      	beq.n	800339a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	2b00      	cmp	r3, #0
 800333e:	d022      	beq.n	8003386 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2205      	movs	r2, #5
 8003344:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f022 0201 	bic.w	r2, r2, #1
 8003356:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	3301      	adds	r3, #1
 800335c:	60bb      	str	r3, [r7, #8]
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	429a      	cmp	r2, r3
 8003362:	d307      	bcc.n	8003374 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	2b00      	cmp	r3, #0
 8003370:	d1f2      	bne.n	8003358 <HAL_DMA_IRQHandler+0x2cc>
 8003372:	e000      	b.n	8003376 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003374:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2201      	movs	r2, #1
 800337a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800338a:	2b00      	cmp	r3, #0
 800338c:	d005      	beq.n	800339a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	4798      	blx	r3
 8003396:	e000      	b.n	800339a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003398:	bf00      	nop
    }
  }
}
 800339a:	3718      	adds	r7, #24
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]
 80033ac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80033bc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	683a      	ldr	r2, [r7, #0]
 80033c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	2b40      	cmp	r3, #64	; 0x40
 80033cc:	d108      	bne.n	80033e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68ba      	ldr	r2, [r7, #8]
 80033dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80033de:	e007      	b.n	80033f0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68ba      	ldr	r2, [r7, #8]
 80033e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	60da      	str	r2, [r3, #12]
}
 80033f0:	bf00      	nop
 80033f2:	3714      	adds	r7, #20
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr

080033fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	b2db      	uxtb	r3, r3
 800340a:	3b10      	subs	r3, #16
 800340c:	4a14      	ldr	r2, [pc, #80]	; (8003460 <DMA_CalcBaseAndBitshift+0x64>)
 800340e:	fba2 2303 	umull	r2, r3, r2, r3
 8003412:	091b      	lsrs	r3, r3, #4
 8003414:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003416:	4a13      	ldr	r2, [pc, #76]	; (8003464 <DMA_CalcBaseAndBitshift+0x68>)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	4413      	add	r3, r2
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	461a      	mov	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2b03      	cmp	r3, #3
 8003428:	d909      	bls.n	800343e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003432:	f023 0303 	bic.w	r3, r3, #3
 8003436:	1d1a      	adds	r2, r3, #4
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	659a      	str	r2, [r3, #88]	; 0x58
 800343c:	e007      	b.n	800344e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003446:	f023 0303 	bic.w	r3, r3, #3
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003452:	4618      	mov	r0, r3
 8003454:	3714      	adds	r7, #20
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	aaaaaaab 	.word	0xaaaaaaab
 8003464:	080088b0 	.word	0x080088b0

08003468 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003470:	2300      	movs	r3, #0
 8003472:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003478:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d11f      	bne.n	80034c2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	2b03      	cmp	r3, #3
 8003486:	d856      	bhi.n	8003536 <DMA_CheckFifoParam+0xce>
 8003488:	a201      	add	r2, pc, #4	; (adr r2, 8003490 <DMA_CheckFifoParam+0x28>)
 800348a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800348e:	bf00      	nop
 8003490:	080034a1 	.word	0x080034a1
 8003494:	080034b3 	.word	0x080034b3
 8003498:	080034a1 	.word	0x080034a1
 800349c:	08003537 	.word	0x08003537
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d046      	beq.n	800353a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034b0:	e043      	b.n	800353a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80034ba:	d140      	bne.n	800353e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034c0:	e03d      	b.n	800353e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034ca:	d121      	bne.n	8003510 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	2b03      	cmp	r3, #3
 80034d0:	d837      	bhi.n	8003542 <DMA_CheckFifoParam+0xda>
 80034d2:	a201      	add	r2, pc, #4	; (adr r2, 80034d8 <DMA_CheckFifoParam+0x70>)
 80034d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034d8:	080034e9 	.word	0x080034e9
 80034dc:	080034ef 	.word	0x080034ef
 80034e0:	080034e9 	.word	0x080034e9
 80034e4:	08003501 	.word	0x08003501
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	73fb      	strb	r3, [r7, #15]
      break;
 80034ec:	e030      	b.n	8003550 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d025      	beq.n	8003546 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034fe:	e022      	b.n	8003546 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003504:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003508:	d11f      	bne.n	800354a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800350e:	e01c      	b.n	800354a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	2b02      	cmp	r3, #2
 8003514:	d903      	bls.n	800351e <DMA_CheckFifoParam+0xb6>
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	2b03      	cmp	r3, #3
 800351a:	d003      	beq.n	8003524 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800351c:	e018      	b.n	8003550 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	73fb      	strb	r3, [r7, #15]
      break;
 8003522:	e015      	b.n	8003550 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003528:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00e      	beq.n	800354e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	73fb      	strb	r3, [r7, #15]
      break;
 8003534:	e00b      	b.n	800354e <DMA_CheckFifoParam+0xe6>
      break;
 8003536:	bf00      	nop
 8003538:	e00a      	b.n	8003550 <DMA_CheckFifoParam+0xe8>
      break;
 800353a:	bf00      	nop
 800353c:	e008      	b.n	8003550 <DMA_CheckFifoParam+0xe8>
      break;
 800353e:	bf00      	nop
 8003540:	e006      	b.n	8003550 <DMA_CheckFifoParam+0xe8>
      break;
 8003542:	bf00      	nop
 8003544:	e004      	b.n	8003550 <DMA_CheckFifoParam+0xe8>
      break;
 8003546:	bf00      	nop
 8003548:	e002      	b.n	8003550 <DMA_CheckFifoParam+0xe8>
      break;   
 800354a:	bf00      	nop
 800354c:	e000      	b.n	8003550 <DMA_CheckFifoParam+0xe8>
      break;
 800354e:	bf00      	nop
    }
  } 
  
  return status; 
 8003550:	7bfb      	ldrb	r3, [r7, #15]
}
 8003552:	4618      	mov	r0, r3
 8003554:	3714      	adds	r7, #20
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop

08003560 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003560:	b480      	push	{r7}
 8003562:	b089      	sub	sp, #36	; 0x24
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800356a:	2300      	movs	r3, #0
 800356c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800356e:	2300      	movs	r3, #0
 8003570:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003572:	2300      	movs	r3, #0
 8003574:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003576:	2300      	movs	r3, #0
 8003578:	61fb      	str	r3, [r7, #28]
 800357a:	e165      	b.n	8003848 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800357c:	2201      	movs	r2, #1
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	fa02 f303 	lsl.w	r3, r2, r3
 8003584:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	697a      	ldr	r2, [r7, #20]
 800358c:	4013      	ands	r3, r2
 800358e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	429a      	cmp	r2, r3
 8003596:	f040 8154 	bne.w	8003842 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f003 0303 	and.w	r3, r3, #3
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d005      	beq.n	80035b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d130      	bne.n	8003614 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	2203      	movs	r2, #3
 80035be:	fa02 f303 	lsl.w	r3, r2, r3
 80035c2:	43db      	mvns	r3, r3
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	4013      	ands	r3, r2
 80035c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	68da      	ldr	r2, [r3, #12]
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	005b      	lsls	r3, r3, #1
 80035d2:	fa02 f303 	lsl.w	r3, r2, r3
 80035d6:	69ba      	ldr	r2, [r7, #24]
 80035d8:	4313      	orrs	r3, r2
 80035da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	69ba      	ldr	r2, [r7, #24]
 80035e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035e8:	2201      	movs	r2, #1
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	fa02 f303 	lsl.w	r3, r2, r3
 80035f0:	43db      	mvns	r3, r3
 80035f2:	69ba      	ldr	r2, [r7, #24]
 80035f4:	4013      	ands	r3, r2
 80035f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	091b      	lsrs	r3, r3, #4
 80035fe:	f003 0201 	and.w	r2, r3, #1
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	fa02 f303 	lsl.w	r3, r2, r3
 8003608:	69ba      	ldr	r2, [r7, #24]
 800360a:	4313      	orrs	r3, r2
 800360c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f003 0303 	and.w	r3, r3, #3
 800361c:	2b03      	cmp	r3, #3
 800361e:	d017      	beq.n	8003650 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	005b      	lsls	r3, r3, #1
 800362a:	2203      	movs	r2, #3
 800362c:	fa02 f303 	lsl.w	r3, r2, r3
 8003630:	43db      	mvns	r3, r3
 8003632:	69ba      	ldr	r2, [r7, #24]
 8003634:	4013      	ands	r3, r2
 8003636:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	689a      	ldr	r2, [r3, #8]
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	005b      	lsls	r3, r3, #1
 8003640:	fa02 f303 	lsl.w	r3, r2, r3
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	4313      	orrs	r3, r2
 8003648:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f003 0303 	and.w	r3, r3, #3
 8003658:	2b02      	cmp	r3, #2
 800365a:	d123      	bne.n	80036a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	08da      	lsrs	r2, r3, #3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	3208      	adds	r2, #8
 8003664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003668:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	f003 0307 	and.w	r3, r3, #7
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	220f      	movs	r2, #15
 8003674:	fa02 f303 	lsl.w	r3, r2, r3
 8003678:	43db      	mvns	r3, r3
 800367a:	69ba      	ldr	r2, [r7, #24]
 800367c:	4013      	ands	r3, r2
 800367e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	691a      	ldr	r2, [r3, #16]
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	f003 0307 	and.w	r3, r3, #7
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	fa02 f303 	lsl.w	r3, r2, r3
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	4313      	orrs	r3, r2
 8003694:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	08da      	lsrs	r2, r3, #3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	3208      	adds	r2, #8
 800369e:	69b9      	ldr	r1, [r7, #24]
 80036a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	2203      	movs	r2, #3
 80036b0:	fa02 f303 	lsl.w	r3, r2, r3
 80036b4:	43db      	mvns	r3, r3
 80036b6:	69ba      	ldr	r2, [r7, #24]
 80036b8:	4013      	ands	r3, r2
 80036ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f003 0203 	and.w	r2, r3, #3
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	005b      	lsls	r3, r3, #1
 80036c8:	fa02 f303 	lsl.w	r3, r2, r3
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	69ba      	ldr	r2, [r7, #24]
 80036d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	f000 80ae 	beq.w	8003842 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036e6:	2300      	movs	r3, #0
 80036e8:	60fb      	str	r3, [r7, #12]
 80036ea:	4b5d      	ldr	r3, [pc, #372]	; (8003860 <HAL_GPIO_Init+0x300>)
 80036ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ee:	4a5c      	ldr	r2, [pc, #368]	; (8003860 <HAL_GPIO_Init+0x300>)
 80036f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036f4:	6453      	str	r3, [r2, #68]	; 0x44
 80036f6:	4b5a      	ldr	r3, [pc, #360]	; (8003860 <HAL_GPIO_Init+0x300>)
 80036f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036fe:	60fb      	str	r3, [r7, #12]
 8003700:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003702:	4a58      	ldr	r2, [pc, #352]	; (8003864 <HAL_GPIO_Init+0x304>)
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	089b      	lsrs	r3, r3, #2
 8003708:	3302      	adds	r3, #2
 800370a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800370e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	f003 0303 	and.w	r3, r3, #3
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	220f      	movs	r2, #15
 800371a:	fa02 f303 	lsl.w	r3, r2, r3
 800371e:	43db      	mvns	r3, r3
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	4013      	ands	r3, r2
 8003724:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a4f      	ldr	r2, [pc, #316]	; (8003868 <HAL_GPIO_Init+0x308>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d025      	beq.n	800377a <HAL_GPIO_Init+0x21a>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a4e      	ldr	r2, [pc, #312]	; (800386c <HAL_GPIO_Init+0x30c>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d01f      	beq.n	8003776 <HAL_GPIO_Init+0x216>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a4d      	ldr	r2, [pc, #308]	; (8003870 <HAL_GPIO_Init+0x310>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d019      	beq.n	8003772 <HAL_GPIO_Init+0x212>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a4c      	ldr	r2, [pc, #304]	; (8003874 <HAL_GPIO_Init+0x314>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d013      	beq.n	800376e <HAL_GPIO_Init+0x20e>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a4b      	ldr	r2, [pc, #300]	; (8003878 <HAL_GPIO_Init+0x318>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d00d      	beq.n	800376a <HAL_GPIO_Init+0x20a>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a4a      	ldr	r2, [pc, #296]	; (800387c <HAL_GPIO_Init+0x31c>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d007      	beq.n	8003766 <HAL_GPIO_Init+0x206>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a49      	ldr	r2, [pc, #292]	; (8003880 <HAL_GPIO_Init+0x320>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d101      	bne.n	8003762 <HAL_GPIO_Init+0x202>
 800375e:	2306      	movs	r3, #6
 8003760:	e00c      	b.n	800377c <HAL_GPIO_Init+0x21c>
 8003762:	2307      	movs	r3, #7
 8003764:	e00a      	b.n	800377c <HAL_GPIO_Init+0x21c>
 8003766:	2305      	movs	r3, #5
 8003768:	e008      	b.n	800377c <HAL_GPIO_Init+0x21c>
 800376a:	2304      	movs	r3, #4
 800376c:	e006      	b.n	800377c <HAL_GPIO_Init+0x21c>
 800376e:	2303      	movs	r3, #3
 8003770:	e004      	b.n	800377c <HAL_GPIO_Init+0x21c>
 8003772:	2302      	movs	r3, #2
 8003774:	e002      	b.n	800377c <HAL_GPIO_Init+0x21c>
 8003776:	2301      	movs	r3, #1
 8003778:	e000      	b.n	800377c <HAL_GPIO_Init+0x21c>
 800377a:	2300      	movs	r3, #0
 800377c:	69fa      	ldr	r2, [r7, #28]
 800377e:	f002 0203 	and.w	r2, r2, #3
 8003782:	0092      	lsls	r2, r2, #2
 8003784:	4093      	lsls	r3, r2
 8003786:	69ba      	ldr	r2, [r7, #24]
 8003788:	4313      	orrs	r3, r2
 800378a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800378c:	4935      	ldr	r1, [pc, #212]	; (8003864 <HAL_GPIO_Init+0x304>)
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	089b      	lsrs	r3, r3, #2
 8003792:	3302      	adds	r3, #2
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800379a:	4b3a      	ldr	r3, [pc, #232]	; (8003884 <HAL_GPIO_Init+0x324>)
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	43db      	mvns	r3, r3
 80037a4:	69ba      	ldr	r2, [r7, #24]
 80037a6:	4013      	ands	r3, r2
 80037a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d003      	beq.n	80037be <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80037b6:	69ba      	ldr	r2, [r7, #24]
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037be:	4a31      	ldr	r2, [pc, #196]	; (8003884 <HAL_GPIO_Init+0x324>)
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037c4:	4b2f      	ldr	r3, [pc, #188]	; (8003884 <HAL_GPIO_Init+0x324>)
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	43db      	mvns	r3, r3
 80037ce:	69ba      	ldr	r2, [r7, #24]
 80037d0:	4013      	ands	r3, r2
 80037d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d003      	beq.n	80037e8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80037e0:	69ba      	ldr	r2, [r7, #24]
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80037e8:	4a26      	ldr	r2, [pc, #152]	; (8003884 <HAL_GPIO_Init+0x324>)
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80037ee:	4b25      	ldr	r3, [pc, #148]	; (8003884 <HAL_GPIO_Init+0x324>)
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	43db      	mvns	r3, r3
 80037f8:	69ba      	ldr	r2, [r7, #24]
 80037fa:	4013      	ands	r3, r2
 80037fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d003      	beq.n	8003812 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800380a:	69ba      	ldr	r2, [r7, #24]
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	4313      	orrs	r3, r2
 8003810:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003812:	4a1c      	ldr	r2, [pc, #112]	; (8003884 <HAL_GPIO_Init+0x324>)
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003818:	4b1a      	ldr	r3, [pc, #104]	; (8003884 <HAL_GPIO_Init+0x324>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	43db      	mvns	r3, r3
 8003822:	69ba      	ldr	r2, [r7, #24]
 8003824:	4013      	ands	r3, r2
 8003826:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d003      	beq.n	800383c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003834:	69ba      	ldr	r2, [r7, #24]
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	4313      	orrs	r3, r2
 800383a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800383c:	4a11      	ldr	r2, [pc, #68]	; (8003884 <HAL_GPIO_Init+0x324>)
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	3301      	adds	r3, #1
 8003846:	61fb      	str	r3, [r7, #28]
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	2b0f      	cmp	r3, #15
 800384c:	f67f ae96 	bls.w	800357c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003850:	bf00      	nop
 8003852:	bf00      	nop
 8003854:	3724      	adds	r7, #36	; 0x24
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	40023800 	.word	0x40023800
 8003864:	40013800 	.word	0x40013800
 8003868:	40020000 	.word	0x40020000
 800386c:	40020400 	.word	0x40020400
 8003870:	40020800 	.word	0x40020800
 8003874:	40020c00 	.word	0x40020c00
 8003878:	40021000 	.word	0x40021000
 800387c:	40021400 	.word	0x40021400
 8003880:	40021800 	.word	0x40021800
 8003884:	40013c00 	.word	0x40013c00

08003888 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	460b      	mov	r3, r1
 8003892:	807b      	strh	r3, [r7, #2]
 8003894:	4613      	mov	r3, r2
 8003896:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003898:	787b      	ldrb	r3, [r7, #1]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d003      	beq.n	80038a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800389e:	887a      	ldrh	r2, [r7, #2]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80038a4:	e003      	b.n	80038ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80038a6:	887b      	ldrh	r3, [r7, #2]
 80038a8:	041a      	lsls	r2, r3, #16
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	619a      	str	r2, [r3, #24]
}
 80038ae:	bf00      	nop
 80038b0:	370c      	adds	r7, #12
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
	...

080038bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d101      	bne.n	80038d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e0cc      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038d0:	4b68      	ldr	r3, [pc, #416]	; (8003a74 <HAL_RCC_ClockConfig+0x1b8>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 030f 	and.w	r3, r3, #15
 80038d8:	683a      	ldr	r2, [r7, #0]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d90c      	bls.n	80038f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038de:	4b65      	ldr	r3, [pc, #404]	; (8003a74 <HAL_RCC_ClockConfig+0x1b8>)
 80038e0:	683a      	ldr	r2, [r7, #0]
 80038e2:	b2d2      	uxtb	r2, r2
 80038e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038e6:	4b63      	ldr	r3, [pc, #396]	; (8003a74 <HAL_RCC_ClockConfig+0x1b8>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 030f 	and.w	r3, r3, #15
 80038ee:	683a      	ldr	r2, [r7, #0]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d001      	beq.n	80038f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e0b8      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0302 	and.w	r3, r3, #2
 8003900:	2b00      	cmp	r3, #0
 8003902:	d020      	beq.n	8003946 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0304 	and.w	r3, r3, #4
 800390c:	2b00      	cmp	r3, #0
 800390e:	d005      	beq.n	800391c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003910:	4b59      	ldr	r3, [pc, #356]	; (8003a78 <HAL_RCC_ClockConfig+0x1bc>)
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	4a58      	ldr	r2, [pc, #352]	; (8003a78 <HAL_RCC_ClockConfig+0x1bc>)
 8003916:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800391a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0308 	and.w	r3, r3, #8
 8003924:	2b00      	cmp	r3, #0
 8003926:	d005      	beq.n	8003934 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003928:	4b53      	ldr	r3, [pc, #332]	; (8003a78 <HAL_RCC_ClockConfig+0x1bc>)
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	4a52      	ldr	r2, [pc, #328]	; (8003a78 <HAL_RCC_ClockConfig+0x1bc>)
 800392e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003932:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003934:	4b50      	ldr	r3, [pc, #320]	; (8003a78 <HAL_RCC_ClockConfig+0x1bc>)
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	494d      	ldr	r1, [pc, #308]	; (8003a78 <HAL_RCC_ClockConfig+0x1bc>)
 8003942:	4313      	orrs	r3, r2
 8003944:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0301 	and.w	r3, r3, #1
 800394e:	2b00      	cmp	r3, #0
 8003950:	d044      	beq.n	80039dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	2b01      	cmp	r3, #1
 8003958:	d107      	bne.n	800396a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800395a:	4b47      	ldr	r3, [pc, #284]	; (8003a78 <HAL_RCC_ClockConfig+0x1bc>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d119      	bne.n	800399a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e07f      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	2b02      	cmp	r3, #2
 8003970:	d003      	beq.n	800397a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003976:	2b03      	cmp	r3, #3
 8003978:	d107      	bne.n	800398a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800397a:	4b3f      	ldr	r3, [pc, #252]	; (8003a78 <HAL_RCC_ClockConfig+0x1bc>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d109      	bne.n	800399a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e06f      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800398a:	4b3b      	ldr	r3, [pc, #236]	; (8003a78 <HAL_RCC_ClockConfig+0x1bc>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0302 	and.w	r3, r3, #2
 8003992:	2b00      	cmp	r3, #0
 8003994:	d101      	bne.n	800399a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e067      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800399a:	4b37      	ldr	r3, [pc, #220]	; (8003a78 <HAL_RCC_ClockConfig+0x1bc>)
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f023 0203 	bic.w	r2, r3, #3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	4934      	ldr	r1, [pc, #208]	; (8003a78 <HAL_RCC_ClockConfig+0x1bc>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039ac:	f7fe fc18 	bl	80021e0 <HAL_GetTick>
 80039b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039b2:	e00a      	b.n	80039ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039b4:	f7fe fc14 	bl	80021e0 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	f241 3288 	movw	r2, #5000	; 0x1388
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e04f      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ca:	4b2b      	ldr	r3, [pc, #172]	; (8003a78 <HAL_RCC_ClockConfig+0x1bc>)
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f003 020c 	and.w	r2, r3, #12
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	429a      	cmp	r2, r3
 80039da:	d1eb      	bne.n	80039b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039dc:	4b25      	ldr	r3, [pc, #148]	; (8003a74 <HAL_RCC_ClockConfig+0x1b8>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 030f 	and.w	r3, r3, #15
 80039e4:	683a      	ldr	r2, [r7, #0]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d20c      	bcs.n	8003a04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ea:	4b22      	ldr	r3, [pc, #136]	; (8003a74 <HAL_RCC_ClockConfig+0x1b8>)
 80039ec:	683a      	ldr	r2, [r7, #0]
 80039ee:	b2d2      	uxtb	r2, r2
 80039f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039f2:	4b20      	ldr	r3, [pc, #128]	; (8003a74 <HAL_RCC_ClockConfig+0x1b8>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 030f 	and.w	r3, r3, #15
 80039fa:	683a      	ldr	r2, [r7, #0]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d001      	beq.n	8003a04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e032      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0304 	and.w	r3, r3, #4
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d008      	beq.n	8003a22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a10:	4b19      	ldr	r3, [pc, #100]	; (8003a78 <HAL_RCC_ClockConfig+0x1bc>)
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	4916      	ldr	r1, [pc, #88]	; (8003a78 <HAL_RCC_ClockConfig+0x1bc>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0308 	and.w	r3, r3, #8
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d009      	beq.n	8003a42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a2e:	4b12      	ldr	r3, [pc, #72]	; (8003a78 <HAL_RCC_ClockConfig+0x1bc>)
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	00db      	lsls	r3, r3, #3
 8003a3c:	490e      	ldr	r1, [pc, #56]	; (8003a78 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a42:	f000 f855 	bl	8003af0 <HAL_RCC_GetSysClockFreq>
 8003a46:	4602      	mov	r2, r0
 8003a48:	4b0b      	ldr	r3, [pc, #44]	; (8003a78 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	091b      	lsrs	r3, r3, #4
 8003a4e:	f003 030f 	and.w	r3, r3, #15
 8003a52:	490a      	ldr	r1, [pc, #40]	; (8003a7c <HAL_RCC_ClockConfig+0x1c0>)
 8003a54:	5ccb      	ldrb	r3, [r1, r3]
 8003a56:	fa22 f303 	lsr.w	r3, r2, r3
 8003a5a:	4a09      	ldr	r2, [pc, #36]	; (8003a80 <HAL_RCC_ClockConfig+0x1c4>)
 8003a5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a5e:	4b09      	ldr	r3, [pc, #36]	; (8003a84 <HAL_RCC_ClockConfig+0x1c8>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7fe fb78 	bl	8002158 <HAL_InitTick>

  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3710      	adds	r7, #16
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	40023c00 	.word	0x40023c00
 8003a78:	40023800 	.word	0x40023800
 8003a7c:	08008898 	.word	0x08008898
 8003a80:	20000000 	.word	0x20000000
 8003a84:	20000004 	.word	0x20000004

08003a88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a8c:	4b03      	ldr	r3, [pc, #12]	; (8003a9c <HAL_RCC_GetHCLKFreq+0x14>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	20000000 	.word	0x20000000

08003aa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003aa4:	f7ff fff0 	bl	8003a88 <HAL_RCC_GetHCLKFreq>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	4b05      	ldr	r3, [pc, #20]	; (8003ac0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	0a9b      	lsrs	r3, r3, #10
 8003ab0:	f003 0307 	and.w	r3, r3, #7
 8003ab4:	4903      	ldr	r1, [pc, #12]	; (8003ac4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ab6:	5ccb      	ldrb	r3, [r1, r3]
 8003ab8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	40023800 	.word	0x40023800
 8003ac4:	080088a8 	.word	0x080088a8

08003ac8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003acc:	f7ff ffdc 	bl	8003a88 <HAL_RCC_GetHCLKFreq>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	4b05      	ldr	r3, [pc, #20]	; (8003ae8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	0b5b      	lsrs	r3, r3, #13
 8003ad8:	f003 0307 	and.w	r3, r3, #7
 8003adc:	4903      	ldr	r1, [pc, #12]	; (8003aec <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ade:	5ccb      	ldrb	r3, [r1, r3]
 8003ae0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	40023800 	.word	0x40023800
 8003aec:	080088a8 	.word	0x080088a8

08003af0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003af0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003af4:	b0ae      	sub	sp, #184	; 0xb8
 8003af6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003af8:	2300      	movs	r3, #0
 8003afa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003afe:	2300      	movs	r3, #0
 8003b00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003b04:	2300      	movs	r3, #0
 8003b06:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003b10:	2300      	movs	r3, #0
 8003b12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b16:	4bcb      	ldr	r3, [pc, #812]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f003 030c 	and.w	r3, r3, #12
 8003b1e:	2b0c      	cmp	r3, #12
 8003b20:	f200 8206 	bhi.w	8003f30 <HAL_RCC_GetSysClockFreq+0x440>
 8003b24:	a201      	add	r2, pc, #4	; (adr r2, 8003b2c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b2a:	bf00      	nop
 8003b2c:	08003b61 	.word	0x08003b61
 8003b30:	08003f31 	.word	0x08003f31
 8003b34:	08003f31 	.word	0x08003f31
 8003b38:	08003f31 	.word	0x08003f31
 8003b3c:	08003b69 	.word	0x08003b69
 8003b40:	08003f31 	.word	0x08003f31
 8003b44:	08003f31 	.word	0x08003f31
 8003b48:	08003f31 	.word	0x08003f31
 8003b4c:	08003b71 	.word	0x08003b71
 8003b50:	08003f31 	.word	0x08003f31
 8003b54:	08003f31 	.word	0x08003f31
 8003b58:	08003f31 	.word	0x08003f31
 8003b5c:	08003d61 	.word	0x08003d61
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b60:	4bb9      	ldr	r3, [pc, #740]	; (8003e48 <HAL_RCC_GetSysClockFreq+0x358>)
 8003b62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003b66:	e1e7      	b.n	8003f38 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b68:	4bb8      	ldr	r3, [pc, #736]	; (8003e4c <HAL_RCC_GetSysClockFreq+0x35c>)
 8003b6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003b6e:	e1e3      	b.n	8003f38 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b70:	4bb4      	ldr	r3, [pc, #720]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b7c:	4bb1      	ldr	r3, [pc, #708]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d071      	beq.n	8003c6c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b88:	4bae      	ldr	r3, [pc, #696]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	099b      	lsrs	r3, r3, #6
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003b94:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003b98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ba0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003baa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003bae:	4622      	mov	r2, r4
 8003bb0:	462b      	mov	r3, r5
 8003bb2:	f04f 0000 	mov.w	r0, #0
 8003bb6:	f04f 0100 	mov.w	r1, #0
 8003bba:	0159      	lsls	r1, r3, #5
 8003bbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bc0:	0150      	lsls	r0, r2, #5
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	4621      	mov	r1, r4
 8003bc8:	1a51      	subs	r1, r2, r1
 8003bca:	6439      	str	r1, [r7, #64]	; 0x40
 8003bcc:	4629      	mov	r1, r5
 8003bce:	eb63 0301 	sbc.w	r3, r3, r1
 8003bd2:	647b      	str	r3, [r7, #68]	; 0x44
 8003bd4:	f04f 0200 	mov.w	r2, #0
 8003bd8:	f04f 0300 	mov.w	r3, #0
 8003bdc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003be0:	4649      	mov	r1, r9
 8003be2:	018b      	lsls	r3, r1, #6
 8003be4:	4641      	mov	r1, r8
 8003be6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003bea:	4641      	mov	r1, r8
 8003bec:	018a      	lsls	r2, r1, #6
 8003bee:	4641      	mov	r1, r8
 8003bf0:	1a51      	subs	r1, r2, r1
 8003bf2:	63b9      	str	r1, [r7, #56]	; 0x38
 8003bf4:	4649      	mov	r1, r9
 8003bf6:	eb63 0301 	sbc.w	r3, r3, r1
 8003bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bfc:	f04f 0200 	mov.w	r2, #0
 8003c00:	f04f 0300 	mov.w	r3, #0
 8003c04:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003c08:	4649      	mov	r1, r9
 8003c0a:	00cb      	lsls	r3, r1, #3
 8003c0c:	4641      	mov	r1, r8
 8003c0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c12:	4641      	mov	r1, r8
 8003c14:	00ca      	lsls	r2, r1, #3
 8003c16:	4610      	mov	r0, r2
 8003c18:	4619      	mov	r1, r3
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	4622      	mov	r2, r4
 8003c1e:	189b      	adds	r3, r3, r2
 8003c20:	633b      	str	r3, [r7, #48]	; 0x30
 8003c22:	462b      	mov	r3, r5
 8003c24:	460a      	mov	r2, r1
 8003c26:	eb42 0303 	adc.w	r3, r2, r3
 8003c2a:	637b      	str	r3, [r7, #52]	; 0x34
 8003c2c:	f04f 0200 	mov.w	r2, #0
 8003c30:	f04f 0300 	mov.w	r3, #0
 8003c34:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003c38:	4629      	mov	r1, r5
 8003c3a:	024b      	lsls	r3, r1, #9
 8003c3c:	4621      	mov	r1, r4
 8003c3e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c42:	4621      	mov	r1, r4
 8003c44:	024a      	lsls	r2, r1, #9
 8003c46:	4610      	mov	r0, r2
 8003c48:	4619      	mov	r1, r3
 8003c4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c54:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003c58:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003c5c:	f7fd f814 	bl	8000c88 <__aeabi_uldivmod>
 8003c60:	4602      	mov	r2, r0
 8003c62:	460b      	mov	r3, r1
 8003c64:	4613      	mov	r3, r2
 8003c66:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c6a:	e067      	b.n	8003d3c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c6c:	4b75      	ldr	r3, [pc, #468]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	099b      	lsrs	r3, r3, #6
 8003c72:	2200      	movs	r2, #0
 8003c74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c78:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003c7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003c80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c84:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c86:	2300      	movs	r3, #0
 8003c88:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003c8a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003c8e:	4622      	mov	r2, r4
 8003c90:	462b      	mov	r3, r5
 8003c92:	f04f 0000 	mov.w	r0, #0
 8003c96:	f04f 0100 	mov.w	r1, #0
 8003c9a:	0159      	lsls	r1, r3, #5
 8003c9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ca0:	0150      	lsls	r0, r2, #5
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	460b      	mov	r3, r1
 8003ca6:	4621      	mov	r1, r4
 8003ca8:	1a51      	subs	r1, r2, r1
 8003caa:	62b9      	str	r1, [r7, #40]	; 0x28
 8003cac:	4629      	mov	r1, r5
 8003cae:	eb63 0301 	sbc.w	r3, r3, r1
 8003cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cb4:	f04f 0200 	mov.w	r2, #0
 8003cb8:	f04f 0300 	mov.w	r3, #0
 8003cbc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003cc0:	4649      	mov	r1, r9
 8003cc2:	018b      	lsls	r3, r1, #6
 8003cc4:	4641      	mov	r1, r8
 8003cc6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003cca:	4641      	mov	r1, r8
 8003ccc:	018a      	lsls	r2, r1, #6
 8003cce:	4641      	mov	r1, r8
 8003cd0:	ebb2 0a01 	subs.w	sl, r2, r1
 8003cd4:	4649      	mov	r1, r9
 8003cd6:	eb63 0b01 	sbc.w	fp, r3, r1
 8003cda:	f04f 0200 	mov.w	r2, #0
 8003cde:	f04f 0300 	mov.w	r3, #0
 8003ce2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ce6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003cea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cee:	4692      	mov	sl, r2
 8003cf0:	469b      	mov	fp, r3
 8003cf2:	4623      	mov	r3, r4
 8003cf4:	eb1a 0303 	adds.w	r3, sl, r3
 8003cf8:	623b      	str	r3, [r7, #32]
 8003cfa:	462b      	mov	r3, r5
 8003cfc:	eb4b 0303 	adc.w	r3, fp, r3
 8003d00:	627b      	str	r3, [r7, #36]	; 0x24
 8003d02:	f04f 0200 	mov.w	r2, #0
 8003d06:	f04f 0300 	mov.w	r3, #0
 8003d0a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003d0e:	4629      	mov	r1, r5
 8003d10:	028b      	lsls	r3, r1, #10
 8003d12:	4621      	mov	r1, r4
 8003d14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d18:	4621      	mov	r1, r4
 8003d1a:	028a      	lsls	r2, r1, #10
 8003d1c:	4610      	mov	r0, r2
 8003d1e:	4619      	mov	r1, r3
 8003d20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d24:	2200      	movs	r2, #0
 8003d26:	673b      	str	r3, [r7, #112]	; 0x70
 8003d28:	677a      	str	r2, [r7, #116]	; 0x74
 8003d2a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003d2e:	f7fc ffab 	bl	8000c88 <__aeabi_uldivmod>
 8003d32:	4602      	mov	r2, r0
 8003d34:	460b      	mov	r3, r1
 8003d36:	4613      	mov	r3, r2
 8003d38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d3c:	4b41      	ldr	r3, [pc, #260]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	0c1b      	lsrs	r3, r3, #16
 8003d42:	f003 0303 	and.w	r3, r3, #3
 8003d46:	3301      	adds	r3, #1
 8003d48:	005b      	lsls	r3, r3, #1
 8003d4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003d4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003d5e:	e0eb      	b.n	8003f38 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d60:	4b38      	ldr	r3, [pc, #224]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d6c:	4b35      	ldr	r3, [pc, #212]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d06b      	beq.n	8003e50 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d78:	4b32      	ldr	r3, [pc, #200]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	099b      	lsrs	r3, r3, #6
 8003d7e:	2200      	movs	r2, #0
 8003d80:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d82:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003d84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d8a:	663b      	str	r3, [r7, #96]	; 0x60
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	667b      	str	r3, [r7, #100]	; 0x64
 8003d90:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003d94:	4622      	mov	r2, r4
 8003d96:	462b      	mov	r3, r5
 8003d98:	f04f 0000 	mov.w	r0, #0
 8003d9c:	f04f 0100 	mov.w	r1, #0
 8003da0:	0159      	lsls	r1, r3, #5
 8003da2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003da6:	0150      	lsls	r0, r2, #5
 8003da8:	4602      	mov	r2, r0
 8003daa:	460b      	mov	r3, r1
 8003dac:	4621      	mov	r1, r4
 8003dae:	1a51      	subs	r1, r2, r1
 8003db0:	61b9      	str	r1, [r7, #24]
 8003db2:	4629      	mov	r1, r5
 8003db4:	eb63 0301 	sbc.w	r3, r3, r1
 8003db8:	61fb      	str	r3, [r7, #28]
 8003dba:	f04f 0200 	mov.w	r2, #0
 8003dbe:	f04f 0300 	mov.w	r3, #0
 8003dc2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003dc6:	4659      	mov	r1, fp
 8003dc8:	018b      	lsls	r3, r1, #6
 8003dca:	4651      	mov	r1, sl
 8003dcc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003dd0:	4651      	mov	r1, sl
 8003dd2:	018a      	lsls	r2, r1, #6
 8003dd4:	4651      	mov	r1, sl
 8003dd6:	ebb2 0801 	subs.w	r8, r2, r1
 8003dda:	4659      	mov	r1, fp
 8003ddc:	eb63 0901 	sbc.w	r9, r3, r1
 8003de0:	f04f 0200 	mov.w	r2, #0
 8003de4:	f04f 0300 	mov.w	r3, #0
 8003de8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003dec:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003df0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003df4:	4690      	mov	r8, r2
 8003df6:	4699      	mov	r9, r3
 8003df8:	4623      	mov	r3, r4
 8003dfa:	eb18 0303 	adds.w	r3, r8, r3
 8003dfe:	613b      	str	r3, [r7, #16]
 8003e00:	462b      	mov	r3, r5
 8003e02:	eb49 0303 	adc.w	r3, r9, r3
 8003e06:	617b      	str	r3, [r7, #20]
 8003e08:	f04f 0200 	mov.w	r2, #0
 8003e0c:	f04f 0300 	mov.w	r3, #0
 8003e10:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003e14:	4629      	mov	r1, r5
 8003e16:	024b      	lsls	r3, r1, #9
 8003e18:	4621      	mov	r1, r4
 8003e1a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e1e:	4621      	mov	r1, r4
 8003e20:	024a      	lsls	r2, r1, #9
 8003e22:	4610      	mov	r0, r2
 8003e24:	4619      	mov	r1, r3
 8003e26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	65bb      	str	r3, [r7, #88]	; 0x58
 8003e2e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003e30:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003e34:	f7fc ff28 	bl	8000c88 <__aeabi_uldivmod>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	460b      	mov	r3, r1
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e42:	e065      	b.n	8003f10 <HAL_RCC_GetSysClockFreq+0x420>
 8003e44:	40023800 	.word	0x40023800
 8003e48:	00f42400 	.word	0x00f42400
 8003e4c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e50:	4b3d      	ldr	r3, [pc, #244]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x458>)
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	099b      	lsrs	r3, r3, #6
 8003e56:	2200      	movs	r2, #0
 8003e58:	4618      	mov	r0, r3
 8003e5a:	4611      	mov	r1, r2
 8003e5c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e60:	653b      	str	r3, [r7, #80]	; 0x50
 8003e62:	2300      	movs	r3, #0
 8003e64:	657b      	str	r3, [r7, #84]	; 0x54
 8003e66:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003e6a:	4642      	mov	r2, r8
 8003e6c:	464b      	mov	r3, r9
 8003e6e:	f04f 0000 	mov.w	r0, #0
 8003e72:	f04f 0100 	mov.w	r1, #0
 8003e76:	0159      	lsls	r1, r3, #5
 8003e78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e7c:	0150      	lsls	r0, r2, #5
 8003e7e:	4602      	mov	r2, r0
 8003e80:	460b      	mov	r3, r1
 8003e82:	4641      	mov	r1, r8
 8003e84:	1a51      	subs	r1, r2, r1
 8003e86:	60b9      	str	r1, [r7, #8]
 8003e88:	4649      	mov	r1, r9
 8003e8a:	eb63 0301 	sbc.w	r3, r3, r1
 8003e8e:	60fb      	str	r3, [r7, #12]
 8003e90:	f04f 0200 	mov.w	r2, #0
 8003e94:	f04f 0300 	mov.w	r3, #0
 8003e98:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003e9c:	4659      	mov	r1, fp
 8003e9e:	018b      	lsls	r3, r1, #6
 8003ea0:	4651      	mov	r1, sl
 8003ea2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ea6:	4651      	mov	r1, sl
 8003ea8:	018a      	lsls	r2, r1, #6
 8003eaa:	4651      	mov	r1, sl
 8003eac:	1a54      	subs	r4, r2, r1
 8003eae:	4659      	mov	r1, fp
 8003eb0:	eb63 0501 	sbc.w	r5, r3, r1
 8003eb4:	f04f 0200 	mov.w	r2, #0
 8003eb8:	f04f 0300 	mov.w	r3, #0
 8003ebc:	00eb      	lsls	r3, r5, #3
 8003ebe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ec2:	00e2      	lsls	r2, r4, #3
 8003ec4:	4614      	mov	r4, r2
 8003ec6:	461d      	mov	r5, r3
 8003ec8:	4643      	mov	r3, r8
 8003eca:	18e3      	adds	r3, r4, r3
 8003ecc:	603b      	str	r3, [r7, #0]
 8003ece:	464b      	mov	r3, r9
 8003ed0:	eb45 0303 	adc.w	r3, r5, r3
 8003ed4:	607b      	str	r3, [r7, #4]
 8003ed6:	f04f 0200 	mov.w	r2, #0
 8003eda:	f04f 0300 	mov.w	r3, #0
 8003ede:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ee2:	4629      	mov	r1, r5
 8003ee4:	028b      	lsls	r3, r1, #10
 8003ee6:	4621      	mov	r1, r4
 8003ee8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003eec:	4621      	mov	r1, r4
 8003eee:	028a      	lsls	r2, r1, #10
 8003ef0:	4610      	mov	r0, r2
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003ef8:	2200      	movs	r2, #0
 8003efa:	64bb      	str	r3, [r7, #72]	; 0x48
 8003efc:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003efe:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003f02:	f7fc fec1 	bl	8000c88 <__aeabi_uldivmod>
 8003f06:	4602      	mov	r2, r0
 8003f08:	460b      	mov	r3, r1
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003f10:	4b0d      	ldr	r3, [pc, #52]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x458>)
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	0f1b      	lsrs	r3, r3, #28
 8003f16:	f003 0307 	and.w	r3, r3, #7
 8003f1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003f1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003f22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003f2e:	e003      	b.n	8003f38 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f30:	4b06      	ldr	r3, [pc, #24]	; (8003f4c <HAL_RCC_GetSysClockFreq+0x45c>)
 8003f32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003f36:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f38:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	37b8      	adds	r7, #184	; 0xb8
 8003f40:	46bd      	mov	sp, r7
 8003f42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f46:	bf00      	nop
 8003f48:	40023800 	.word	0x40023800
 8003f4c:	00f42400 	.word	0x00f42400

08003f50 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b086      	sub	sp, #24
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d101      	bne.n	8003f62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e28d      	b.n	800447e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	f000 8083 	beq.w	8004076 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003f70:	4b94      	ldr	r3, [pc, #592]	; (80041c4 <HAL_RCC_OscConfig+0x274>)
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f003 030c 	and.w	r3, r3, #12
 8003f78:	2b04      	cmp	r3, #4
 8003f7a:	d019      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003f7c:	4b91      	ldr	r3, [pc, #580]	; (80041c4 <HAL_RCC_OscConfig+0x274>)
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003f84:	2b08      	cmp	r3, #8
 8003f86:	d106      	bne.n	8003f96 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003f88:	4b8e      	ldr	r3, [pc, #568]	; (80041c4 <HAL_RCC_OscConfig+0x274>)
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f94:	d00c      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f96:	4b8b      	ldr	r3, [pc, #556]	; (80041c4 <HAL_RCC_OscConfig+0x274>)
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003f9e:	2b0c      	cmp	r3, #12
 8003fa0:	d112      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fa2:	4b88      	ldr	r3, [pc, #544]	; (80041c4 <HAL_RCC_OscConfig+0x274>)
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003faa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fae:	d10b      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fb0:	4b84      	ldr	r3, [pc, #528]	; (80041c4 <HAL_RCC_OscConfig+0x274>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d05b      	beq.n	8004074 <HAL_RCC_OscConfig+0x124>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d157      	bne.n	8004074 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e25a      	b.n	800447e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fd0:	d106      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x90>
 8003fd2:	4b7c      	ldr	r3, [pc, #496]	; (80041c4 <HAL_RCC_OscConfig+0x274>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a7b      	ldr	r2, [pc, #492]	; (80041c4 <HAL_RCC_OscConfig+0x274>)
 8003fd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fdc:	6013      	str	r3, [r2, #0]
 8003fde:	e01d      	b.n	800401c <HAL_RCC_OscConfig+0xcc>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fe8:	d10c      	bne.n	8004004 <HAL_RCC_OscConfig+0xb4>
 8003fea:	4b76      	ldr	r3, [pc, #472]	; (80041c4 <HAL_RCC_OscConfig+0x274>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a75      	ldr	r2, [pc, #468]	; (80041c4 <HAL_RCC_OscConfig+0x274>)
 8003ff0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ff4:	6013      	str	r3, [r2, #0]
 8003ff6:	4b73      	ldr	r3, [pc, #460]	; (80041c4 <HAL_RCC_OscConfig+0x274>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a72      	ldr	r2, [pc, #456]	; (80041c4 <HAL_RCC_OscConfig+0x274>)
 8003ffc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004000:	6013      	str	r3, [r2, #0]
 8004002:	e00b      	b.n	800401c <HAL_RCC_OscConfig+0xcc>
 8004004:	4b6f      	ldr	r3, [pc, #444]	; (80041c4 <HAL_RCC_OscConfig+0x274>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a6e      	ldr	r2, [pc, #440]	; (80041c4 <HAL_RCC_OscConfig+0x274>)
 800400a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800400e:	6013      	str	r3, [r2, #0]
 8004010:	4b6c      	ldr	r3, [pc, #432]	; (80041c4 <HAL_RCC_OscConfig+0x274>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a6b      	ldr	r2, [pc, #428]	; (80041c4 <HAL_RCC_OscConfig+0x274>)
 8004016:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800401a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d013      	beq.n	800404c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004024:	f7fe f8dc 	bl	80021e0 <HAL_GetTick>
 8004028:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800402a:	e008      	b.n	800403e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800402c:	f7fe f8d8 	bl	80021e0 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	2b64      	cmp	r3, #100	; 0x64
 8004038:	d901      	bls.n	800403e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e21f      	b.n	800447e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800403e:	4b61      	ldr	r3, [pc, #388]	; (80041c4 <HAL_RCC_OscConfig+0x274>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d0f0      	beq.n	800402c <HAL_RCC_OscConfig+0xdc>
 800404a:	e014      	b.n	8004076 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800404c:	f7fe f8c8 	bl	80021e0 <HAL_GetTick>
 8004050:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004052:	e008      	b.n	8004066 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004054:	f7fe f8c4 	bl	80021e0 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	2b64      	cmp	r3, #100	; 0x64
 8004060:	d901      	bls.n	8004066 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e20b      	b.n	800447e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004066:	4b57      	ldr	r3, [pc, #348]	; (80041c4 <HAL_RCC_OscConfig+0x274>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d1f0      	bne.n	8004054 <HAL_RCC_OscConfig+0x104>
 8004072:	e000      	b.n	8004076 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004074:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0302 	and.w	r3, r3, #2
 800407e:	2b00      	cmp	r3, #0
 8004080:	d06f      	beq.n	8004162 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004082:	4b50      	ldr	r3, [pc, #320]	; (80041c4 <HAL_RCC_OscConfig+0x274>)
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f003 030c 	and.w	r3, r3, #12
 800408a:	2b00      	cmp	r3, #0
 800408c:	d017      	beq.n	80040be <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800408e:	4b4d      	ldr	r3, [pc, #308]	; (80041c4 <HAL_RCC_OscConfig+0x274>)
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004096:	2b08      	cmp	r3, #8
 8004098:	d105      	bne.n	80040a6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800409a:	4b4a      	ldr	r3, [pc, #296]	; (80041c4 <HAL_RCC_OscConfig+0x274>)
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00b      	beq.n	80040be <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040a6:	4b47      	ldr	r3, [pc, #284]	; (80041c4 <HAL_RCC_OscConfig+0x274>)
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80040ae:	2b0c      	cmp	r3, #12
 80040b0:	d11c      	bne.n	80040ec <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040b2:	4b44      	ldr	r3, [pc, #272]	; (80041c4 <HAL_RCC_OscConfig+0x274>)
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d116      	bne.n	80040ec <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040be:	4b41      	ldr	r3, [pc, #260]	; (80041c4 <HAL_RCC_OscConfig+0x274>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0302 	and.w	r3, r3, #2
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d005      	beq.n	80040d6 <HAL_RCC_OscConfig+0x186>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d001      	beq.n	80040d6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e1d3      	b.n	800447e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040d6:	4b3b      	ldr	r3, [pc, #236]	; (80041c4 <HAL_RCC_OscConfig+0x274>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	00db      	lsls	r3, r3, #3
 80040e4:	4937      	ldr	r1, [pc, #220]	; (80041c4 <HAL_RCC_OscConfig+0x274>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040ea:	e03a      	b.n	8004162 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d020      	beq.n	8004136 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040f4:	4b34      	ldr	r3, [pc, #208]	; (80041c8 <HAL_RCC_OscConfig+0x278>)
 80040f6:	2201      	movs	r2, #1
 80040f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040fa:	f7fe f871 	bl	80021e0 <HAL_GetTick>
 80040fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004100:	e008      	b.n	8004114 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004102:	f7fe f86d 	bl	80021e0 <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	2b02      	cmp	r3, #2
 800410e:	d901      	bls.n	8004114 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004110:	2303      	movs	r3, #3
 8004112:	e1b4      	b.n	800447e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004114:	4b2b      	ldr	r3, [pc, #172]	; (80041c4 <HAL_RCC_OscConfig+0x274>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0302 	and.w	r3, r3, #2
 800411c:	2b00      	cmp	r3, #0
 800411e:	d0f0      	beq.n	8004102 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004120:	4b28      	ldr	r3, [pc, #160]	; (80041c4 <HAL_RCC_OscConfig+0x274>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	691b      	ldr	r3, [r3, #16]
 800412c:	00db      	lsls	r3, r3, #3
 800412e:	4925      	ldr	r1, [pc, #148]	; (80041c4 <HAL_RCC_OscConfig+0x274>)
 8004130:	4313      	orrs	r3, r2
 8004132:	600b      	str	r3, [r1, #0]
 8004134:	e015      	b.n	8004162 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004136:	4b24      	ldr	r3, [pc, #144]	; (80041c8 <HAL_RCC_OscConfig+0x278>)
 8004138:	2200      	movs	r2, #0
 800413a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800413c:	f7fe f850 	bl	80021e0 <HAL_GetTick>
 8004140:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004142:	e008      	b.n	8004156 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004144:	f7fe f84c 	bl	80021e0 <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	2b02      	cmp	r3, #2
 8004150:	d901      	bls.n	8004156 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e193      	b.n	800447e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004156:	4b1b      	ldr	r3, [pc, #108]	; (80041c4 <HAL_RCC_OscConfig+0x274>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0302 	and.w	r3, r3, #2
 800415e:	2b00      	cmp	r3, #0
 8004160:	d1f0      	bne.n	8004144 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0308 	and.w	r3, r3, #8
 800416a:	2b00      	cmp	r3, #0
 800416c:	d036      	beq.n	80041dc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d016      	beq.n	80041a4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004176:	4b15      	ldr	r3, [pc, #84]	; (80041cc <HAL_RCC_OscConfig+0x27c>)
 8004178:	2201      	movs	r2, #1
 800417a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800417c:	f7fe f830 	bl	80021e0 <HAL_GetTick>
 8004180:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004182:	e008      	b.n	8004196 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004184:	f7fe f82c 	bl	80021e0 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	2b02      	cmp	r3, #2
 8004190:	d901      	bls.n	8004196 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e173      	b.n	800447e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004196:	4b0b      	ldr	r3, [pc, #44]	; (80041c4 <HAL_RCC_OscConfig+0x274>)
 8004198:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800419a:	f003 0302 	and.w	r3, r3, #2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d0f0      	beq.n	8004184 <HAL_RCC_OscConfig+0x234>
 80041a2:	e01b      	b.n	80041dc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041a4:	4b09      	ldr	r3, [pc, #36]	; (80041cc <HAL_RCC_OscConfig+0x27c>)
 80041a6:	2200      	movs	r2, #0
 80041a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041aa:	f7fe f819 	bl	80021e0 <HAL_GetTick>
 80041ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041b0:	e00e      	b.n	80041d0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041b2:	f7fe f815 	bl	80021e0 <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d907      	bls.n	80041d0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e15c      	b.n	800447e <HAL_RCC_OscConfig+0x52e>
 80041c4:	40023800 	.word	0x40023800
 80041c8:	42470000 	.word	0x42470000
 80041cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041d0:	4b8a      	ldr	r3, [pc, #552]	; (80043fc <HAL_RCC_OscConfig+0x4ac>)
 80041d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041d4:	f003 0302 	and.w	r3, r3, #2
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d1ea      	bne.n	80041b2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0304 	and.w	r3, r3, #4
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	f000 8097 	beq.w	8004318 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041ea:	2300      	movs	r3, #0
 80041ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041ee:	4b83      	ldr	r3, [pc, #524]	; (80043fc <HAL_RCC_OscConfig+0x4ac>)
 80041f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d10f      	bne.n	800421a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041fa:	2300      	movs	r3, #0
 80041fc:	60bb      	str	r3, [r7, #8]
 80041fe:	4b7f      	ldr	r3, [pc, #508]	; (80043fc <HAL_RCC_OscConfig+0x4ac>)
 8004200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004202:	4a7e      	ldr	r2, [pc, #504]	; (80043fc <HAL_RCC_OscConfig+0x4ac>)
 8004204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004208:	6413      	str	r3, [r2, #64]	; 0x40
 800420a:	4b7c      	ldr	r3, [pc, #496]	; (80043fc <HAL_RCC_OscConfig+0x4ac>)
 800420c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004212:	60bb      	str	r3, [r7, #8]
 8004214:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004216:	2301      	movs	r3, #1
 8004218:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800421a:	4b79      	ldr	r3, [pc, #484]	; (8004400 <HAL_RCC_OscConfig+0x4b0>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004222:	2b00      	cmp	r3, #0
 8004224:	d118      	bne.n	8004258 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004226:	4b76      	ldr	r3, [pc, #472]	; (8004400 <HAL_RCC_OscConfig+0x4b0>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a75      	ldr	r2, [pc, #468]	; (8004400 <HAL_RCC_OscConfig+0x4b0>)
 800422c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004230:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004232:	f7fd ffd5 	bl	80021e0 <HAL_GetTick>
 8004236:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004238:	e008      	b.n	800424c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800423a:	f7fd ffd1 	bl	80021e0 <HAL_GetTick>
 800423e:	4602      	mov	r2, r0
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	2b02      	cmp	r3, #2
 8004246:	d901      	bls.n	800424c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	e118      	b.n	800447e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800424c:	4b6c      	ldr	r3, [pc, #432]	; (8004400 <HAL_RCC_OscConfig+0x4b0>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004254:	2b00      	cmp	r3, #0
 8004256:	d0f0      	beq.n	800423a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	2b01      	cmp	r3, #1
 800425e:	d106      	bne.n	800426e <HAL_RCC_OscConfig+0x31e>
 8004260:	4b66      	ldr	r3, [pc, #408]	; (80043fc <HAL_RCC_OscConfig+0x4ac>)
 8004262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004264:	4a65      	ldr	r2, [pc, #404]	; (80043fc <HAL_RCC_OscConfig+0x4ac>)
 8004266:	f043 0301 	orr.w	r3, r3, #1
 800426a:	6713      	str	r3, [r2, #112]	; 0x70
 800426c:	e01c      	b.n	80042a8 <HAL_RCC_OscConfig+0x358>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	2b05      	cmp	r3, #5
 8004274:	d10c      	bne.n	8004290 <HAL_RCC_OscConfig+0x340>
 8004276:	4b61      	ldr	r3, [pc, #388]	; (80043fc <HAL_RCC_OscConfig+0x4ac>)
 8004278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800427a:	4a60      	ldr	r2, [pc, #384]	; (80043fc <HAL_RCC_OscConfig+0x4ac>)
 800427c:	f043 0304 	orr.w	r3, r3, #4
 8004280:	6713      	str	r3, [r2, #112]	; 0x70
 8004282:	4b5e      	ldr	r3, [pc, #376]	; (80043fc <HAL_RCC_OscConfig+0x4ac>)
 8004284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004286:	4a5d      	ldr	r2, [pc, #372]	; (80043fc <HAL_RCC_OscConfig+0x4ac>)
 8004288:	f043 0301 	orr.w	r3, r3, #1
 800428c:	6713      	str	r3, [r2, #112]	; 0x70
 800428e:	e00b      	b.n	80042a8 <HAL_RCC_OscConfig+0x358>
 8004290:	4b5a      	ldr	r3, [pc, #360]	; (80043fc <HAL_RCC_OscConfig+0x4ac>)
 8004292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004294:	4a59      	ldr	r2, [pc, #356]	; (80043fc <HAL_RCC_OscConfig+0x4ac>)
 8004296:	f023 0301 	bic.w	r3, r3, #1
 800429a:	6713      	str	r3, [r2, #112]	; 0x70
 800429c:	4b57      	ldr	r3, [pc, #348]	; (80043fc <HAL_RCC_OscConfig+0x4ac>)
 800429e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a0:	4a56      	ldr	r2, [pc, #344]	; (80043fc <HAL_RCC_OscConfig+0x4ac>)
 80042a2:	f023 0304 	bic.w	r3, r3, #4
 80042a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d015      	beq.n	80042dc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042b0:	f7fd ff96 	bl	80021e0 <HAL_GetTick>
 80042b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042b6:	e00a      	b.n	80042ce <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042b8:	f7fd ff92 	bl	80021e0 <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d901      	bls.n	80042ce <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e0d7      	b.n	800447e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042ce:	4b4b      	ldr	r3, [pc, #300]	; (80043fc <HAL_RCC_OscConfig+0x4ac>)
 80042d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d2:	f003 0302 	and.w	r3, r3, #2
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d0ee      	beq.n	80042b8 <HAL_RCC_OscConfig+0x368>
 80042da:	e014      	b.n	8004306 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042dc:	f7fd ff80 	bl	80021e0 <HAL_GetTick>
 80042e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042e2:	e00a      	b.n	80042fa <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042e4:	f7fd ff7c 	bl	80021e0 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d901      	bls.n	80042fa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e0c1      	b.n	800447e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042fa:	4b40      	ldr	r3, [pc, #256]	; (80043fc <HAL_RCC_OscConfig+0x4ac>)
 80042fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042fe:	f003 0302 	and.w	r3, r3, #2
 8004302:	2b00      	cmp	r3, #0
 8004304:	d1ee      	bne.n	80042e4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004306:	7dfb      	ldrb	r3, [r7, #23]
 8004308:	2b01      	cmp	r3, #1
 800430a:	d105      	bne.n	8004318 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800430c:	4b3b      	ldr	r3, [pc, #236]	; (80043fc <HAL_RCC_OscConfig+0x4ac>)
 800430e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004310:	4a3a      	ldr	r2, [pc, #232]	; (80043fc <HAL_RCC_OscConfig+0x4ac>)
 8004312:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004316:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	699b      	ldr	r3, [r3, #24]
 800431c:	2b00      	cmp	r3, #0
 800431e:	f000 80ad 	beq.w	800447c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004322:	4b36      	ldr	r3, [pc, #216]	; (80043fc <HAL_RCC_OscConfig+0x4ac>)
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f003 030c 	and.w	r3, r3, #12
 800432a:	2b08      	cmp	r3, #8
 800432c:	d060      	beq.n	80043f0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	2b02      	cmp	r3, #2
 8004334:	d145      	bne.n	80043c2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004336:	4b33      	ldr	r3, [pc, #204]	; (8004404 <HAL_RCC_OscConfig+0x4b4>)
 8004338:	2200      	movs	r2, #0
 800433a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800433c:	f7fd ff50 	bl	80021e0 <HAL_GetTick>
 8004340:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004342:	e008      	b.n	8004356 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004344:	f7fd ff4c 	bl	80021e0 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	2b02      	cmp	r3, #2
 8004350:	d901      	bls.n	8004356 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e093      	b.n	800447e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004356:	4b29      	ldr	r3, [pc, #164]	; (80043fc <HAL_RCC_OscConfig+0x4ac>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1f0      	bne.n	8004344 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	69da      	ldr	r2, [r3, #28]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a1b      	ldr	r3, [r3, #32]
 800436a:	431a      	orrs	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004370:	019b      	lsls	r3, r3, #6
 8004372:	431a      	orrs	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004378:	085b      	lsrs	r3, r3, #1
 800437a:	3b01      	subs	r3, #1
 800437c:	041b      	lsls	r3, r3, #16
 800437e:	431a      	orrs	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004384:	061b      	lsls	r3, r3, #24
 8004386:	431a      	orrs	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438c:	071b      	lsls	r3, r3, #28
 800438e:	491b      	ldr	r1, [pc, #108]	; (80043fc <HAL_RCC_OscConfig+0x4ac>)
 8004390:	4313      	orrs	r3, r2
 8004392:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004394:	4b1b      	ldr	r3, [pc, #108]	; (8004404 <HAL_RCC_OscConfig+0x4b4>)
 8004396:	2201      	movs	r2, #1
 8004398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800439a:	f7fd ff21 	bl	80021e0 <HAL_GetTick>
 800439e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043a0:	e008      	b.n	80043b4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043a2:	f7fd ff1d 	bl	80021e0 <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d901      	bls.n	80043b4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e064      	b.n	800447e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043b4:	4b11      	ldr	r3, [pc, #68]	; (80043fc <HAL_RCC_OscConfig+0x4ac>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d0f0      	beq.n	80043a2 <HAL_RCC_OscConfig+0x452>
 80043c0:	e05c      	b.n	800447c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043c2:	4b10      	ldr	r3, [pc, #64]	; (8004404 <HAL_RCC_OscConfig+0x4b4>)
 80043c4:	2200      	movs	r2, #0
 80043c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c8:	f7fd ff0a 	bl	80021e0 <HAL_GetTick>
 80043cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043ce:	e008      	b.n	80043e2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043d0:	f7fd ff06 	bl	80021e0 <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d901      	bls.n	80043e2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e04d      	b.n	800447e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043e2:	4b06      	ldr	r3, [pc, #24]	; (80043fc <HAL_RCC_OscConfig+0x4ac>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d1f0      	bne.n	80043d0 <HAL_RCC_OscConfig+0x480>
 80043ee:	e045      	b.n	800447c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	699b      	ldr	r3, [r3, #24]
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d107      	bne.n	8004408 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e040      	b.n	800447e <HAL_RCC_OscConfig+0x52e>
 80043fc:	40023800 	.word	0x40023800
 8004400:	40007000 	.word	0x40007000
 8004404:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004408:	4b1f      	ldr	r3, [pc, #124]	; (8004488 <HAL_RCC_OscConfig+0x538>)
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	699b      	ldr	r3, [r3, #24]
 8004412:	2b01      	cmp	r3, #1
 8004414:	d030      	beq.n	8004478 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004420:	429a      	cmp	r2, r3
 8004422:	d129      	bne.n	8004478 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800442e:	429a      	cmp	r2, r3
 8004430:	d122      	bne.n	8004478 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004438:	4013      	ands	r3, r2
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800443e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004440:	4293      	cmp	r3, r2
 8004442:	d119      	bne.n	8004478 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800444e:	085b      	lsrs	r3, r3, #1
 8004450:	3b01      	subs	r3, #1
 8004452:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004454:	429a      	cmp	r2, r3
 8004456:	d10f      	bne.n	8004478 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004462:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004464:	429a      	cmp	r2, r3
 8004466:	d107      	bne.n	8004478 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004472:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004474:	429a      	cmp	r2, r3
 8004476:	d001      	beq.n	800447c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e000      	b.n	800447e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800447c:	2300      	movs	r3, #0
}
 800447e:	4618      	mov	r0, r3
 8004480:	3718      	adds	r7, #24
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	40023800 	.word	0x40023800

0800448c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d101      	bne.n	800449e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e041      	b.n	8004522 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d106      	bne.n	80044b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f7fd fc3c 	bl	8001d30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2202      	movs	r2, #2
 80044bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	3304      	adds	r3, #4
 80044c8:	4619      	mov	r1, r3
 80044ca:	4610      	mov	r0, r2
 80044cc:	f000 fad8 	bl	8004a80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3708      	adds	r7, #8
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}

0800452a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800452a:	b580      	push	{r7, lr}
 800452c:	b082      	sub	sp, #8
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d101      	bne.n	800453c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e041      	b.n	80045c0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004542:	b2db      	uxtb	r3, r3
 8004544:	2b00      	cmp	r3, #0
 8004546:	d106      	bne.n	8004556 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f000 f839 	bl	80045c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2202      	movs	r2, #2
 800455a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	3304      	adds	r3, #4
 8004566:	4619      	mov	r1, r3
 8004568:	4610      	mov	r0, r2
 800456a:	f000 fa89 	bl	8004a80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2201      	movs	r2, #1
 8004572:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2201      	movs	r2, #1
 800457a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2201      	movs	r2, #1
 8004582:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2201      	movs	r2, #1
 800458a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2201      	movs	r2, #1
 8004592:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2201      	movs	r2, #1
 800459a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2201      	movs	r2, #1
 80045a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2201      	movs	r2, #1
 80045aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2201      	movs	r2, #1
 80045b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2201      	movs	r2, #1
 80045ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045be:	2300      	movs	r3, #0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3708      	adds	r7, #8
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d109      	bne.n	8004600 <HAL_TIM_PWM_Start+0x24>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	bf14      	ite	ne
 80045f8:	2301      	movne	r3, #1
 80045fa:	2300      	moveq	r3, #0
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	e022      	b.n	8004646 <HAL_TIM_PWM_Start+0x6a>
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	2b04      	cmp	r3, #4
 8004604:	d109      	bne.n	800461a <HAL_TIM_PWM_Start+0x3e>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800460c:	b2db      	uxtb	r3, r3
 800460e:	2b01      	cmp	r3, #1
 8004610:	bf14      	ite	ne
 8004612:	2301      	movne	r3, #1
 8004614:	2300      	moveq	r3, #0
 8004616:	b2db      	uxtb	r3, r3
 8004618:	e015      	b.n	8004646 <HAL_TIM_PWM_Start+0x6a>
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	2b08      	cmp	r3, #8
 800461e:	d109      	bne.n	8004634 <HAL_TIM_PWM_Start+0x58>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004626:	b2db      	uxtb	r3, r3
 8004628:	2b01      	cmp	r3, #1
 800462a:	bf14      	ite	ne
 800462c:	2301      	movne	r3, #1
 800462e:	2300      	moveq	r3, #0
 8004630:	b2db      	uxtb	r3, r3
 8004632:	e008      	b.n	8004646 <HAL_TIM_PWM_Start+0x6a>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800463a:	b2db      	uxtb	r3, r3
 800463c:	2b01      	cmp	r3, #1
 800463e:	bf14      	ite	ne
 8004640:	2301      	movne	r3, #1
 8004642:	2300      	moveq	r3, #0
 8004644:	b2db      	uxtb	r3, r3
 8004646:	2b00      	cmp	r3, #0
 8004648:	d001      	beq.n	800464e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e07c      	b.n	8004748 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d104      	bne.n	800465e <HAL_TIM_PWM_Start+0x82>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2202      	movs	r2, #2
 8004658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800465c:	e013      	b.n	8004686 <HAL_TIM_PWM_Start+0xaa>
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	2b04      	cmp	r3, #4
 8004662:	d104      	bne.n	800466e <HAL_TIM_PWM_Start+0x92>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2202      	movs	r2, #2
 8004668:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800466c:	e00b      	b.n	8004686 <HAL_TIM_PWM_Start+0xaa>
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	2b08      	cmp	r3, #8
 8004672:	d104      	bne.n	800467e <HAL_TIM_PWM_Start+0xa2>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2202      	movs	r2, #2
 8004678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800467c:	e003      	b.n	8004686 <HAL_TIM_PWM_Start+0xaa>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2202      	movs	r2, #2
 8004682:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2201      	movs	r2, #1
 800468c:	6839      	ldr	r1, [r7, #0]
 800468e:	4618      	mov	r0, r3
 8004690:	f000 fce0 	bl	8005054 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a2d      	ldr	r2, [pc, #180]	; (8004750 <HAL_TIM_PWM_Start+0x174>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d004      	beq.n	80046a8 <HAL_TIM_PWM_Start+0xcc>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a2c      	ldr	r2, [pc, #176]	; (8004754 <HAL_TIM_PWM_Start+0x178>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d101      	bne.n	80046ac <HAL_TIM_PWM_Start+0xd0>
 80046a8:	2301      	movs	r3, #1
 80046aa:	e000      	b.n	80046ae <HAL_TIM_PWM_Start+0xd2>
 80046ac:	2300      	movs	r3, #0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d007      	beq.n	80046c2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a22      	ldr	r2, [pc, #136]	; (8004750 <HAL_TIM_PWM_Start+0x174>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d022      	beq.n	8004712 <HAL_TIM_PWM_Start+0x136>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046d4:	d01d      	beq.n	8004712 <HAL_TIM_PWM_Start+0x136>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a1f      	ldr	r2, [pc, #124]	; (8004758 <HAL_TIM_PWM_Start+0x17c>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d018      	beq.n	8004712 <HAL_TIM_PWM_Start+0x136>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a1d      	ldr	r2, [pc, #116]	; (800475c <HAL_TIM_PWM_Start+0x180>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d013      	beq.n	8004712 <HAL_TIM_PWM_Start+0x136>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a1c      	ldr	r2, [pc, #112]	; (8004760 <HAL_TIM_PWM_Start+0x184>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d00e      	beq.n	8004712 <HAL_TIM_PWM_Start+0x136>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a16      	ldr	r2, [pc, #88]	; (8004754 <HAL_TIM_PWM_Start+0x178>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d009      	beq.n	8004712 <HAL_TIM_PWM_Start+0x136>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a18      	ldr	r2, [pc, #96]	; (8004764 <HAL_TIM_PWM_Start+0x188>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d004      	beq.n	8004712 <HAL_TIM_PWM_Start+0x136>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a16      	ldr	r2, [pc, #88]	; (8004768 <HAL_TIM_PWM_Start+0x18c>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d111      	bne.n	8004736 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f003 0307 	and.w	r3, r3, #7
 800471c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2b06      	cmp	r3, #6
 8004722:	d010      	beq.n	8004746 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f042 0201 	orr.w	r2, r2, #1
 8004732:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004734:	e007      	b.n	8004746 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f042 0201 	orr.w	r2, r2, #1
 8004744:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	3710      	adds	r7, #16
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}
 8004750:	40010000 	.word	0x40010000
 8004754:	40010400 	.word	0x40010400
 8004758:	40000400 	.word	0x40000400
 800475c:	40000800 	.word	0x40000800
 8004760:	40000c00 	.word	0x40000c00
 8004764:	40014000 	.word	0x40014000
 8004768:	40001800 	.word	0x40001800

0800476c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b086      	sub	sp, #24
 8004770:	af00      	add	r7, sp, #0
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004778:	2300      	movs	r3, #0
 800477a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004782:	2b01      	cmp	r3, #1
 8004784:	d101      	bne.n	800478a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004786:	2302      	movs	r3, #2
 8004788:	e0ae      	b.n	80048e8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2201      	movs	r2, #1
 800478e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2b0c      	cmp	r3, #12
 8004796:	f200 809f 	bhi.w	80048d8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800479a:	a201      	add	r2, pc, #4	; (adr r2, 80047a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800479c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a0:	080047d5 	.word	0x080047d5
 80047a4:	080048d9 	.word	0x080048d9
 80047a8:	080048d9 	.word	0x080048d9
 80047ac:	080048d9 	.word	0x080048d9
 80047b0:	08004815 	.word	0x08004815
 80047b4:	080048d9 	.word	0x080048d9
 80047b8:	080048d9 	.word	0x080048d9
 80047bc:	080048d9 	.word	0x080048d9
 80047c0:	08004857 	.word	0x08004857
 80047c4:	080048d9 	.word	0x080048d9
 80047c8:	080048d9 	.word	0x080048d9
 80047cc:	080048d9 	.word	0x080048d9
 80047d0:	08004897 	.word	0x08004897
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68b9      	ldr	r1, [r7, #8]
 80047da:	4618      	mov	r0, r3
 80047dc:	f000 f9f0 	bl	8004bc0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	699a      	ldr	r2, [r3, #24]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f042 0208 	orr.w	r2, r2, #8
 80047ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	699a      	ldr	r2, [r3, #24]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f022 0204 	bic.w	r2, r2, #4
 80047fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	6999      	ldr	r1, [r3, #24]
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	691a      	ldr	r2, [r3, #16]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	430a      	orrs	r2, r1
 8004810:	619a      	str	r2, [r3, #24]
      break;
 8004812:	e064      	b.n	80048de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68b9      	ldr	r1, [r7, #8]
 800481a:	4618      	mov	r0, r3
 800481c:	f000 fa40 	bl	8004ca0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	699a      	ldr	r2, [r3, #24]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800482e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	699a      	ldr	r2, [r3, #24]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800483e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	6999      	ldr	r1, [r3, #24]
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	021a      	lsls	r2, r3, #8
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	430a      	orrs	r2, r1
 8004852:	619a      	str	r2, [r3, #24]
      break;
 8004854:	e043      	b.n	80048de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68b9      	ldr	r1, [r7, #8]
 800485c:	4618      	mov	r0, r3
 800485e:	f000 fa95 	bl	8004d8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	69da      	ldr	r2, [r3, #28]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f042 0208 	orr.w	r2, r2, #8
 8004870:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	69da      	ldr	r2, [r3, #28]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f022 0204 	bic.w	r2, r2, #4
 8004880:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	69d9      	ldr	r1, [r3, #28]
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	691a      	ldr	r2, [r3, #16]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	430a      	orrs	r2, r1
 8004892:	61da      	str	r2, [r3, #28]
      break;
 8004894:	e023      	b.n	80048de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68b9      	ldr	r1, [r7, #8]
 800489c:	4618      	mov	r0, r3
 800489e:	f000 fae9 	bl	8004e74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	69da      	ldr	r2, [r3, #28]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	69da      	ldr	r2, [r3, #28]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	69d9      	ldr	r1, [r3, #28]
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	691b      	ldr	r3, [r3, #16]
 80048cc:	021a      	lsls	r2, r3, #8
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	430a      	orrs	r2, r1
 80048d4:	61da      	str	r2, [r3, #28]
      break;
 80048d6:	e002      	b.n	80048de <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	75fb      	strb	r3, [r7, #23]
      break;
 80048dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80048e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3718      	adds	r7, #24
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048fa:	2300      	movs	r3, #0
 80048fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004904:	2b01      	cmp	r3, #1
 8004906:	d101      	bne.n	800490c <HAL_TIM_ConfigClockSource+0x1c>
 8004908:	2302      	movs	r3, #2
 800490a:	e0b4      	b.n	8004a76 <HAL_TIM_ConfigClockSource+0x186>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2202      	movs	r2, #2
 8004918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800492a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004932:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68ba      	ldr	r2, [r7, #8]
 800493a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004944:	d03e      	beq.n	80049c4 <HAL_TIM_ConfigClockSource+0xd4>
 8004946:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800494a:	f200 8087 	bhi.w	8004a5c <HAL_TIM_ConfigClockSource+0x16c>
 800494e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004952:	f000 8086 	beq.w	8004a62 <HAL_TIM_ConfigClockSource+0x172>
 8004956:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800495a:	d87f      	bhi.n	8004a5c <HAL_TIM_ConfigClockSource+0x16c>
 800495c:	2b70      	cmp	r3, #112	; 0x70
 800495e:	d01a      	beq.n	8004996 <HAL_TIM_ConfigClockSource+0xa6>
 8004960:	2b70      	cmp	r3, #112	; 0x70
 8004962:	d87b      	bhi.n	8004a5c <HAL_TIM_ConfigClockSource+0x16c>
 8004964:	2b60      	cmp	r3, #96	; 0x60
 8004966:	d050      	beq.n	8004a0a <HAL_TIM_ConfigClockSource+0x11a>
 8004968:	2b60      	cmp	r3, #96	; 0x60
 800496a:	d877      	bhi.n	8004a5c <HAL_TIM_ConfigClockSource+0x16c>
 800496c:	2b50      	cmp	r3, #80	; 0x50
 800496e:	d03c      	beq.n	80049ea <HAL_TIM_ConfigClockSource+0xfa>
 8004970:	2b50      	cmp	r3, #80	; 0x50
 8004972:	d873      	bhi.n	8004a5c <HAL_TIM_ConfigClockSource+0x16c>
 8004974:	2b40      	cmp	r3, #64	; 0x40
 8004976:	d058      	beq.n	8004a2a <HAL_TIM_ConfigClockSource+0x13a>
 8004978:	2b40      	cmp	r3, #64	; 0x40
 800497a:	d86f      	bhi.n	8004a5c <HAL_TIM_ConfigClockSource+0x16c>
 800497c:	2b30      	cmp	r3, #48	; 0x30
 800497e:	d064      	beq.n	8004a4a <HAL_TIM_ConfigClockSource+0x15a>
 8004980:	2b30      	cmp	r3, #48	; 0x30
 8004982:	d86b      	bhi.n	8004a5c <HAL_TIM_ConfigClockSource+0x16c>
 8004984:	2b20      	cmp	r3, #32
 8004986:	d060      	beq.n	8004a4a <HAL_TIM_ConfigClockSource+0x15a>
 8004988:	2b20      	cmp	r3, #32
 800498a:	d867      	bhi.n	8004a5c <HAL_TIM_ConfigClockSource+0x16c>
 800498c:	2b00      	cmp	r3, #0
 800498e:	d05c      	beq.n	8004a4a <HAL_TIM_ConfigClockSource+0x15a>
 8004990:	2b10      	cmp	r3, #16
 8004992:	d05a      	beq.n	8004a4a <HAL_TIM_ConfigClockSource+0x15a>
 8004994:	e062      	b.n	8004a5c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6818      	ldr	r0, [r3, #0]
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	6899      	ldr	r1, [r3, #8]
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	685a      	ldr	r2, [r3, #4]
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	f000 fb35 	bl	8005014 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80049b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68ba      	ldr	r2, [r7, #8]
 80049c0:	609a      	str	r2, [r3, #8]
      break;
 80049c2:	e04f      	b.n	8004a64 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6818      	ldr	r0, [r3, #0]
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	6899      	ldr	r1, [r3, #8]
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	685a      	ldr	r2, [r3, #4]
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	f000 fb1e 	bl	8005014 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	689a      	ldr	r2, [r3, #8]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049e6:	609a      	str	r2, [r3, #8]
      break;
 80049e8:	e03c      	b.n	8004a64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6818      	ldr	r0, [r3, #0]
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	6859      	ldr	r1, [r3, #4]
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	461a      	mov	r2, r3
 80049f8:	f000 fa92 	bl	8004f20 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2150      	movs	r1, #80	; 0x50
 8004a02:	4618      	mov	r0, r3
 8004a04:	f000 faeb 	bl	8004fde <TIM_ITRx_SetConfig>
      break;
 8004a08:	e02c      	b.n	8004a64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6818      	ldr	r0, [r3, #0]
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	6859      	ldr	r1, [r3, #4]
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	461a      	mov	r2, r3
 8004a18:	f000 fab1 	bl	8004f7e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2160      	movs	r1, #96	; 0x60
 8004a22:	4618      	mov	r0, r3
 8004a24:	f000 fadb 	bl	8004fde <TIM_ITRx_SetConfig>
      break;
 8004a28:	e01c      	b.n	8004a64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6818      	ldr	r0, [r3, #0]
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	6859      	ldr	r1, [r3, #4]
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	461a      	mov	r2, r3
 8004a38:	f000 fa72 	bl	8004f20 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2140      	movs	r1, #64	; 0x40
 8004a42:	4618      	mov	r0, r3
 8004a44:	f000 facb 	bl	8004fde <TIM_ITRx_SetConfig>
      break;
 8004a48:	e00c      	b.n	8004a64 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4619      	mov	r1, r3
 8004a54:	4610      	mov	r0, r2
 8004a56:	f000 fac2 	bl	8004fde <TIM_ITRx_SetConfig>
      break;
 8004a5a:	e003      	b.n	8004a64 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	73fb      	strb	r3, [r7, #15]
      break;
 8004a60:	e000      	b.n	8004a64 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004a62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3710      	adds	r7, #16
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
	...

08004a80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b085      	sub	sp, #20
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4a40      	ldr	r2, [pc, #256]	; (8004b94 <TIM_Base_SetConfig+0x114>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d013      	beq.n	8004ac0 <TIM_Base_SetConfig+0x40>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a9e:	d00f      	beq.n	8004ac0 <TIM_Base_SetConfig+0x40>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4a3d      	ldr	r2, [pc, #244]	; (8004b98 <TIM_Base_SetConfig+0x118>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d00b      	beq.n	8004ac0 <TIM_Base_SetConfig+0x40>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4a3c      	ldr	r2, [pc, #240]	; (8004b9c <TIM_Base_SetConfig+0x11c>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d007      	beq.n	8004ac0 <TIM_Base_SetConfig+0x40>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	4a3b      	ldr	r2, [pc, #236]	; (8004ba0 <TIM_Base_SetConfig+0x120>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d003      	beq.n	8004ac0 <TIM_Base_SetConfig+0x40>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	4a3a      	ldr	r2, [pc, #232]	; (8004ba4 <TIM_Base_SetConfig+0x124>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d108      	bne.n	8004ad2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ac6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a2f      	ldr	r2, [pc, #188]	; (8004b94 <TIM_Base_SetConfig+0x114>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d02b      	beq.n	8004b32 <TIM_Base_SetConfig+0xb2>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ae0:	d027      	beq.n	8004b32 <TIM_Base_SetConfig+0xb2>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a2c      	ldr	r2, [pc, #176]	; (8004b98 <TIM_Base_SetConfig+0x118>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d023      	beq.n	8004b32 <TIM_Base_SetConfig+0xb2>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a2b      	ldr	r2, [pc, #172]	; (8004b9c <TIM_Base_SetConfig+0x11c>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d01f      	beq.n	8004b32 <TIM_Base_SetConfig+0xb2>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a2a      	ldr	r2, [pc, #168]	; (8004ba0 <TIM_Base_SetConfig+0x120>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d01b      	beq.n	8004b32 <TIM_Base_SetConfig+0xb2>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a29      	ldr	r2, [pc, #164]	; (8004ba4 <TIM_Base_SetConfig+0x124>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d017      	beq.n	8004b32 <TIM_Base_SetConfig+0xb2>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4a28      	ldr	r2, [pc, #160]	; (8004ba8 <TIM_Base_SetConfig+0x128>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d013      	beq.n	8004b32 <TIM_Base_SetConfig+0xb2>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a27      	ldr	r2, [pc, #156]	; (8004bac <TIM_Base_SetConfig+0x12c>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d00f      	beq.n	8004b32 <TIM_Base_SetConfig+0xb2>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4a26      	ldr	r2, [pc, #152]	; (8004bb0 <TIM_Base_SetConfig+0x130>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d00b      	beq.n	8004b32 <TIM_Base_SetConfig+0xb2>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a25      	ldr	r2, [pc, #148]	; (8004bb4 <TIM_Base_SetConfig+0x134>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d007      	beq.n	8004b32 <TIM_Base_SetConfig+0xb2>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a24      	ldr	r2, [pc, #144]	; (8004bb8 <TIM_Base_SetConfig+0x138>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d003      	beq.n	8004b32 <TIM_Base_SetConfig+0xb2>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a23      	ldr	r2, [pc, #140]	; (8004bbc <TIM_Base_SetConfig+0x13c>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d108      	bne.n	8004b44 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	68fa      	ldr	r2, [r7, #12]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	695b      	ldr	r3, [r3, #20]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	68fa      	ldr	r2, [r7, #12]
 8004b56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	689a      	ldr	r2, [r3, #8]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a0a      	ldr	r2, [pc, #40]	; (8004b94 <TIM_Base_SetConfig+0x114>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d003      	beq.n	8004b78 <TIM_Base_SetConfig+0xf8>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a0c      	ldr	r2, [pc, #48]	; (8004ba4 <TIM_Base_SetConfig+0x124>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d103      	bne.n	8004b80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	691a      	ldr	r2, [r3, #16]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	615a      	str	r2, [r3, #20]
}
 8004b86:	bf00      	nop
 8004b88:	3714      	adds	r7, #20
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	40010000 	.word	0x40010000
 8004b98:	40000400 	.word	0x40000400
 8004b9c:	40000800 	.word	0x40000800
 8004ba0:	40000c00 	.word	0x40000c00
 8004ba4:	40010400 	.word	0x40010400
 8004ba8:	40014000 	.word	0x40014000
 8004bac:	40014400 	.word	0x40014400
 8004bb0:	40014800 	.word	0x40014800
 8004bb4:	40001800 	.word	0x40001800
 8004bb8:	40001c00 	.word	0x40001c00
 8004bbc:	40002000 	.word	0x40002000

08004bc0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b087      	sub	sp, #28
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a1b      	ldr	r3, [r3, #32]
 8004bce:	f023 0201 	bic.w	r2, r3, #1
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a1b      	ldr	r3, [r3, #32]
 8004bda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f023 0303 	bic.w	r3, r3, #3
 8004bf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68fa      	ldr	r2, [r7, #12]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	f023 0302 	bic.w	r3, r3, #2
 8004c08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	697a      	ldr	r2, [r7, #20]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a20      	ldr	r2, [pc, #128]	; (8004c98 <TIM_OC1_SetConfig+0xd8>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d003      	beq.n	8004c24 <TIM_OC1_SetConfig+0x64>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a1f      	ldr	r2, [pc, #124]	; (8004c9c <TIM_OC1_SetConfig+0xdc>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d10c      	bne.n	8004c3e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	f023 0308 	bic.w	r3, r3, #8
 8004c2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	697a      	ldr	r2, [r7, #20]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	f023 0304 	bic.w	r3, r3, #4
 8004c3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a15      	ldr	r2, [pc, #84]	; (8004c98 <TIM_OC1_SetConfig+0xd8>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d003      	beq.n	8004c4e <TIM_OC1_SetConfig+0x8e>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a14      	ldr	r2, [pc, #80]	; (8004c9c <TIM_OC1_SetConfig+0xdc>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d111      	bne.n	8004c72 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	693a      	ldr	r2, [r7, #16]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	699b      	ldr	r3, [r3, #24]
 8004c6c:	693a      	ldr	r2, [r7, #16]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	693a      	ldr	r2, [r7, #16]
 8004c76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	68fa      	ldr	r2, [r7, #12]
 8004c7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	685a      	ldr	r2, [r3, #4]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	697a      	ldr	r2, [r7, #20]
 8004c8a:	621a      	str	r2, [r3, #32]
}
 8004c8c:	bf00      	nop
 8004c8e:	371c      	adds	r7, #28
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr
 8004c98:	40010000 	.word	0x40010000
 8004c9c:	40010400 	.word	0x40010400

08004ca0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b087      	sub	sp, #28
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a1b      	ldr	r3, [r3, #32]
 8004cae:	f023 0210 	bic.w	r2, r3, #16
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a1b      	ldr	r3, [r3, #32]
 8004cba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	021b      	lsls	r3, r3, #8
 8004cde:	68fa      	ldr	r2, [r7, #12]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	f023 0320 	bic.w	r3, r3, #32
 8004cea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	011b      	lsls	r3, r3, #4
 8004cf2:	697a      	ldr	r2, [r7, #20]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a22      	ldr	r2, [pc, #136]	; (8004d84 <TIM_OC2_SetConfig+0xe4>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d003      	beq.n	8004d08 <TIM_OC2_SetConfig+0x68>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a21      	ldr	r2, [pc, #132]	; (8004d88 <TIM_OC2_SetConfig+0xe8>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d10d      	bne.n	8004d24 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	011b      	lsls	r3, r3, #4
 8004d16:	697a      	ldr	r2, [r7, #20]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d22:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a17      	ldr	r2, [pc, #92]	; (8004d84 <TIM_OC2_SetConfig+0xe4>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d003      	beq.n	8004d34 <TIM_OC2_SetConfig+0x94>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a16      	ldr	r2, [pc, #88]	; (8004d88 <TIM_OC2_SetConfig+0xe8>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d113      	bne.n	8004d5c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	695b      	ldr	r3, [r3, #20]
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	693a      	ldr	r2, [r7, #16]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	699b      	ldr	r3, [r3, #24]
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	693a      	ldr	r2, [r7, #16]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	693a      	ldr	r2, [r7, #16]
 8004d60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	68fa      	ldr	r2, [r7, #12]
 8004d66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	685a      	ldr	r2, [r3, #4]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	697a      	ldr	r2, [r7, #20]
 8004d74:	621a      	str	r2, [r3, #32]
}
 8004d76:	bf00      	nop
 8004d78:	371c      	adds	r7, #28
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr
 8004d82:	bf00      	nop
 8004d84:	40010000 	.word	0x40010000
 8004d88:	40010400 	.word	0x40010400

08004d8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b087      	sub	sp, #28
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a1b      	ldr	r3, [r3, #32]
 8004d9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a1b      	ldr	r3, [r3, #32]
 8004da6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	69db      	ldr	r3, [r3, #28]
 8004db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f023 0303 	bic.w	r3, r3, #3
 8004dc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004dd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	021b      	lsls	r3, r3, #8
 8004ddc:	697a      	ldr	r2, [r7, #20]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a21      	ldr	r2, [pc, #132]	; (8004e6c <TIM_OC3_SetConfig+0xe0>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d003      	beq.n	8004df2 <TIM_OC3_SetConfig+0x66>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a20      	ldr	r2, [pc, #128]	; (8004e70 <TIM_OC3_SetConfig+0xe4>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d10d      	bne.n	8004e0e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004df8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	021b      	lsls	r3, r3, #8
 8004e00:	697a      	ldr	r2, [r7, #20]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a16      	ldr	r2, [pc, #88]	; (8004e6c <TIM_OC3_SetConfig+0xe0>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d003      	beq.n	8004e1e <TIM_OC3_SetConfig+0x92>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a15      	ldr	r2, [pc, #84]	; (8004e70 <TIM_OC3_SetConfig+0xe4>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d113      	bne.n	8004e46 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	695b      	ldr	r3, [r3, #20]
 8004e32:	011b      	lsls	r3, r3, #4
 8004e34:	693a      	ldr	r2, [r7, #16]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	699b      	ldr	r3, [r3, #24]
 8004e3e:	011b      	lsls	r3, r3, #4
 8004e40:	693a      	ldr	r2, [r7, #16]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	693a      	ldr	r2, [r7, #16]
 8004e4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	68fa      	ldr	r2, [r7, #12]
 8004e50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	685a      	ldr	r2, [r3, #4]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	697a      	ldr	r2, [r7, #20]
 8004e5e:	621a      	str	r2, [r3, #32]
}
 8004e60:	bf00      	nop
 8004e62:	371c      	adds	r7, #28
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr
 8004e6c:	40010000 	.word	0x40010000
 8004e70:	40010400 	.word	0x40010400

08004e74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b087      	sub	sp, #28
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a1b      	ldr	r3, [r3, #32]
 8004e82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a1b      	ldr	r3, [r3, #32]
 8004e8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	69db      	ldr	r3, [r3, #28]
 8004e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ea2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	021b      	lsls	r3, r3, #8
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ebe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	031b      	lsls	r3, r3, #12
 8004ec6:	693a      	ldr	r2, [r7, #16]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a12      	ldr	r2, [pc, #72]	; (8004f18 <TIM_OC4_SetConfig+0xa4>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d003      	beq.n	8004edc <TIM_OC4_SetConfig+0x68>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a11      	ldr	r2, [pc, #68]	; (8004f1c <TIM_OC4_SetConfig+0xa8>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d109      	bne.n	8004ef0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ee2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	695b      	ldr	r3, [r3, #20]
 8004ee8:	019b      	lsls	r3, r3, #6
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	697a      	ldr	r2, [r7, #20]
 8004ef4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	685a      	ldr	r2, [r3, #4]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	693a      	ldr	r2, [r7, #16]
 8004f08:	621a      	str	r2, [r3, #32]
}
 8004f0a:	bf00      	nop
 8004f0c:	371c      	adds	r7, #28
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	40010000 	.word	0x40010000
 8004f1c:	40010400 	.word	0x40010400

08004f20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b087      	sub	sp, #28
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6a1b      	ldr	r3, [r3, #32]
 8004f30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6a1b      	ldr	r3, [r3, #32]
 8004f36:	f023 0201 	bic.w	r2, r3, #1
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	699b      	ldr	r3, [r3, #24]
 8004f42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	011b      	lsls	r3, r3, #4
 8004f50:	693a      	ldr	r2, [r7, #16]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	f023 030a 	bic.w	r3, r3, #10
 8004f5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f5e:	697a      	ldr	r2, [r7, #20]
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	693a      	ldr	r2, [r7, #16]
 8004f6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	697a      	ldr	r2, [r7, #20]
 8004f70:	621a      	str	r2, [r3, #32]
}
 8004f72:	bf00      	nop
 8004f74:	371c      	adds	r7, #28
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr

08004f7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f7e:	b480      	push	{r7}
 8004f80:	b087      	sub	sp, #28
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	60f8      	str	r0, [r7, #12]
 8004f86:	60b9      	str	r1, [r7, #8]
 8004f88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6a1b      	ldr	r3, [r3, #32]
 8004f8e:	f023 0210 	bic.w	r2, r3, #16
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6a1b      	ldr	r3, [r3, #32]
 8004fa0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004fa8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	031b      	lsls	r3, r3, #12
 8004fae:	697a      	ldr	r2, [r7, #20]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004fba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	011b      	lsls	r3, r3, #4
 8004fc0:	693a      	ldr	r2, [r7, #16]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	697a      	ldr	r2, [r7, #20]
 8004fca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	693a      	ldr	r2, [r7, #16]
 8004fd0:	621a      	str	r2, [r3, #32]
}
 8004fd2:	bf00      	nop
 8004fd4:	371c      	adds	r7, #28
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr

08004fde <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004fde:	b480      	push	{r7}
 8004fe0:	b085      	sub	sp, #20
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
 8004fe6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ff4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ff6:	683a      	ldr	r2, [r7, #0]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	f043 0307 	orr.w	r3, r3, #7
 8005000:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	609a      	str	r2, [r3, #8]
}
 8005008:	bf00      	nop
 800500a:	3714      	adds	r7, #20
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005014:	b480      	push	{r7}
 8005016:	b087      	sub	sp, #28
 8005018:	af00      	add	r7, sp, #0
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	60b9      	str	r1, [r7, #8]
 800501e:	607a      	str	r2, [r7, #4]
 8005020:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800502e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	021a      	lsls	r2, r3, #8
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	431a      	orrs	r2, r3
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	4313      	orrs	r3, r2
 800503c:	697a      	ldr	r2, [r7, #20]
 800503e:	4313      	orrs	r3, r2
 8005040:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	697a      	ldr	r2, [r7, #20]
 8005046:	609a      	str	r2, [r3, #8]
}
 8005048:	bf00      	nop
 800504a:	371c      	adds	r7, #28
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005054:	b480      	push	{r7}
 8005056:	b087      	sub	sp, #28
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	f003 031f 	and.w	r3, r3, #31
 8005066:	2201      	movs	r2, #1
 8005068:	fa02 f303 	lsl.w	r3, r2, r3
 800506c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	6a1a      	ldr	r2, [r3, #32]
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	43db      	mvns	r3, r3
 8005076:	401a      	ands	r2, r3
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6a1a      	ldr	r2, [r3, #32]
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	f003 031f 	and.w	r3, r3, #31
 8005086:	6879      	ldr	r1, [r7, #4]
 8005088:	fa01 f303 	lsl.w	r3, r1, r3
 800508c:	431a      	orrs	r2, r3
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	621a      	str	r2, [r3, #32]
}
 8005092:	bf00      	nop
 8005094:	371c      	adds	r7, #28
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
	...

080050a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b085      	sub	sp, #20
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d101      	bne.n	80050b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050b4:	2302      	movs	r3, #2
 80050b6:	e05a      	b.n	800516e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2202      	movs	r2, #2
 80050c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a21      	ldr	r2, [pc, #132]	; (800517c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d022      	beq.n	8005142 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005104:	d01d      	beq.n	8005142 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a1d      	ldr	r2, [pc, #116]	; (8005180 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d018      	beq.n	8005142 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a1b      	ldr	r2, [pc, #108]	; (8005184 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d013      	beq.n	8005142 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a1a      	ldr	r2, [pc, #104]	; (8005188 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d00e      	beq.n	8005142 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a18      	ldr	r2, [pc, #96]	; (800518c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d009      	beq.n	8005142 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a17      	ldr	r2, [pc, #92]	; (8005190 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d004      	beq.n	8005142 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a15      	ldr	r2, [pc, #84]	; (8005194 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d10c      	bne.n	800515c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005148:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	68ba      	ldr	r2, [r7, #8]
 8005150:	4313      	orrs	r3, r2
 8005152:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	68ba      	ldr	r2, [r7, #8]
 800515a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800516c:	2300      	movs	r3, #0
}
 800516e:	4618      	mov	r0, r3
 8005170:	3714      	adds	r7, #20
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	40010000 	.word	0x40010000
 8005180:	40000400 	.word	0x40000400
 8005184:	40000800 	.word	0x40000800
 8005188:	40000c00 	.word	0x40000c00
 800518c:	40010400 	.word	0x40010400
 8005190:	40014000 	.word	0x40014000
 8005194:	40001800 	.word	0x40001800

08005198 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005198:	b480      	push	{r7}
 800519a:	b085      	sub	sp, #20
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80051a2:	2300      	movs	r3, #0
 80051a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d101      	bne.n	80051b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80051b0:	2302      	movs	r3, #2
 80051b2:	e03d      	b.n	8005230 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	4313      	orrs	r3, r2
 8005200:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	695b      	ldr	r3, [r3, #20]
 800520c:	4313      	orrs	r3, r2
 800520e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	69db      	ldr	r3, [r3, #28]
 800521a:	4313      	orrs	r3, r2
 800521c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68fa      	ldr	r2, [r7, #12]
 8005224:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800522e:	2300      	movs	r3, #0
}
 8005230:	4618      	mov	r0, r3
 8005232:	3714      	adds	r7, #20
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr

0800523c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b082      	sub	sp, #8
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d101      	bne.n	800524e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e03f      	b.n	80052ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005254:	b2db      	uxtb	r3, r3
 8005256:	2b00      	cmp	r3, #0
 8005258:	d106      	bne.n	8005268 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f7fc fdc0 	bl	8001de8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2224      	movs	r2, #36	; 0x24
 800526c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	68da      	ldr	r2, [r3, #12]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800527e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f000 f929 	bl	80054d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	691a      	ldr	r2, [r3, #16]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005294:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	695a      	ldr	r2, [r3, #20]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68da      	ldr	r2, [r3, #12]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2220      	movs	r2, #32
 80052c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2220      	movs	r2, #32
 80052c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3708      	adds	r7, #8
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}

080052d6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052d6:	b580      	push	{r7, lr}
 80052d8:	b08a      	sub	sp, #40	; 0x28
 80052da:	af02      	add	r7, sp, #8
 80052dc:	60f8      	str	r0, [r7, #12]
 80052de:	60b9      	str	r1, [r7, #8]
 80052e0:	603b      	str	r3, [r7, #0]
 80052e2:	4613      	mov	r3, r2
 80052e4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80052e6:	2300      	movs	r3, #0
 80052e8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	2b20      	cmp	r3, #32
 80052f4:	d17c      	bne.n	80053f0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d002      	beq.n	8005302 <HAL_UART_Transmit+0x2c>
 80052fc:	88fb      	ldrh	r3, [r7, #6]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d101      	bne.n	8005306 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e075      	b.n	80053f2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800530c:	2b01      	cmp	r3, #1
 800530e:	d101      	bne.n	8005314 <HAL_UART_Transmit+0x3e>
 8005310:	2302      	movs	r3, #2
 8005312:	e06e      	b.n	80053f2 <HAL_UART_Transmit+0x11c>
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2200      	movs	r2, #0
 8005320:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2221      	movs	r2, #33	; 0x21
 8005326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800532a:	f7fc ff59 	bl	80021e0 <HAL_GetTick>
 800532e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	88fa      	ldrh	r2, [r7, #6]
 8005334:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	88fa      	ldrh	r2, [r7, #6]
 800533a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005344:	d108      	bne.n	8005358 <HAL_UART_Transmit+0x82>
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d104      	bne.n	8005358 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800534e:	2300      	movs	r3, #0
 8005350:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	61bb      	str	r3, [r7, #24]
 8005356:	e003      	b.n	8005360 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800535c:	2300      	movs	r3, #0
 800535e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2200      	movs	r2, #0
 8005364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005368:	e02a      	b.n	80053c0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	9300      	str	r3, [sp, #0]
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	2200      	movs	r2, #0
 8005372:	2180      	movs	r1, #128	; 0x80
 8005374:	68f8      	ldr	r0, [r7, #12]
 8005376:	f000 f840 	bl	80053fa <UART_WaitOnFlagUntilTimeout>
 800537a:	4603      	mov	r3, r0
 800537c:	2b00      	cmp	r3, #0
 800537e:	d001      	beq.n	8005384 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005380:	2303      	movs	r3, #3
 8005382:	e036      	b.n	80053f2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d10b      	bne.n	80053a2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	881b      	ldrh	r3, [r3, #0]
 800538e:	461a      	mov	r2, r3
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005398:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	3302      	adds	r3, #2
 800539e:	61bb      	str	r3, [r7, #24]
 80053a0:	e007      	b.n	80053b2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	781a      	ldrb	r2, [r3, #0]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	3301      	adds	r3, #1
 80053b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	3b01      	subs	r3, #1
 80053ba:	b29a      	uxth	r2, r3
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d1cf      	bne.n	800536a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	9300      	str	r3, [sp, #0]
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	2200      	movs	r2, #0
 80053d2:	2140      	movs	r1, #64	; 0x40
 80053d4:	68f8      	ldr	r0, [r7, #12]
 80053d6:	f000 f810 	bl	80053fa <UART_WaitOnFlagUntilTimeout>
 80053da:	4603      	mov	r3, r0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d001      	beq.n	80053e4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	e006      	b.n	80053f2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2220      	movs	r2, #32
 80053e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80053ec:	2300      	movs	r3, #0
 80053ee:	e000      	b.n	80053f2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80053f0:	2302      	movs	r3, #2
  }
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3720      	adds	r7, #32
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}

080053fa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80053fa:	b580      	push	{r7, lr}
 80053fc:	b090      	sub	sp, #64	; 0x40
 80053fe:	af00      	add	r7, sp, #0
 8005400:	60f8      	str	r0, [r7, #12]
 8005402:	60b9      	str	r1, [r7, #8]
 8005404:	603b      	str	r3, [r7, #0]
 8005406:	4613      	mov	r3, r2
 8005408:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800540a:	e050      	b.n	80054ae <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800540c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800540e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005412:	d04c      	beq.n	80054ae <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005414:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005416:	2b00      	cmp	r3, #0
 8005418:	d007      	beq.n	800542a <UART_WaitOnFlagUntilTimeout+0x30>
 800541a:	f7fc fee1 	bl	80021e0 <HAL_GetTick>
 800541e:	4602      	mov	r2, r0
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005426:	429a      	cmp	r2, r3
 8005428:	d241      	bcs.n	80054ae <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	330c      	adds	r3, #12
 8005430:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005434:	e853 3f00 	ldrex	r3, [r3]
 8005438:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800543a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005440:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	330c      	adds	r3, #12
 8005448:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800544a:	637a      	str	r2, [r7, #52]	; 0x34
 800544c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800544e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005450:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005452:	e841 2300 	strex	r3, r2, [r1]
 8005456:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800545a:	2b00      	cmp	r3, #0
 800545c:	d1e5      	bne.n	800542a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	3314      	adds	r3, #20
 8005464:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	e853 3f00 	ldrex	r3, [r3]
 800546c:	613b      	str	r3, [r7, #16]
   return(result);
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	f023 0301 	bic.w	r3, r3, #1
 8005474:	63bb      	str	r3, [r7, #56]	; 0x38
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	3314      	adds	r3, #20
 800547c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800547e:	623a      	str	r2, [r7, #32]
 8005480:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005482:	69f9      	ldr	r1, [r7, #28]
 8005484:	6a3a      	ldr	r2, [r7, #32]
 8005486:	e841 2300 	strex	r3, r2, [r1]
 800548a:	61bb      	str	r3, [r7, #24]
   return(result);
 800548c:	69bb      	ldr	r3, [r7, #24]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d1e5      	bne.n	800545e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2220      	movs	r2, #32
 8005496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2220      	movs	r2, #32
 800549e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e00f      	b.n	80054ce <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	4013      	ands	r3, r2
 80054b8:	68ba      	ldr	r2, [r7, #8]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	bf0c      	ite	eq
 80054be:	2301      	moveq	r3, #1
 80054c0:	2300      	movne	r3, #0
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	461a      	mov	r2, r3
 80054c6:	79fb      	ldrb	r3, [r7, #7]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d09f      	beq.n	800540c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3740      	adds	r7, #64	; 0x40
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
	...

080054d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054dc:	b0c0      	sub	sp, #256	; 0x100
 80054de:	af00      	add	r7, sp, #0
 80054e0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	691b      	ldr	r3, [r3, #16]
 80054ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80054f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054f4:	68d9      	ldr	r1, [r3, #12]
 80054f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	ea40 0301 	orr.w	r3, r0, r1
 8005500:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005506:	689a      	ldr	r2, [r3, #8]
 8005508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	431a      	orrs	r2, r3
 8005510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005514:	695b      	ldr	r3, [r3, #20]
 8005516:	431a      	orrs	r2, r3
 8005518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800551c:	69db      	ldr	r3, [r3, #28]
 800551e:	4313      	orrs	r3, r2
 8005520:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005530:	f021 010c 	bic.w	r1, r1, #12
 8005534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800553e:	430b      	orrs	r3, r1
 8005540:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	695b      	ldr	r3, [r3, #20]
 800554a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800554e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005552:	6999      	ldr	r1, [r3, #24]
 8005554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	ea40 0301 	orr.w	r3, r0, r1
 800555e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	4b8f      	ldr	r3, [pc, #572]	; (80057a4 <UART_SetConfig+0x2cc>)
 8005568:	429a      	cmp	r2, r3
 800556a:	d005      	beq.n	8005578 <UART_SetConfig+0xa0>
 800556c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	4b8d      	ldr	r3, [pc, #564]	; (80057a8 <UART_SetConfig+0x2d0>)
 8005574:	429a      	cmp	r2, r3
 8005576:	d104      	bne.n	8005582 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005578:	f7fe faa6 	bl	8003ac8 <HAL_RCC_GetPCLK2Freq>
 800557c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005580:	e003      	b.n	800558a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005582:	f7fe fa8d 	bl	8003aa0 <HAL_RCC_GetPCLK1Freq>
 8005586:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800558a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800558e:	69db      	ldr	r3, [r3, #28]
 8005590:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005594:	f040 810c 	bne.w	80057b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005598:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800559c:	2200      	movs	r2, #0
 800559e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80055a2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80055a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80055aa:	4622      	mov	r2, r4
 80055ac:	462b      	mov	r3, r5
 80055ae:	1891      	adds	r1, r2, r2
 80055b0:	65b9      	str	r1, [r7, #88]	; 0x58
 80055b2:	415b      	adcs	r3, r3
 80055b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80055ba:	4621      	mov	r1, r4
 80055bc:	eb12 0801 	adds.w	r8, r2, r1
 80055c0:	4629      	mov	r1, r5
 80055c2:	eb43 0901 	adc.w	r9, r3, r1
 80055c6:	f04f 0200 	mov.w	r2, #0
 80055ca:	f04f 0300 	mov.w	r3, #0
 80055ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80055d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80055d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80055da:	4690      	mov	r8, r2
 80055dc:	4699      	mov	r9, r3
 80055de:	4623      	mov	r3, r4
 80055e0:	eb18 0303 	adds.w	r3, r8, r3
 80055e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80055e8:	462b      	mov	r3, r5
 80055ea:	eb49 0303 	adc.w	r3, r9, r3
 80055ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80055f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80055fe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005602:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005606:	460b      	mov	r3, r1
 8005608:	18db      	adds	r3, r3, r3
 800560a:	653b      	str	r3, [r7, #80]	; 0x50
 800560c:	4613      	mov	r3, r2
 800560e:	eb42 0303 	adc.w	r3, r2, r3
 8005612:	657b      	str	r3, [r7, #84]	; 0x54
 8005614:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005618:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800561c:	f7fb fb34 	bl	8000c88 <__aeabi_uldivmod>
 8005620:	4602      	mov	r2, r0
 8005622:	460b      	mov	r3, r1
 8005624:	4b61      	ldr	r3, [pc, #388]	; (80057ac <UART_SetConfig+0x2d4>)
 8005626:	fba3 2302 	umull	r2, r3, r3, r2
 800562a:	095b      	lsrs	r3, r3, #5
 800562c:	011c      	lsls	r4, r3, #4
 800562e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005632:	2200      	movs	r2, #0
 8005634:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005638:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800563c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005640:	4642      	mov	r2, r8
 8005642:	464b      	mov	r3, r9
 8005644:	1891      	adds	r1, r2, r2
 8005646:	64b9      	str	r1, [r7, #72]	; 0x48
 8005648:	415b      	adcs	r3, r3
 800564a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800564c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005650:	4641      	mov	r1, r8
 8005652:	eb12 0a01 	adds.w	sl, r2, r1
 8005656:	4649      	mov	r1, r9
 8005658:	eb43 0b01 	adc.w	fp, r3, r1
 800565c:	f04f 0200 	mov.w	r2, #0
 8005660:	f04f 0300 	mov.w	r3, #0
 8005664:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005668:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800566c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005670:	4692      	mov	sl, r2
 8005672:	469b      	mov	fp, r3
 8005674:	4643      	mov	r3, r8
 8005676:	eb1a 0303 	adds.w	r3, sl, r3
 800567a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800567e:	464b      	mov	r3, r9
 8005680:	eb4b 0303 	adc.w	r3, fp, r3
 8005684:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005694:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005698:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800569c:	460b      	mov	r3, r1
 800569e:	18db      	adds	r3, r3, r3
 80056a0:	643b      	str	r3, [r7, #64]	; 0x40
 80056a2:	4613      	mov	r3, r2
 80056a4:	eb42 0303 	adc.w	r3, r2, r3
 80056a8:	647b      	str	r3, [r7, #68]	; 0x44
 80056aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80056ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80056b2:	f7fb fae9 	bl	8000c88 <__aeabi_uldivmod>
 80056b6:	4602      	mov	r2, r0
 80056b8:	460b      	mov	r3, r1
 80056ba:	4611      	mov	r1, r2
 80056bc:	4b3b      	ldr	r3, [pc, #236]	; (80057ac <UART_SetConfig+0x2d4>)
 80056be:	fba3 2301 	umull	r2, r3, r3, r1
 80056c2:	095b      	lsrs	r3, r3, #5
 80056c4:	2264      	movs	r2, #100	; 0x64
 80056c6:	fb02 f303 	mul.w	r3, r2, r3
 80056ca:	1acb      	subs	r3, r1, r3
 80056cc:	00db      	lsls	r3, r3, #3
 80056ce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80056d2:	4b36      	ldr	r3, [pc, #216]	; (80057ac <UART_SetConfig+0x2d4>)
 80056d4:	fba3 2302 	umull	r2, r3, r3, r2
 80056d8:	095b      	lsrs	r3, r3, #5
 80056da:	005b      	lsls	r3, r3, #1
 80056dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80056e0:	441c      	add	r4, r3
 80056e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056e6:	2200      	movs	r2, #0
 80056e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80056ec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80056f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80056f4:	4642      	mov	r2, r8
 80056f6:	464b      	mov	r3, r9
 80056f8:	1891      	adds	r1, r2, r2
 80056fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80056fc:	415b      	adcs	r3, r3
 80056fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005700:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005704:	4641      	mov	r1, r8
 8005706:	1851      	adds	r1, r2, r1
 8005708:	6339      	str	r1, [r7, #48]	; 0x30
 800570a:	4649      	mov	r1, r9
 800570c:	414b      	adcs	r3, r1
 800570e:	637b      	str	r3, [r7, #52]	; 0x34
 8005710:	f04f 0200 	mov.w	r2, #0
 8005714:	f04f 0300 	mov.w	r3, #0
 8005718:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800571c:	4659      	mov	r1, fp
 800571e:	00cb      	lsls	r3, r1, #3
 8005720:	4651      	mov	r1, sl
 8005722:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005726:	4651      	mov	r1, sl
 8005728:	00ca      	lsls	r2, r1, #3
 800572a:	4610      	mov	r0, r2
 800572c:	4619      	mov	r1, r3
 800572e:	4603      	mov	r3, r0
 8005730:	4642      	mov	r2, r8
 8005732:	189b      	adds	r3, r3, r2
 8005734:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005738:	464b      	mov	r3, r9
 800573a:	460a      	mov	r2, r1
 800573c:	eb42 0303 	adc.w	r3, r2, r3
 8005740:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005750:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005754:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005758:	460b      	mov	r3, r1
 800575a:	18db      	adds	r3, r3, r3
 800575c:	62bb      	str	r3, [r7, #40]	; 0x28
 800575e:	4613      	mov	r3, r2
 8005760:	eb42 0303 	adc.w	r3, r2, r3
 8005764:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005766:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800576a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800576e:	f7fb fa8b 	bl	8000c88 <__aeabi_uldivmod>
 8005772:	4602      	mov	r2, r0
 8005774:	460b      	mov	r3, r1
 8005776:	4b0d      	ldr	r3, [pc, #52]	; (80057ac <UART_SetConfig+0x2d4>)
 8005778:	fba3 1302 	umull	r1, r3, r3, r2
 800577c:	095b      	lsrs	r3, r3, #5
 800577e:	2164      	movs	r1, #100	; 0x64
 8005780:	fb01 f303 	mul.w	r3, r1, r3
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	00db      	lsls	r3, r3, #3
 8005788:	3332      	adds	r3, #50	; 0x32
 800578a:	4a08      	ldr	r2, [pc, #32]	; (80057ac <UART_SetConfig+0x2d4>)
 800578c:	fba2 2303 	umull	r2, r3, r2, r3
 8005790:	095b      	lsrs	r3, r3, #5
 8005792:	f003 0207 	and.w	r2, r3, #7
 8005796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4422      	add	r2, r4
 800579e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80057a0:	e105      	b.n	80059ae <UART_SetConfig+0x4d6>
 80057a2:	bf00      	nop
 80057a4:	40011000 	.word	0x40011000
 80057a8:	40011400 	.word	0x40011400
 80057ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057b4:	2200      	movs	r2, #0
 80057b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80057ba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80057be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80057c2:	4642      	mov	r2, r8
 80057c4:	464b      	mov	r3, r9
 80057c6:	1891      	adds	r1, r2, r2
 80057c8:	6239      	str	r1, [r7, #32]
 80057ca:	415b      	adcs	r3, r3
 80057cc:	627b      	str	r3, [r7, #36]	; 0x24
 80057ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80057d2:	4641      	mov	r1, r8
 80057d4:	1854      	adds	r4, r2, r1
 80057d6:	4649      	mov	r1, r9
 80057d8:	eb43 0501 	adc.w	r5, r3, r1
 80057dc:	f04f 0200 	mov.w	r2, #0
 80057e0:	f04f 0300 	mov.w	r3, #0
 80057e4:	00eb      	lsls	r3, r5, #3
 80057e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80057ea:	00e2      	lsls	r2, r4, #3
 80057ec:	4614      	mov	r4, r2
 80057ee:	461d      	mov	r5, r3
 80057f0:	4643      	mov	r3, r8
 80057f2:	18e3      	adds	r3, r4, r3
 80057f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80057f8:	464b      	mov	r3, r9
 80057fa:	eb45 0303 	adc.w	r3, r5, r3
 80057fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800580e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005812:	f04f 0200 	mov.w	r2, #0
 8005816:	f04f 0300 	mov.w	r3, #0
 800581a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800581e:	4629      	mov	r1, r5
 8005820:	008b      	lsls	r3, r1, #2
 8005822:	4621      	mov	r1, r4
 8005824:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005828:	4621      	mov	r1, r4
 800582a:	008a      	lsls	r2, r1, #2
 800582c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005830:	f7fb fa2a 	bl	8000c88 <__aeabi_uldivmod>
 8005834:	4602      	mov	r2, r0
 8005836:	460b      	mov	r3, r1
 8005838:	4b60      	ldr	r3, [pc, #384]	; (80059bc <UART_SetConfig+0x4e4>)
 800583a:	fba3 2302 	umull	r2, r3, r3, r2
 800583e:	095b      	lsrs	r3, r3, #5
 8005840:	011c      	lsls	r4, r3, #4
 8005842:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005846:	2200      	movs	r2, #0
 8005848:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800584c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005850:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005854:	4642      	mov	r2, r8
 8005856:	464b      	mov	r3, r9
 8005858:	1891      	adds	r1, r2, r2
 800585a:	61b9      	str	r1, [r7, #24]
 800585c:	415b      	adcs	r3, r3
 800585e:	61fb      	str	r3, [r7, #28]
 8005860:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005864:	4641      	mov	r1, r8
 8005866:	1851      	adds	r1, r2, r1
 8005868:	6139      	str	r1, [r7, #16]
 800586a:	4649      	mov	r1, r9
 800586c:	414b      	adcs	r3, r1
 800586e:	617b      	str	r3, [r7, #20]
 8005870:	f04f 0200 	mov.w	r2, #0
 8005874:	f04f 0300 	mov.w	r3, #0
 8005878:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800587c:	4659      	mov	r1, fp
 800587e:	00cb      	lsls	r3, r1, #3
 8005880:	4651      	mov	r1, sl
 8005882:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005886:	4651      	mov	r1, sl
 8005888:	00ca      	lsls	r2, r1, #3
 800588a:	4610      	mov	r0, r2
 800588c:	4619      	mov	r1, r3
 800588e:	4603      	mov	r3, r0
 8005890:	4642      	mov	r2, r8
 8005892:	189b      	adds	r3, r3, r2
 8005894:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005898:	464b      	mov	r3, r9
 800589a:	460a      	mov	r2, r1
 800589c:	eb42 0303 	adc.w	r3, r2, r3
 80058a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80058a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80058ae:	67fa      	str	r2, [r7, #124]	; 0x7c
 80058b0:	f04f 0200 	mov.w	r2, #0
 80058b4:	f04f 0300 	mov.w	r3, #0
 80058b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80058bc:	4649      	mov	r1, r9
 80058be:	008b      	lsls	r3, r1, #2
 80058c0:	4641      	mov	r1, r8
 80058c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058c6:	4641      	mov	r1, r8
 80058c8:	008a      	lsls	r2, r1, #2
 80058ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80058ce:	f7fb f9db 	bl	8000c88 <__aeabi_uldivmod>
 80058d2:	4602      	mov	r2, r0
 80058d4:	460b      	mov	r3, r1
 80058d6:	4b39      	ldr	r3, [pc, #228]	; (80059bc <UART_SetConfig+0x4e4>)
 80058d8:	fba3 1302 	umull	r1, r3, r3, r2
 80058dc:	095b      	lsrs	r3, r3, #5
 80058de:	2164      	movs	r1, #100	; 0x64
 80058e0:	fb01 f303 	mul.w	r3, r1, r3
 80058e4:	1ad3      	subs	r3, r2, r3
 80058e6:	011b      	lsls	r3, r3, #4
 80058e8:	3332      	adds	r3, #50	; 0x32
 80058ea:	4a34      	ldr	r2, [pc, #208]	; (80059bc <UART_SetConfig+0x4e4>)
 80058ec:	fba2 2303 	umull	r2, r3, r2, r3
 80058f0:	095b      	lsrs	r3, r3, #5
 80058f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058f6:	441c      	add	r4, r3
 80058f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058fc:	2200      	movs	r2, #0
 80058fe:	673b      	str	r3, [r7, #112]	; 0x70
 8005900:	677a      	str	r2, [r7, #116]	; 0x74
 8005902:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005906:	4642      	mov	r2, r8
 8005908:	464b      	mov	r3, r9
 800590a:	1891      	adds	r1, r2, r2
 800590c:	60b9      	str	r1, [r7, #8]
 800590e:	415b      	adcs	r3, r3
 8005910:	60fb      	str	r3, [r7, #12]
 8005912:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005916:	4641      	mov	r1, r8
 8005918:	1851      	adds	r1, r2, r1
 800591a:	6039      	str	r1, [r7, #0]
 800591c:	4649      	mov	r1, r9
 800591e:	414b      	adcs	r3, r1
 8005920:	607b      	str	r3, [r7, #4]
 8005922:	f04f 0200 	mov.w	r2, #0
 8005926:	f04f 0300 	mov.w	r3, #0
 800592a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800592e:	4659      	mov	r1, fp
 8005930:	00cb      	lsls	r3, r1, #3
 8005932:	4651      	mov	r1, sl
 8005934:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005938:	4651      	mov	r1, sl
 800593a:	00ca      	lsls	r2, r1, #3
 800593c:	4610      	mov	r0, r2
 800593e:	4619      	mov	r1, r3
 8005940:	4603      	mov	r3, r0
 8005942:	4642      	mov	r2, r8
 8005944:	189b      	adds	r3, r3, r2
 8005946:	66bb      	str	r3, [r7, #104]	; 0x68
 8005948:	464b      	mov	r3, r9
 800594a:	460a      	mov	r2, r1
 800594c:	eb42 0303 	adc.w	r3, r2, r3
 8005950:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	663b      	str	r3, [r7, #96]	; 0x60
 800595c:	667a      	str	r2, [r7, #100]	; 0x64
 800595e:	f04f 0200 	mov.w	r2, #0
 8005962:	f04f 0300 	mov.w	r3, #0
 8005966:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800596a:	4649      	mov	r1, r9
 800596c:	008b      	lsls	r3, r1, #2
 800596e:	4641      	mov	r1, r8
 8005970:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005974:	4641      	mov	r1, r8
 8005976:	008a      	lsls	r2, r1, #2
 8005978:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800597c:	f7fb f984 	bl	8000c88 <__aeabi_uldivmod>
 8005980:	4602      	mov	r2, r0
 8005982:	460b      	mov	r3, r1
 8005984:	4b0d      	ldr	r3, [pc, #52]	; (80059bc <UART_SetConfig+0x4e4>)
 8005986:	fba3 1302 	umull	r1, r3, r3, r2
 800598a:	095b      	lsrs	r3, r3, #5
 800598c:	2164      	movs	r1, #100	; 0x64
 800598e:	fb01 f303 	mul.w	r3, r1, r3
 8005992:	1ad3      	subs	r3, r2, r3
 8005994:	011b      	lsls	r3, r3, #4
 8005996:	3332      	adds	r3, #50	; 0x32
 8005998:	4a08      	ldr	r2, [pc, #32]	; (80059bc <UART_SetConfig+0x4e4>)
 800599a:	fba2 2303 	umull	r2, r3, r2, r3
 800599e:	095b      	lsrs	r3, r3, #5
 80059a0:	f003 020f 	and.w	r2, r3, #15
 80059a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4422      	add	r2, r4
 80059ac:	609a      	str	r2, [r3, #8]
}
 80059ae:	bf00      	nop
 80059b0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80059b4:	46bd      	mov	sp, r7
 80059b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059ba:	bf00      	nop
 80059bc:	51eb851f 	.word	0x51eb851f

080059c0 <__errno>:
 80059c0:	4b01      	ldr	r3, [pc, #4]	; (80059c8 <__errno+0x8>)
 80059c2:	6818      	ldr	r0, [r3, #0]
 80059c4:	4770      	bx	lr
 80059c6:	bf00      	nop
 80059c8:	2000000c 	.word	0x2000000c

080059cc <__libc_init_array>:
 80059cc:	b570      	push	{r4, r5, r6, lr}
 80059ce:	4d0d      	ldr	r5, [pc, #52]	; (8005a04 <__libc_init_array+0x38>)
 80059d0:	4c0d      	ldr	r4, [pc, #52]	; (8005a08 <__libc_init_array+0x3c>)
 80059d2:	1b64      	subs	r4, r4, r5
 80059d4:	10a4      	asrs	r4, r4, #2
 80059d6:	2600      	movs	r6, #0
 80059d8:	42a6      	cmp	r6, r4
 80059da:	d109      	bne.n	80059f0 <__libc_init_array+0x24>
 80059dc:	4d0b      	ldr	r5, [pc, #44]	; (8005a0c <__libc_init_array+0x40>)
 80059de:	4c0c      	ldr	r4, [pc, #48]	; (8005a10 <__libc_init_array+0x44>)
 80059e0:	f002 ff28 	bl	8008834 <_init>
 80059e4:	1b64      	subs	r4, r4, r5
 80059e6:	10a4      	asrs	r4, r4, #2
 80059e8:	2600      	movs	r6, #0
 80059ea:	42a6      	cmp	r6, r4
 80059ec:	d105      	bne.n	80059fa <__libc_init_array+0x2e>
 80059ee:	bd70      	pop	{r4, r5, r6, pc}
 80059f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80059f4:	4798      	blx	r3
 80059f6:	3601      	adds	r6, #1
 80059f8:	e7ee      	b.n	80059d8 <__libc_init_array+0xc>
 80059fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80059fe:	4798      	blx	r3
 8005a00:	3601      	adds	r6, #1
 8005a02:	e7f2      	b.n	80059ea <__libc_init_array+0x1e>
 8005a04:	08008c9c 	.word	0x08008c9c
 8005a08:	08008c9c 	.word	0x08008c9c
 8005a0c:	08008c9c 	.word	0x08008c9c
 8005a10:	08008ca0 	.word	0x08008ca0

08005a14 <memcpy>:
 8005a14:	440a      	add	r2, r1
 8005a16:	4291      	cmp	r1, r2
 8005a18:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a1c:	d100      	bne.n	8005a20 <memcpy+0xc>
 8005a1e:	4770      	bx	lr
 8005a20:	b510      	push	{r4, lr}
 8005a22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a2a:	4291      	cmp	r1, r2
 8005a2c:	d1f9      	bne.n	8005a22 <memcpy+0xe>
 8005a2e:	bd10      	pop	{r4, pc}

08005a30 <memset>:
 8005a30:	4402      	add	r2, r0
 8005a32:	4603      	mov	r3, r0
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d100      	bne.n	8005a3a <memset+0xa>
 8005a38:	4770      	bx	lr
 8005a3a:	f803 1b01 	strb.w	r1, [r3], #1
 8005a3e:	e7f9      	b.n	8005a34 <memset+0x4>

08005a40 <__cvt>:
 8005a40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a44:	ec55 4b10 	vmov	r4, r5, d0
 8005a48:	2d00      	cmp	r5, #0
 8005a4a:	460e      	mov	r6, r1
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	462b      	mov	r3, r5
 8005a50:	bfbb      	ittet	lt
 8005a52:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005a56:	461d      	movlt	r5, r3
 8005a58:	2300      	movge	r3, #0
 8005a5a:	232d      	movlt	r3, #45	; 0x2d
 8005a5c:	700b      	strb	r3, [r1, #0]
 8005a5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a60:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005a64:	4691      	mov	r9, r2
 8005a66:	f023 0820 	bic.w	r8, r3, #32
 8005a6a:	bfbc      	itt	lt
 8005a6c:	4622      	movlt	r2, r4
 8005a6e:	4614      	movlt	r4, r2
 8005a70:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005a74:	d005      	beq.n	8005a82 <__cvt+0x42>
 8005a76:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005a7a:	d100      	bne.n	8005a7e <__cvt+0x3e>
 8005a7c:	3601      	adds	r6, #1
 8005a7e:	2102      	movs	r1, #2
 8005a80:	e000      	b.n	8005a84 <__cvt+0x44>
 8005a82:	2103      	movs	r1, #3
 8005a84:	ab03      	add	r3, sp, #12
 8005a86:	9301      	str	r3, [sp, #4]
 8005a88:	ab02      	add	r3, sp, #8
 8005a8a:	9300      	str	r3, [sp, #0]
 8005a8c:	ec45 4b10 	vmov	d0, r4, r5
 8005a90:	4653      	mov	r3, sl
 8005a92:	4632      	mov	r2, r6
 8005a94:	f000 fcec 	bl	8006470 <_dtoa_r>
 8005a98:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005a9c:	4607      	mov	r7, r0
 8005a9e:	d102      	bne.n	8005aa6 <__cvt+0x66>
 8005aa0:	f019 0f01 	tst.w	r9, #1
 8005aa4:	d022      	beq.n	8005aec <__cvt+0xac>
 8005aa6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005aaa:	eb07 0906 	add.w	r9, r7, r6
 8005aae:	d110      	bne.n	8005ad2 <__cvt+0x92>
 8005ab0:	783b      	ldrb	r3, [r7, #0]
 8005ab2:	2b30      	cmp	r3, #48	; 0x30
 8005ab4:	d10a      	bne.n	8005acc <__cvt+0x8c>
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	2300      	movs	r3, #0
 8005aba:	4620      	mov	r0, r4
 8005abc:	4629      	mov	r1, r5
 8005abe:	f7fb f823 	bl	8000b08 <__aeabi_dcmpeq>
 8005ac2:	b918      	cbnz	r0, 8005acc <__cvt+0x8c>
 8005ac4:	f1c6 0601 	rsb	r6, r6, #1
 8005ac8:	f8ca 6000 	str.w	r6, [sl]
 8005acc:	f8da 3000 	ldr.w	r3, [sl]
 8005ad0:	4499      	add	r9, r3
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	4620      	mov	r0, r4
 8005ad8:	4629      	mov	r1, r5
 8005ada:	f7fb f815 	bl	8000b08 <__aeabi_dcmpeq>
 8005ade:	b108      	cbz	r0, 8005ae4 <__cvt+0xa4>
 8005ae0:	f8cd 900c 	str.w	r9, [sp, #12]
 8005ae4:	2230      	movs	r2, #48	; 0x30
 8005ae6:	9b03      	ldr	r3, [sp, #12]
 8005ae8:	454b      	cmp	r3, r9
 8005aea:	d307      	bcc.n	8005afc <__cvt+0xbc>
 8005aec:	9b03      	ldr	r3, [sp, #12]
 8005aee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005af0:	1bdb      	subs	r3, r3, r7
 8005af2:	4638      	mov	r0, r7
 8005af4:	6013      	str	r3, [r2, #0]
 8005af6:	b004      	add	sp, #16
 8005af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005afc:	1c59      	adds	r1, r3, #1
 8005afe:	9103      	str	r1, [sp, #12]
 8005b00:	701a      	strb	r2, [r3, #0]
 8005b02:	e7f0      	b.n	8005ae6 <__cvt+0xa6>

08005b04 <__exponent>:
 8005b04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b06:	4603      	mov	r3, r0
 8005b08:	2900      	cmp	r1, #0
 8005b0a:	bfb8      	it	lt
 8005b0c:	4249      	neglt	r1, r1
 8005b0e:	f803 2b02 	strb.w	r2, [r3], #2
 8005b12:	bfb4      	ite	lt
 8005b14:	222d      	movlt	r2, #45	; 0x2d
 8005b16:	222b      	movge	r2, #43	; 0x2b
 8005b18:	2909      	cmp	r1, #9
 8005b1a:	7042      	strb	r2, [r0, #1]
 8005b1c:	dd2a      	ble.n	8005b74 <__exponent+0x70>
 8005b1e:	f10d 0407 	add.w	r4, sp, #7
 8005b22:	46a4      	mov	ip, r4
 8005b24:	270a      	movs	r7, #10
 8005b26:	46a6      	mov	lr, r4
 8005b28:	460a      	mov	r2, r1
 8005b2a:	fb91 f6f7 	sdiv	r6, r1, r7
 8005b2e:	fb07 1516 	mls	r5, r7, r6, r1
 8005b32:	3530      	adds	r5, #48	; 0x30
 8005b34:	2a63      	cmp	r2, #99	; 0x63
 8005b36:	f104 34ff 	add.w	r4, r4, #4294967295
 8005b3a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005b3e:	4631      	mov	r1, r6
 8005b40:	dcf1      	bgt.n	8005b26 <__exponent+0x22>
 8005b42:	3130      	adds	r1, #48	; 0x30
 8005b44:	f1ae 0502 	sub.w	r5, lr, #2
 8005b48:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005b4c:	1c44      	adds	r4, r0, #1
 8005b4e:	4629      	mov	r1, r5
 8005b50:	4561      	cmp	r1, ip
 8005b52:	d30a      	bcc.n	8005b6a <__exponent+0x66>
 8005b54:	f10d 0209 	add.w	r2, sp, #9
 8005b58:	eba2 020e 	sub.w	r2, r2, lr
 8005b5c:	4565      	cmp	r5, ip
 8005b5e:	bf88      	it	hi
 8005b60:	2200      	movhi	r2, #0
 8005b62:	4413      	add	r3, r2
 8005b64:	1a18      	subs	r0, r3, r0
 8005b66:	b003      	add	sp, #12
 8005b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b6e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005b72:	e7ed      	b.n	8005b50 <__exponent+0x4c>
 8005b74:	2330      	movs	r3, #48	; 0x30
 8005b76:	3130      	adds	r1, #48	; 0x30
 8005b78:	7083      	strb	r3, [r0, #2]
 8005b7a:	70c1      	strb	r1, [r0, #3]
 8005b7c:	1d03      	adds	r3, r0, #4
 8005b7e:	e7f1      	b.n	8005b64 <__exponent+0x60>

08005b80 <_printf_float>:
 8005b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b84:	ed2d 8b02 	vpush	{d8}
 8005b88:	b08d      	sub	sp, #52	; 0x34
 8005b8a:	460c      	mov	r4, r1
 8005b8c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005b90:	4616      	mov	r6, r2
 8005b92:	461f      	mov	r7, r3
 8005b94:	4605      	mov	r5, r0
 8005b96:	f001 fa59 	bl	800704c <_localeconv_r>
 8005b9a:	f8d0 a000 	ldr.w	sl, [r0]
 8005b9e:	4650      	mov	r0, sl
 8005ba0:	f7fa fb36 	bl	8000210 <strlen>
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	930a      	str	r3, [sp, #40]	; 0x28
 8005ba8:	6823      	ldr	r3, [r4, #0]
 8005baa:	9305      	str	r3, [sp, #20]
 8005bac:	f8d8 3000 	ldr.w	r3, [r8]
 8005bb0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005bb4:	3307      	adds	r3, #7
 8005bb6:	f023 0307 	bic.w	r3, r3, #7
 8005bba:	f103 0208 	add.w	r2, r3, #8
 8005bbe:	f8c8 2000 	str.w	r2, [r8]
 8005bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005bca:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005bce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005bd2:	9307      	str	r3, [sp, #28]
 8005bd4:	f8cd 8018 	str.w	r8, [sp, #24]
 8005bd8:	ee08 0a10 	vmov	s16, r0
 8005bdc:	4b9f      	ldr	r3, [pc, #636]	; (8005e5c <_printf_float+0x2dc>)
 8005bde:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005be2:	f04f 32ff 	mov.w	r2, #4294967295
 8005be6:	f7fa ffc1 	bl	8000b6c <__aeabi_dcmpun>
 8005bea:	bb88      	cbnz	r0, 8005c50 <_printf_float+0xd0>
 8005bec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005bf0:	4b9a      	ldr	r3, [pc, #616]	; (8005e5c <_printf_float+0x2dc>)
 8005bf2:	f04f 32ff 	mov.w	r2, #4294967295
 8005bf6:	f7fa ff9b 	bl	8000b30 <__aeabi_dcmple>
 8005bfa:	bb48      	cbnz	r0, 8005c50 <_printf_float+0xd0>
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	2300      	movs	r3, #0
 8005c00:	4640      	mov	r0, r8
 8005c02:	4649      	mov	r1, r9
 8005c04:	f7fa ff8a 	bl	8000b1c <__aeabi_dcmplt>
 8005c08:	b110      	cbz	r0, 8005c10 <_printf_float+0x90>
 8005c0a:	232d      	movs	r3, #45	; 0x2d
 8005c0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c10:	4b93      	ldr	r3, [pc, #588]	; (8005e60 <_printf_float+0x2e0>)
 8005c12:	4894      	ldr	r0, [pc, #592]	; (8005e64 <_printf_float+0x2e4>)
 8005c14:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005c18:	bf94      	ite	ls
 8005c1a:	4698      	movls	r8, r3
 8005c1c:	4680      	movhi	r8, r0
 8005c1e:	2303      	movs	r3, #3
 8005c20:	6123      	str	r3, [r4, #16]
 8005c22:	9b05      	ldr	r3, [sp, #20]
 8005c24:	f023 0204 	bic.w	r2, r3, #4
 8005c28:	6022      	str	r2, [r4, #0]
 8005c2a:	f04f 0900 	mov.w	r9, #0
 8005c2e:	9700      	str	r7, [sp, #0]
 8005c30:	4633      	mov	r3, r6
 8005c32:	aa0b      	add	r2, sp, #44	; 0x2c
 8005c34:	4621      	mov	r1, r4
 8005c36:	4628      	mov	r0, r5
 8005c38:	f000 f9d8 	bl	8005fec <_printf_common>
 8005c3c:	3001      	adds	r0, #1
 8005c3e:	f040 8090 	bne.w	8005d62 <_printf_float+0x1e2>
 8005c42:	f04f 30ff 	mov.w	r0, #4294967295
 8005c46:	b00d      	add	sp, #52	; 0x34
 8005c48:	ecbd 8b02 	vpop	{d8}
 8005c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c50:	4642      	mov	r2, r8
 8005c52:	464b      	mov	r3, r9
 8005c54:	4640      	mov	r0, r8
 8005c56:	4649      	mov	r1, r9
 8005c58:	f7fa ff88 	bl	8000b6c <__aeabi_dcmpun>
 8005c5c:	b140      	cbz	r0, 8005c70 <_printf_float+0xf0>
 8005c5e:	464b      	mov	r3, r9
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	bfbc      	itt	lt
 8005c64:	232d      	movlt	r3, #45	; 0x2d
 8005c66:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005c6a:	487f      	ldr	r0, [pc, #508]	; (8005e68 <_printf_float+0x2e8>)
 8005c6c:	4b7f      	ldr	r3, [pc, #508]	; (8005e6c <_printf_float+0x2ec>)
 8005c6e:	e7d1      	b.n	8005c14 <_printf_float+0x94>
 8005c70:	6863      	ldr	r3, [r4, #4]
 8005c72:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005c76:	9206      	str	r2, [sp, #24]
 8005c78:	1c5a      	adds	r2, r3, #1
 8005c7a:	d13f      	bne.n	8005cfc <_printf_float+0x17c>
 8005c7c:	2306      	movs	r3, #6
 8005c7e:	6063      	str	r3, [r4, #4]
 8005c80:	9b05      	ldr	r3, [sp, #20]
 8005c82:	6861      	ldr	r1, [r4, #4]
 8005c84:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005c88:	2300      	movs	r3, #0
 8005c8a:	9303      	str	r3, [sp, #12]
 8005c8c:	ab0a      	add	r3, sp, #40	; 0x28
 8005c8e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005c92:	ab09      	add	r3, sp, #36	; 0x24
 8005c94:	ec49 8b10 	vmov	d0, r8, r9
 8005c98:	9300      	str	r3, [sp, #0]
 8005c9a:	6022      	str	r2, [r4, #0]
 8005c9c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005ca0:	4628      	mov	r0, r5
 8005ca2:	f7ff fecd 	bl	8005a40 <__cvt>
 8005ca6:	9b06      	ldr	r3, [sp, #24]
 8005ca8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005caa:	2b47      	cmp	r3, #71	; 0x47
 8005cac:	4680      	mov	r8, r0
 8005cae:	d108      	bne.n	8005cc2 <_printf_float+0x142>
 8005cb0:	1cc8      	adds	r0, r1, #3
 8005cb2:	db02      	blt.n	8005cba <_printf_float+0x13a>
 8005cb4:	6863      	ldr	r3, [r4, #4]
 8005cb6:	4299      	cmp	r1, r3
 8005cb8:	dd41      	ble.n	8005d3e <_printf_float+0x1be>
 8005cba:	f1ab 0b02 	sub.w	fp, fp, #2
 8005cbe:	fa5f fb8b 	uxtb.w	fp, fp
 8005cc2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005cc6:	d820      	bhi.n	8005d0a <_printf_float+0x18a>
 8005cc8:	3901      	subs	r1, #1
 8005cca:	465a      	mov	r2, fp
 8005ccc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005cd0:	9109      	str	r1, [sp, #36]	; 0x24
 8005cd2:	f7ff ff17 	bl	8005b04 <__exponent>
 8005cd6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005cd8:	1813      	adds	r3, r2, r0
 8005cda:	2a01      	cmp	r2, #1
 8005cdc:	4681      	mov	r9, r0
 8005cde:	6123      	str	r3, [r4, #16]
 8005ce0:	dc02      	bgt.n	8005ce8 <_printf_float+0x168>
 8005ce2:	6822      	ldr	r2, [r4, #0]
 8005ce4:	07d2      	lsls	r2, r2, #31
 8005ce6:	d501      	bpl.n	8005cec <_printf_float+0x16c>
 8005ce8:	3301      	adds	r3, #1
 8005cea:	6123      	str	r3, [r4, #16]
 8005cec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d09c      	beq.n	8005c2e <_printf_float+0xae>
 8005cf4:	232d      	movs	r3, #45	; 0x2d
 8005cf6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cfa:	e798      	b.n	8005c2e <_printf_float+0xae>
 8005cfc:	9a06      	ldr	r2, [sp, #24]
 8005cfe:	2a47      	cmp	r2, #71	; 0x47
 8005d00:	d1be      	bne.n	8005c80 <_printf_float+0x100>
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d1bc      	bne.n	8005c80 <_printf_float+0x100>
 8005d06:	2301      	movs	r3, #1
 8005d08:	e7b9      	b.n	8005c7e <_printf_float+0xfe>
 8005d0a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005d0e:	d118      	bne.n	8005d42 <_printf_float+0x1c2>
 8005d10:	2900      	cmp	r1, #0
 8005d12:	6863      	ldr	r3, [r4, #4]
 8005d14:	dd0b      	ble.n	8005d2e <_printf_float+0x1ae>
 8005d16:	6121      	str	r1, [r4, #16]
 8005d18:	b913      	cbnz	r3, 8005d20 <_printf_float+0x1a0>
 8005d1a:	6822      	ldr	r2, [r4, #0]
 8005d1c:	07d0      	lsls	r0, r2, #31
 8005d1e:	d502      	bpl.n	8005d26 <_printf_float+0x1a6>
 8005d20:	3301      	adds	r3, #1
 8005d22:	440b      	add	r3, r1
 8005d24:	6123      	str	r3, [r4, #16]
 8005d26:	65a1      	str	r1, [r4, #88]	; 0x58
 8005d28:	f04f 0900 	mov.w	r9, #0
 8005d2c:	e7de      	b.n	8005cec <_printf_float+0x16c>
 8005d2e:	b913      	cbnz	r3, 8005d36 <_printf_float+0x1b6>
 8005d30:	6822      	ldr	r2, [r4, #0]
 8005d32:	07d2      	lsls	r2, r2, #31
 8005d34:	d501      	bpl.n	8005d3a <_printf_float+0x1ba>
 8005d36:	3302      	adds	r3, #2
 8005d38:	e7f4      	b.n	8005d24 <_printf_float+0x1a4>
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e7f2      	b.n	8005d24 <_printf_float+0x1a4>
 8005d3e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005d42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d44:	4299      	cmp	r1, r3
 8005d46:	db05      	blt.n	8005d54 <_printf_float+0x1d4>
 8005d48:	6823      	ldr	r3, [r4, #0]
 8005d4a:	6121      	str	r1, [r4, #16]
 8005d4c:	07d8      	lsls	r0, r3, #31
 8005d4e:	d5ea      	bpl.n	8005d26 <_printf_float+0x1a6>
 8005d50:	1c4b      	adds	r3, r1, #1
 8005d52:	e7e7      	b.n	8005d24 <_printf_float+0x1a4>
 8005d54:	2900      	cmp	r1, #0
 8005d56:	bfd4      	ite	le
 8005d58:	f1c1 0202 	rsble	r2, r1, #2
 8005d5c:	2201      	movgt	r2, #1
 8005d5e:	4413      	add	r3, r2
 8005d60:	e7e0      	b.n	8005d24 <_printf_float+0x1a4>
 8005d62:	6823      	ldr	r3, [r4, #0]
 8005d64:	055a      	lsls	r2, r3, #21
 8005d66:	d407      	bmi.n	8005d78 <_printf_float+0x1f8>
 8005d68:	6923      	ldr	r3, [r4, #16]
 8005d6a:	4642      	mov	r2, r8
 8005d6c:	4631      	mov	r1, r6
 8005d6e:	4628      	mov	r0, r5
 8005d70:	47b8      	blx	r7
 8005d72:	3001      	adds	r0, #1
 8005d74:	d12c      	bne.n	8005dd0 <_printf_float+0x250>
 8005d76:	e764      	b.n	8005c42 <_printf_float+0xc2>
 8005d78:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005d7c:	f240 80e0 	bls.w	8005f40 <_printf_float+0x3c0>
 8005d80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005d84:	2200      	movs	r2, #0
 8005d86:	2300      	movs	r3, #0
 8005d88:	f7fa febe 	bl	8000b08 <__aeabi_dcmpeq>
 8005d8c:	2800      	cmp	r0, #0
 8005d8e:	d034      	beq.n	8005dfa <_printf_float+0x27a>
 8005d90:	4a37      	ldr	r2, [pc, #220]	; (8005e70 <_printf_float+0x2f0>)
 8005d92:	2301      	movs	r3, #1
 8005d94:	4631      	mov	r1, r6
 8005d96:	4628      	mov	r0, r5
 8005d98:	47b8      	blx	r7
 8005d9a:	3001      	adds	r0, #1
 8005d9c:	f43f af51 	beq.w	8005c42 <_printf_float+0xc2>
 8005da0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005da4:	429a      	cmp	r2, r3
 8005da6:	db02      	blt.n	8005dae <_printf_float+0x22e>
 8005da8:	6823      	ldr	r3, [r4, #0]
 8005daa:	07d8      	lsls	r0, r3, #31
 8005dac:	d510      	bpl.n	8005dd0 <_printf_float+0x250>
 8005dae:	ee18 3a10 	vmov	r3, s16
 8005db2:	4652      	mov	r2, sl
 8005db4:	4631      	mov	r1, r6
 8005db6:	4628      	mov	r0, r5
 8005db8:	47b8      	blx	r7
 8005dba:	3001      	adds	r0, #1
 8005dbc:	f43f af41 	beq.w	8005c42 <_printf_float+0xc2>
 8005dc0:	f04f 0800 	mov.w	r8, #0
 8005dc4:	f104 091a 	add.w	r9, r4, #26
 8005dc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dca:	3b01      	subs	r3, #1
 8005dcc:	4543      	cmp	r3, r8
 8005dce:	dc09      	bgt.n	8005de4 <_printf_float+0x264>
 8005dd0:	6823      	ldr	r3, [r4, #0]
 8005dd2:	079b      	lsls	r3, r3, #30
 8005dd4:	f100 8105 	bmi.w	8005fe2 <_printf_float+0x462>
 8005dd8:	68e0      	ldr	r0, [r4, #12]
 8005dda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ddc:	4298      	cmp	r0, r3
 8005dde:	bfb8      	it	lt
 8005de0:	4618      	movlt	r0, r3
 8005de2:	e730      	b.n	8005c46 <_printf_float+0xc6>
 8005de4:	2301      	movs	r3, #1
 8005de6:	464a      	mov	r2, r9
 8005de8:	4631      	mov	r1, r6
 8005dea:	4628      	mov	r0, r5
 8005dec:	47b8      	blx	r7
 8005dee:	3001      	adds	r0, #1
 8005df0:	f43f af27 	beq.w	8005c42 <_printf_float+0xc2>
 8005df4:	f108 0801 	add.w	r8, r8, #1
 8005df8:	e7e6      	b.n	8005dc8 <_printf_float+0x248>
 8005dfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	dc39      	bgt.n	8005e74 <_printf_float+0x2f4>
 8005e00:	4a1b      	ldr	r2, [pc, #108]	; (8005e70 <_printf_float+0x2f0>)
 8005e02:	2301      	movs	r3, #1
 8005e04:	4631      	mov	r1, r6
 8005e06:	4628      	mov	r0, r5
 8005e08:	47b8      	blx	r7
 8005e0a:	3001      	adds	r0, #1
 8005e0c:	f43f af19 	beq.w	8005c42 <_printf_float+0xc2>
 8005e10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e14:	4313      	orrs	r3, r2
 8005e16:	d102      	bne.n	8005e1e <_printf_float+0x29e>
 8005e18:	6823      	ldr	r3, [r4, #0]
 8005e1a:	07d9      	lsls	r1, r3, #31
 8005e1c:	d5d8      	bpl.n	8005dd0 <_printf_float+0x250>
 8005e1e:	ee18 3a10 	vmov	r3, s16
 8005e22:	4652      	mov	r2, sl
 8005e24:	4631      	mov	r1, r6
 8005e26:	4628      	mov	r0, r5
 8005e28:	47b8      	blx	r7
 8005e2a:	3001      	adds	r0, #1
 8005e2c:	f43f af09 	beq.w	8005c42 <_printf_float+0xc2>
 8005e30:	f04f 0900 	mov.w	r9, #0
 8005e34:	f104 0a1a 	add.w	sl, r4, #26
 8005e38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e3a:	425b      	negs	r3, r3
 8005e3c:	454b      	cmp	r3, r9
 8005e3e:	dc01      	bgt.n	8005e44 <_printf_float+0x2c4>
 8005e40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e42:	e792      	b.n	8005d6a <_printf_float+0x1ea>
 8005e44:	2301      	movs	r3, #1
 8005e46:	4652      	mov	r2, sl
 8005e48:	4631      	mov	r1, r6
 8005e4a:	4628      	mov	r0, r5
 8005e4c:	47b8      	blx	r7
 8005e4e:	3001      	adds	r0, #1
 8005e50:	f43f aef7 	beq.w	8005c42 <_printf_float+0xc2>
 8005e54:	f109 0901 	add.w	r9, r9, #1
 8005e58:	e7ee      	b.n	8005e38 <_printf_float+0x2b8>
 8005e5a:	bf00      	nop
 8005e5c:	7fefffff 	.word	0x7fefffff
 8005e60:	080088bc 	.word	0x080088bc
 8005e64:	080088c0 	.word	0x080088c0
 8005e68:	080088c8 	.word	0x080088c8
 8005e6c:	080088c4 	.word	0x080088c4
 8005e70:	080088cc 	.word	0x080088cc
 8005e74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	bfa8      	it	ge
 8005e7c:	461a      	movge	r2, r3
 8005e7e:	2a00      	cmp	r2, #0
 8005e80:	4691      	mov	r9, r2
 8005e82:	dc37      	bgt.n	8005ef4 <_printf_float+0x374>
 8005e84:	f04f 0b00 	mov.w	fp, #0
 8005e88:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e8c:	f104 021a 	add.w	r2, r4, #26
 8005e90:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005e92:	9305      	str	r3, [sp, #20]
 8005e94:	eba3 0309 	sub.w	r3, r3, r9
 8005e98:	455b      	cmp	r3, fp
 8005e9a:	dc33      	bgt.n	8005f04 <_printf_float+0x384>
 8005e9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	db3b      	blt.n	8005f1c <_printf_float+0x39c>
 8005ea4:	6823      	ldr	r3, [r4, #0]
 8005ea6:	07da      	lsls	r2, r3, #31
 8005ea8:	d438      	bmi.n	8005f1c <_printf_float+0x39c>
 8005eaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005eac:	9a05      	ldr	r2, [sp, #20]
 8005eae:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005eb0:	1a9a      	subs	r2, r3, r2
 8005eb2:	eba3 0901 	sub.w	r9, r3, r1
 8005eb6:	4591      	cmp	r9, r2
 8005eb8:	bfa8      	it	ge
 8005eba:	4691      	movge	r9, r2
 8005ebc:	f1b9 0f00 	cmp.w	r9, #0
 8005ec0:	dc35      	bgt.n	8005f2e <_printf_float+0x3ae>
 8005ec2:	f04f 0800 	mov.w	r8, #0
 8005ec6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005eca:	f104 0a1a 	add.w	sl, r4, #26
 8005ece:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ed2:	1a9b      	subs	r3, r3, r2
 8005ed4:	eba3 0309 	sub.w	r3, r3, r9
 8005ed8:	4543      	cmp	r3, r8
 8005eda:	f77f af79 	ble.w	8005dd0 <_printf_float+0x250>
 8005ede:	2301      	movs	r3, #1
 8005ee0:	4652      	mov	r2, sl
 8005ee2:	4631      	mov	r1, r6
 8005ee4:	4628      	mov	r0, r5
 8005ee6:	47b8      	blx	r7
 8005ee8:	3001      	adds	r0, #1
 8005eea:	f43f aeaa 	beq.w	8005c42 <_printf_float+0xc2>
 8005eee:	f108 0801 	add.w	r8, r8, #1
 8005ef2:	e7ec      	b.n	8005ece <_printf_float+0x34e>
 8005ef4:	4613      	mov	r3, r2
 8005ef6:	4631      	mov	r1, r6
 8005ef8:	4642      	mov	r2, r8
 8005efa:	4628      	mov	r0, r5
 8005efc:	47b8      	blx	r7
 8005efe:	3001      	adds	r0, #1
 8005f00:	d1c0      	bne.n	8005e84 <_printf_float+0x304>
 8005f02:	e69e      	b.n	8005c42 <_printf_float+0xc2>
 8005f04:	2301      	movs	r3, #1
 8005f06:	4631      	mov	r1, r6
 8005f08:	4628      	mov	r0, r5
 8005f0a:	9205      	str	r2, [sp, #20]
 8005f0c:	47b8      	blx	r7
 8005f0e:	3001      	adds	r0, #1
 8005f10:	f43f ae97 	beq.w	8005c42 <_printf_float+0xc2>
 8005f14:	9a05      	ldr	r2, [sp, #20]
 8005f16:	f10b 0b01 	add.w	fp, fp, #1
 8005f1a:	e7b9      	b.n	8005e90 <_printf_float+0x310>
 8005f1c:	ee18 3a10 	vmov	r3, s16
 8005f20:	4652      	mov	r2, sl
 8005f22:	4631      	mov	r1, r6
 8005f24:	4628      	mov	r0, r5
 8005f26:	47b8      	blx	r7
 8005f28:	3001      	adds	r0, #1
 8005f2a:	d1be      	bne.n	8005eaa <_printf_float+0x32a>
 8005f2c:	e689      	b.n	8005c42 <_printf_float+0xc2>
 8005f2e:	9a05      	ldr	r2, [sp, #20]
 8005f30:	464b      	mov	r3, r9
 8005f32:	4442      	add	r2, r8
 8005f34:	4631      	mov	r1, r6
 8005f36:	4628      	mov	r0, r5
 8005f38:	47b8      	blx	r7
 8005f3a:	3001      	adds	r0, #1
 8005f3c:	d1c1      	bne.n	8005ec2 <_printf_float+0x342>
 8005f3e:	e680      	b.n	8005c42 <_printf_float+0xc2>
 8005f40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f42:	2a01      	cmp	r2, #1
 8005f44:	dc01      	bgt.n	8005f4a <_printf_float+0x3ca>
 8005f46:	07db      	lsls	r3, r3, #31
 8005f48:	d538      	bpl.n	8005fbc <_printf_float+0x43c>
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	4642      	mov	r2, r8
 8005f4e:	4631      	mov	r1, r6
 8005f50:	4628      	mov	r0, r5
 8005f52:	47b8      	blx	r7
 8005f54:	3001      	adds	r0, #1
 8005f56:	f43f ae74 	beq.w	8005c42 <_printf_float+0xc2>
 8005f5a:	ee18 3a10 	vmov	r3, s16
 8005f5e:	4652      	mov	r2, sl
 8005f60:	4631      	mov	r1, r6
 8005f62:	4628      	mov	r0, r5
 8005f64:	47b8      	blx	r7
 8005f66:	3001      	adds	r0, #1
 8005f68:	f43f ae6b 	beq.w	8005c42 <_printf_float+0xc2>
 8005f6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005f70:	2200      	movs	r2, #0
 8005f72:	2300      	movs	r3, #0
 8005f74:	f7fa fdc8 	bl	8000b08 <__aeabi_dcmpeq>
 8005f78:	b9d8      	cbnz	r0, 8005fb2 <_printf_float+0x432>
 8005f7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f7c:	f108 0201 	add.w	r2, r8, #1
 8005f80:	3b01      	subs	r3, #1
 8005f82:	4631      	mov	r1, r6
 8005f84:	4628      	mov	r0, r5
 8005f86:	47b8      	blx	r7
 8005f88:	3001      	adds	r0, #1
 8005f8a:	d10e      	bne.n	8005faa <_printf_float+0x42a>
 8005f8c:	e659      	b.n	8005c42 <_printf_float+0xc2>
 8005f8e:	2301      	movs	r3, #1
 8005f90:	4652      	mov	r2, sl
 8005f92:	4631      	mov	r1, r6
 8005f94:	4628      	mov	r0, r5
 8005f96:	47b8      	blx	r7
 8005f98:	3001      	adds	r0, #1
 8005f9a:	f43f ae52 	beq.w	8005c42 <_printf_float+0xc2>
 8005f9e:	f108 0801 	add.w	r8, r8, #1
 8005fa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fa4:	3b01      	subs	r3, #1
 8005fa6:	4543      	cmp	r3, r8
 8005fa8:	dcf1      	bgt.n	8005f8e <_printf_float+0x40e>
 8005faa:	464b      	mov	r3, r9
 8005fac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005fb0:	e6dc      	b.n	8005d6c <_printf_float+0x1ec>
 8005fb2:	f04f 0800 	mov.w	r8, #0
 8005fb6:	f104 0a1a 	add.w	sl, r4, #26
 8005fba:	e7f2      	b.n	8005fa2 <_printf_float+0x422>
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	4642      	mov	r2, r8
 8005fc0:	e7df      	b.n	8005f82 <_printf_float+0x402>
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	464a      	mov	r2, r9
 8005fc6:	4631      	mov	r1, r6
 8005fc8:	4628      	mov	r0, r5
 8005fca:	47b8      	blx	r7
 8005fcc:	3001      	adds	r0, #1
 8005fce:	f43f ae38 	beq.w	8005c42 <_printf_float+0xc2>
 8005fd2:	f108 0801 	add.w	r8, r8, #1
 8005fd6:	68e3      	ldr	r3, [r4, #12]
 8005fd8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005fda:	1a5b      	subs	r3, r3, r1
 8005fdc:	4543      	cmp	r3, r8
 8005fde:	dcf0      	bgt.n	8005fc2 <_printf_float+0x442>
 8005fe0:	e6fa      	b.n	8005dd8 <_printf_float+0x258>
 8005fe2:	f04f 0800 	mov.w	r8, #0
 8005fe6:	f104 0919 	add.w	r9, r4, #25
 8005fea:	e7f4      	b.n	8005fd6 <_printf_float+0x456>

08005fec <_printf_common>:
 8005fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ff0:	4616      	mov	r6, r2
 8005ff2:	4699      	mov	r9, r3
 8005ff4:	688a      	ldr	r2, [r1, #8]
 8005ff6:	690b      	ldr	r3, [r1, #16]
 8005ff8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	bfb8      	it	lt
 8006000:	4613      	movlt	r3, r2
 8006002:	6033      	str	r3, [r6, #0]
 8006004:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006008:	4607      	mov	r7, r0
 800600a:	460c      	mov	r4, r1
 800600c:	b10a      	cbz	r2, 8006012 <_printf_common+0x26>
 800600e:	3301      	adds	r3, #1
 8006010:	6033      	str	r3, [r6, #0]
 8006012:	6823      	ldr	r3, [r4, #0]
 8006014:	0699      	lsls	r1, r3, #26
 8006016:	bf42      	ittt	mi
 8006018:	6833      	ldrmi	r3, [r6, #0]
 800601a:	3302      	addmi	r3, #2
 800601c:	6033      	strmi	r3, [r6, #0]
 800601e:	6825      	ldr	r5, [r4, #0]
 8006020:	f015 0506 	ands.w	r5, r5, #6
 8006024:	d106      	bne.n	8006034 <_printf_common+0x48>
 8006026:	f104 0a19 	add.w	sl, r4, #25
 800602a:	68e3      	ldr	r3, [r4, #12]
 800602c:	6832      	ldr	r2, [r6, #0]
 800602e:	1a9b      	subs	r3, r3, r2
 8006030:	42ab      	cmp	r3, r5
 8006032:	dc26      	bgt.n	8006082 <_printf_common+0x96>
 8006034:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006038:	1e13      	subs	r3, r2, #0
 800603a:	6822      	ldr	r2, [r4, #0]
 800603c:	bf18      	it	ne
 800603e:	2301      	movne	r3, #1
 8006040:	0692      	lsls	r2, r2, #26
 8006042:	d42b      	bmi.n	800609c <_printf_common+0xb0>
 8006044:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006048:	4649      	mov	r1, r9
 800604a:	4638      	mov	r0, r7
 800604c:	47c0      	blx	r8
 800604e:	3001      	adds	r0, #1
 8006050:	d01e      	beq.n	8006090 <_printf_common+0xa4>
 8006052:	6823      	ldr	r3, [r4, #0]
 8006054:	68e5      	ldr	r5, [r4, #12]
 8006056:	6832      	ldr	r2, [r6, #0]
 8006058:	f003 0306 	and.w	r3, r3, #6
 800605c:	2b04      	cmp	r3, #4
 800605e:	bf08      	it	eq
 8006060:	1aad      	subeq	r5, r5, r2
 8006062:	68a3      	ldr	r3, [r4, #8]
 8006064:	6922      	ldr	r2, [r4, #16]
 8006066:	bf0c      	ite	eq
 8006068:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800606c:	2500      	movne	r5, #0
 800606e:	4293      	cmp	r3, r2
 8006070:	bfc4      	itt	gt
 8006072:	1a9b      	subgt	r3, r3, r2
 8006074:	18ed      	addgt	r5, r5, r3
 8006076:	2600      	movs	r6, #0
 8006078:	341a      	adds	r4, #26
 800607a:	42b5      	cmp	r5, r6
 800607c:	d11a      	bne.n	80060b4 <_printf_common+0xc8>
 800607e:	2000      	movs	r0, #0
 8006080:	e008      	b.n	8006094 <_printf_common+0xa8>
 8006082:	2301      	movs	r3, #1
 8006084:	4652      	mov	r2, sl
 8006086:	4649      	mov	r1, r9
 8006088:	4638      	mov	r0, r7
 800608a:	47c0      	blx	r8
 800608c:	3001      	adds	r0, #1
 800608e:	d103      	bne.n	8006098 <_printf_common+0xac>
 8006090:	f04f 30ff 	mov.w	r0, #4294967295
 8006094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006098:	3501      	adds	r5, #1
 800609a:	e7c6      	b.n	800602a <_printf_common+0x3e>
 800609c:	18e1      	adds	r1, r4, r3
 800609e:	1c5a      	adds	r2, r3, #1
 80060a0:	2030      	movs	r0, #48	; 0x30
 80060a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80060a6:	4422      	add	r2, r4
 80060a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80060ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80060b0:	3302      	adds	r3, #2
 80060b2:	e7c7      	b.n	8006044 <_printf_common+0x58>
 80060b4:	2301      	movs	r3, #1
 80060b6:	4622      	mov	r2, r4
 80060b8:	4649      	mov	r1, r9
 80060ba:	4638      	mov	r0, r7
 80060bc:	47c0      	blx	r8
 80060be:	3001      	adds	r0, #1
 80060c0:	d0e6      	beq.n	8006090 <_printf_common+0xa4>
 80060c2:	3601      	adds	r6, #1
 80060c4:	e7d9      	b.n	800607a <_printf_common+0x8e>
	...

080060c8 <_printf_i>:
 80060c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060cc:	7e0f      	ldrb	r7, [r1, #24]
 80060ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80060d0:	2f78      	cmp	r7, #120	; 0x78
 80060d2:	4691      	mov	r9, r2
 80060d4:	4680      	mov	r8, r0
 80060d6:	460c      	mov	r4, r1
 80060d8:	469a      	mov	sl, r3
 80060da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80060de:	d807      	bhi.n	80060f0 <_printf_i+0x28>
 80060e0:	2f62      	cmp	r7, #98	; 0x62
 80060e2:	d80a      	bhi.n	80060fa <_printf_i+0x32>
 80060e4:	2f00      	cmp	r7, #0
 80060e6:	f000 80d8 	beq.w	800629a <_printf_i+0x1d2>
 80060ea:	2f58      	cmp	r7, #88	; 0x58
 80060ec:	f000 80a3 	beq.w	8006236 <_printf_i+0x16e>
 80060f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80060f8:	e03a      	b.n	8006170 <_printf_i+0xa8>
 80060fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80060fe:	2b15      	cmp	r3, #21
 8006100:	d8f6      	bhi.n	80060f0 <_printf_i+0x28>
 8006102:	a101      	add	r1, pc, #4	; (adr r1, 8006108 <_printf_i+0x40>)
 8006104:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006108:	08006161 	.word	0x08006161
 800610c:	08006175 	.word	0x08006175
 8006110:	080060f1 	.word	0x080060f1
 8006114:	080060f1 	.word	0x080060f1
 8006118:	080060f1 	.word	0x080060f1
 800611c:	080060f1 	.word	0x080060f1
 8006120:	08006175 	.word	0x08006175
 8006124:	080060f1 	.word	0x080060f1
 8006128:	080060f1 	.word	0x080060f1
 800612c:	080060f1 	.word	0x080060f1
 8006130:	080060f1 	.word	0x080060f1
 8006134:	08006281 	.word	0x08006281
 8006138:	080061a5 	.word	0x080061a5
 800613c:	08006263 	.word	0x08006263
 8006140:	080060f1 	.word	0x080060f1
 8006144:	080060f1 	.word	0x080060f1
 8006148:	080062a3 	.word	0x080062a3
 800614c:	080060f1 	.word	0x080060f1
 8006150:	080061a5 	.word	0x080061a5
 8006154:	080060f1 	.word	0x080060f1
 8006158:	080060f1 	.word	0x080060f1
 800615c:	0800626b 	.word	0x0800626b
 8006160:	682b      	ldr	r3, [r5, #0]
 8006162:	1d1a      	adds	r2, r3, #4
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	602a      	str	r2, [r5, #0]
 8006168:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800616c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006170:	2301      	movs	r3, #1
 8006172:	e0a3      	b.n	80062bc <_printf_i+0x1f4>
 8006174:	6820      	ldr	r0, [r4, #0]
 8006176:	6829      	ldr	r1, [r5, #0]
 8006178:	0606      	lsls	r6, r0, #24
 800617a:	f101 0304 	add.w	r3, r1, #4
 800617e:	d50a      	bpl.n	8006196 <_printf_i+0xce>
 8006180:	680e      	ldr	r6, [r1, #0]
 8006182:	602b      	str	r3, [r5, #0]
 8006184:	2e00      	cmp	r6, #0
 8006186:	da03      	bge.n	8006190 <_printf_i+0xc8>
 8006188:	232d      	movs	r3, #45	; 0x2d
 800618a:	4276      	negs	r6, r6
 800618c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006190:	485e      	ldr	r0, [pc, #376]	; (800630c <_printf_i+0x244>)
 8006192:	230a      	movs	r3, #10
 8006194:	e019      	b.n	80061ca <_printf_i+0x102>
 8006196:	680e      	ldr	r6, [r1, #0]
 8006198:	602b      	str	r3, [r5, #0]
 800619a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800619e:	bf18      	it	ne
 80061a0:	b236      	sxthne	r6, r6
 80061a2:	e7ef      	b.n	8006184 <_printf_i+0xbc>
 80061a4:	682b      	ldr	r3, [r5, #0]
 80061a6:	6820      	ldr	r0, [r4, #0]
 80061a8:	1d19      	adds	r1, r3, #4
 80061aa:	6029      	str	r1, [r5, #0]
 80061ac:	0601      	lsls	r1, r0, #24
 80061ae:	d501      	bpl.n	80061b4 <_printf_i+0xec>
 80061b0:	681e      	ldr	r6, [r3, #0]
 80061b2:	e002      	b.n	80061ba <_printf_i+0xf2>
 80061b4:	0646      	lsls	r6, r0, #25
 80061b6:	d5fb      	bpl.n	80061b0 <_printf_i+0xe8>
 80061b8:	881e      	ldrh	r6, [r3, #0]
 80061ba:	4854      	ldr	r0, [pc, #336]	; (800630c <_printf_i+0x244>)
 80061bc:	2f6f      	cmp	r7, #111	; 0x6f
 80061be:	bf0c      	ite	eq
 80061c0:	2308      	moveq	r3, #8
 80061c2:	230a      	movne	r3, #10
 80061c4:	2100      	movs	r1, #0
 80061c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80061ca:	6865      	ldr	r5, [r4, #4]
 80061cc:	60a5      	str	r5, [r4, #8]
 80061ce:	2d00      	cmp	r5, #0
 80061d0:	bfa2      	ittt	ge
 80061d2:	6821      	ldrge	r1, [r4, #0]
 80061d4:	f021 0104 	bicge.w	r1, r1, #4
 80061d8:	6021      	strge	r1, [r4, #0]
 80061da:	b90e      	cbnz	r6, 80061e0 <_printf_i+0x118>
 80061dc:	2d00      	cmp	r5, #0
 80061de:	d04d      	beq.n	800627c <_printf_i+0x1b4>
 80061e0:	4615      	mov	r5, r2
 80061e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80061e6:	fb03 6711 	mls	r7, r3, r1, r6
 80061ea:	5dc7      	ldrb	r7, [r0, r7]
 80061ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80061f0:	4637      	mov	r7, r6
 80061f2:	42bb      	cmp	r3, r7
 80061f4:	460e      	mov	r6, r1
 80061f6:	d9f4      	bls.n	80061e2 <_printf_i+0x11a>
 80061f8:	2b08      	cmp	r3, #8
 80061fa:	d10b      	bne.n	8006214 <_printf_i+0x14c>
 80061fc:	6823      	ldr	r3, [r4, #0]
 80061fe:	07de      	lsls	r6, r3, #31
 8006200:	d508      	bpl.n	8006214 <_printf_i+0x14c>
 8006202:	6923      	ldr	r3, [r4, #16]
 8006204:	6861      	ldr	r1, [r4, #4]
 8006206:	4299      	cmp	r1, r3
 8006208:	bfde      	ittt	le
 800620a:	2330      	movle	r3, #48	; 0x30
 800620c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006210:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006214:	1b52      	subs	r2, r2, r5
 8006216:	6122      	str	r2, [r4, #16]
 8006218:	f8cd a000 	str.w	sl, [sp]
 800621c:	464b      	mov	r3, r9
 800621e:	aa03      	add	r2, sp, #12
 8006220:	4621      	mov	r1, r4
 8006222:	4640      	mov	r0, r8
 8006224:	f7ff fee2 	bl	8005fec <_printf_common>
 8006228:	3001      	adds	r0, #1
 800622a:	d14c      	bne.n	80062c6 <_printf_i+0x1fe>
 800622c:	f04f 30ff 	mov.w	r0, #4294967295
 8006230:	b004      	add	sp, #16
 8006232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006236:	4835      	ldr	r0, [pc, #212]	; (800630c <_printf_i+0x244>)
 8006238:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800623c:	6829      	ldr	r1, [r5, #0]
 800623e:	6823      	ldr	r3, [r4, #0]
 8006240:	f851 6b04 	ldr.w	r6, [r1], #4
 8006244:	6029      	str	r1, [r5, #0]
 8006246:	061d      	lsls	r5, r3, #24
 8006248:	d514      	bpl.n	8006274 <_printf_i+0x1ac>
 800624a:	07df      	lsls	r7, r3, #31
 800624c:	bf44      	itt	mi
 800624e:	f043 0320 	orrmi.w	r3, r3, #32
 8006252:	6023      	strmi	r3, [r4, #0]
 8006254:	b91e      	cbnz	r6, 800625e <_printf_i+0x196>
 8006256:	6823      	ldr	r3, [r4, #0]
 8006258:	f023 0320 	bic.w	r3, r3, #32
 800625c:	6023      	str	r3, [r4, #0]
 800625e:	2310      	movs	r3, #16
 8006260:	e7b0      	b.n	80061c4 <_printf_i+0xfc>
 8006262:	6823      	ldr	r3, [r4, #0]
 8006264:	f043 0320 	orr.w	r3, r3, #32
 8006268:	6023      	str	r3, [r4, #0]
 800626a:	2378      	movs	r3, #120	; 0x78
 800626c:	4828      	ldr	r0, [pc, #160]	; (8006310 <_printf_i+0x248>)
 800626e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006272:	e7e3      	b.n	800623c <_printf_i+0x174>
 8006274:	0659      	lsls	r1, r3, #25
 8006276:	bf48      	it	mi
 8006278:	b2b6      	uxthmi	r6, r6
 800627a:	e7e6      	b.n	800624a <_printf_i+0x182>
 800627c:	4615      	mov	r5, r2
 800627e:	e7bb      	b.n	80061f8 <_printf_i+0x130>
 8006280:	682b      	ldr	r3, [r5, #0]
 8006282:	6826      	ldr	r6, [r4, #0]
 8006284:	6961      	ldr	r1, [r4, #20]
 8006286:	1d18      	adds	r0, r3, #4
 8006288:	6028      	str	r0, [r5, #0]
 800628a:	0635      	lsls	r5, r6, #24
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	d501      	bpl.n	8006294 <_printf_i+0x1cc>
 8006290:	6019      	str	r1, [r3, #0]
 8006292:	e002      	b.n	800629a <_printf_i+0x1d2>
 8006294:	0670      	lsls	r0, r6, #25
 8006296:	d5fb      	bpl.n	8006290 <_printf_i+0x1c8>
 8006298:	8019      	strh	r1, [r3, #0]
 800629a:	2300      	movs	r3, #0
 800629c:	6123      	str	r3, [r4, #16]
 800629e:	4615      	mov	r5, r2
 80062a0:	e7ba      	b.n	8006218 <_printf_i+0x150>
 80062a2:	682b      	ldr	r3, [r5, #0]
 80062a4:	1d1a      	adds	r2, r3, #4
 80062a6:	602a      	str	r2, [r5, #0]
 80062a8:	681d      	ldr	r5, [r3, #0]
 80062aa:	6862      	ldr	r2, [r4, #4]
 80062ac:	2100      	movs	r1, #0
 80062ae:	4628      	mov	r0, r5
 80062b0:	f7f9 ffb6 	bl	8000220 <memchr>
 80062b4:	b108      	cbz	r0, 80062ba <_printf_i+0x1f2>
 80062b6:	1b40      	subs	r0, r0, r5
 80062b8:	6060      	str	r0, [r4, #4]
 80062ba:	6863      	ldr	r3, [r4, #4]
 80062bc:	6123      	str	r3, [r4, #16]
 80062be:	2300      	movs	r3, #0
 80062c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062c4:	e7a8      	b.n	8006218 <_printf_i+0x150>
 80062c6:	6923      	ldr	r3, [r4, #16]
 80062c8:	462a      	mov	r2, r5
 80062ca:	4649      	mov	r1, r9
 80062cc:	4640      	mov	r0, r8
 80062ce:	47d0      	blx	sl
 80062d0:	3001      	adds	r0, #1
 80062d2:	d0ab      	beq.n	800622c <_printf_i+0x164>
 80062d4:	6823      	ldr	r3, [r4, #0]
 80062d6:	079b      	lsls	r3, r3, #30
 80062d8:	d413      	bmi.n	8006302 <_printf_i+0x23a>
 80062da:	68e0      	ldr	r0, [r4, #12]
 80062dc:	9b03      	ldr	r3, [sp, #12]
 80062de:	4298      	cmp	r0, r3
 80062e0:	bfb8      	it	lt
 80062e2:	4618      	movlt	r0, r3
 80062e4:	e7a4      	b.n	8006230 <_printf_i+0x168>
 80062e6:	2301      	movs	r3, #1
 80062e8:	4632      	mov	r2, r6
 80062ea:	4649      	mov	r1, r9
 80062ec:	4640      	mov	r0, r8
 80062ee:	47d0      	blx	sl
 80062f0:	3001      	adds	r0, #1
 80062f2:	d09b      	beq.n	800622c <_printf_i+0x164>
 80062f4:	3501      	adds	r5, #1
 80062f6:	68e3      	ldr	r3, [r4, #12]
 80062f8:	9903      	ldr	r1, [sp, #12]
 80062fa:	1a5b      	subs	r3, r3, r1
 80062fc:	42ab      	cmp	r3, r5
 80062fe:	dcf2      	bgt.n	80062e6 <_printf_i+0x21e>
 8006300:	e7eb      	b.n	80062da <_printf_i+0x212>
 8006302:	2500      	movs	r5, #0
 8006304:	f104 0619 	add.w	r6, r4, #25
 8006308:	e7f5      	b.n	80062f6 <_printf_i+0x22e>
 800630a:	bf00      	nop
 800630c:	080088ce 	.word	0x080088ce
 8006310:	080088df 	.word	0x080088df

08006314 <siprintf>:
 8006314:	b40e      	push	{r1, r2, r3}
 8006316:	b500      	push	{lr}
 8006318:	b09c      	sub	sp, #112	; 0x70
 800631a:	ab1d      	add	r3, sp, #116	; 0x74
 800631c:	9002      	str	r0, [sp, #8]
 800631e:	9006      	str	r0, [sp, #24]
 8006320:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006324:	4809      	ldr	r0, [pc, #36]	; (800634c <siprintf+0x38>)
 8006326:	9107      	str	r1, [sp, #28]
 8006328:	9104      	str	r1, [sp, #16]
 800632a:	4909      	ldr	r1, [pc, #36]	; (8006350 <siprintf+0x3c>)
 800632c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006330:	9105      	str	r1, [sp, #20]
 8006332:	6800      	ldr	r0, [r0, #0]
 8006334:	9301      	str	r3, [sp, #4]
 8006336:	a902      	add	r1, sp, #8
 8006338:	f001 fb6a 	bl	8007a10 <_svfiprintf_r>
 800633c:	9b02      	ldr	r3, [sp, #8]
 800633e:	2200      	movs	r2, #0
 8006340:	701a      	strb	r2, [r3, #0]
 8006342:	b01c      	add	sp, #112	; 0x70
 8006344:	f85d eb04 	ldr.w	lr, [sp], #4
 8006348:	b003      	add	sp, #12
 800634a:	4770      	bx	lr
 800634c:	2000000c 	.word	0x2000000c
 8006350:	ffff0208 	.word	0xffff0208

08006354 <quorem>:
 8006354:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006358:	6903      	ldr	r3, [r0, #16]
 800635a:	690c      	ldr	r4, [r1, #16]
 800635c:	42a3      	cmp	r3, r4
 800635e:	4607      	mov	r7, r0
 8006360:	f2c0 8081 	blt.w	8006466 <quorem+0x112>
 8006364:	3c01      	subs	r4, #1
 8006366:	f101 0814 	add.w	r8, r1, #20
 800636a:	f100 0514 	add.w	r5, r0, #20
 800636e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006372:	9301      	str	r3, [sp, #4]
 8006374:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006378:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800637c:	3301      	adds	r3, #1
 800637e:	429a      	cmp	r2, r3
 8006380:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006384:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006388:	fbb2 f6f3 	udiv	r6, r2, r3
 800638c:	d331      	bcc.n	80063f2 <quorem+0x9e>
 800638e:	f04f 0e00 	mov.w	lr, #0
 8006392:	4640      	mov	r0, r8
 8006394:	46ac      	mov	ip, r5
 8006396:	46f2      	mov	sl, lr
 8006398:	f850 2b04 	ldr.w	r2, [r0], #4
 800639c:	b293      	uxth	r3, r2
 800639e:	fb06 e303 	mla	r3, r6, r3, lr
 80063a2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	ebaa 0303 	sub.w	r3, sl, r3
 80063ac:	f8dc a000 	ldr.w	sl, [ip]
 80063b0:	0c12      	lsrs	r2, r2, #16
 80063b2:	fa13 f38a 	uxtah	r3, r3, sl
 80063b6:	fb06 e202 	mla	r2, r6, r2, lr
 80063ba:	9300      	str	r3, [sp, #0]
 80063bc:	9b00      	ldr	r3, [sp, #0]
 80063be:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80063c2:	b292      	uxth	r2, r2
 80063c4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80063c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80063cc:	f8bd 3000 	ldrh.w	r3, [sp]
 80063d0:	4581      	cmp	r9, r0
 80063d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80063d6:	f84c 3b04 	str.w	r3, [ip], #4
 80063da:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80063de:	d2db      	bcs.n	8006398 <quorem+0x44>
 80063e0:	f855 300b 	ldr.w	r3, [r5, fp]
 80063e4:	b92b      	cbnz	r3, 80063f2 <quorem+0x9e>
 80063e6:	9b01      	ldr	r3, [sp, #4]
 80063e8:	3b04      	subs	r3, #4
 80063ea:	429d      	cmp	r5, r3
 80063ec:	461a      	mov	r2, r3
 80063ee:	d32e      	bcc.n	800644e <quorem+0xfa>
 80063f0:	613c      	str	r4, [r7, #16]
 80063f2:	4638      	mov	r0, r7
 80063f4:	f001 f8b8 	bl	8007568 <__mcmp>
 80063f8:	2800      	cmp	r0, #0
 80063fa:	db24      	blt.n	8006446 <quorem+0xf2>
 80063fc:	3601      	adds	r6, #1
 80063fe:	4628      	mov	r0, r5
 8006400:	f04f 0c00 	mov.w	ip, #0
 8006404:	f858 2b04 	ldr.w	r2, [r8], #4
 8006408:	f8d0 e000 	ldr.w	lr, [r0]
 800640c:	b293      	uxth	r3, r2
 800640e:	ebac 0303 	sub.w	r3, ip, r3
 8006412:	0c12      	lsrs	r2, r2, #16
 8006414:	fa13 f38e 	uxtah	r3, r3, lr
 8006418:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800641c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006420:	b29b      	uxth	r3, r3
 8006422:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006426:	45c1      	cmp	r9, r8
 8006428:	f840 3b04 	str.w	r3, [r0], #4
 800642c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006430:	d2e8      	bcs.n	8006404 <quorem+0xb0>
 8006432:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006436:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800643a:	b922      	cbnz	r2, 8006446 <quorem+0xf2>
 800643c:	3b04      	subs	r3, #4
 800643e:	429d      	cmp	r5, r3
 8006440:	461a      	mov	r2, r3
 8006442:	d30a      	bcc.n	800645a <quorem+0x106>
 8006444:	613c      	str	r4, [r7, #16]
 8006446:	4630      	mov	r0, r6
 8006448:	b003      	add	sp, #12
 800644a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800644e:	6812      	ldr	r2, [r2, #0]
 8006450:	3b04      	subs	r3, #4
 8006452:	2a00      	cmp	r2, #0
 8006454:	d1cc      	bne.n	80063f0 <quorem+0x9c>
 8006456:	3c01      	subs	r4, #1
 8006458:	e7c7      	b.n	80063ea <quorem+0x96>
 800645a:	6812      	ldr	r2, [r2, #0]
 800645c:	3b04      	subs	r3, #4
 800645e:	2a00      	cmp	r2, #0
 8006460:	d1f0      	bne.n	8006444 <quorem+0xf0>
 8006462:	3c01      	subs	r4, #1
 8006464:	e7eb      	b.n	800643e <quorem+0xea>
 8006466:	2000      	movs	r0, #0
 8006468:	e7ee      	b.n	8006448 <quorem+0xf4>
 800646a:	0000      	movs	r0, r0
 800646c:	0000      	movs	r0, r0
	...

08006470 <_dtoa_r>:
 8006470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006474:	ed2d 8b04 	vpush	{d8-d9}
 8006478:	ec57 6b10 	vmov	r6, r7, d0
 800647c:	b093      	sub	sp, #76	; 0x4c
 800647e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006480:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006484:	9106      	str	r1, [sp, #24]
 8006486:	ee10 aa10 	vmov	sl, s0
 800648a:	4604      	mov	r4, r0
 800648c:	9209      	str	r2, [sp, #36]	; 0x24
 800648e:	930c      	str	r3, [sp, #48]	; 0x30
 8006490:	46bb      	mov	fp, r7
 8006492:	b975      	cbnz	r5, 80064b2 <_dtoa_r+0x42>
 8006494:	2010      	movs	r0, #16
 8006496:	f000 fddd 	bl	8007054 <malloc>
 800649a:	4602      	mov	r2, r0
 800649c:	6260      	str	r0, [r4, #36]	; 0x24
 800649e:	b920      	cbnz	r0, 80064aa <_dtoa_r+0x3a>
 80064a0:	4ba7      	ldr	r3, [pc, #668]	; (8006740 <_dtoa_r+0x2d0>)
 80064a2:	21ea      	movs	r1, #234	; 0xea
 80064a4:	48a7      	ldr	r0, [pc, #668]	; (8006744 <_dtoa_r+0x2d4>)
 80064a6:	f001 fbc3 	bl	8007c30 <__assert_func>
 80064aa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80064ae:	6005      	str	r5, [r0, #0]
 80064b0:	60c5      	str	r5, [r0, #12]
 80064b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064b4:	6819      	ldr	r1, [r3, #0]
 80064b6:	b151      	cbz	r1, 80064ce <_dtoa_r+0x5e>
 80064b8:	685a      	ldr	r2, [r3, #4]
 80064ba:	604a      	str	r2, [r1, #4]
 80064bc:	2301      	movs	r3, #1
 80064be:	4093      	lsls	r3, r2
 80064c0:	608b      	str	r3, [r1, #8]
 80064c2:	4620      	mov	r0, r4
 80064c4:	f000 fe0e 	bl	80070e4 <_Bfree>
 80064c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064ca:	2200      	movs	r2, #0
 80064cc:	601a      	str	r2, [r3, #0]
 80064ce:	1e3b      	subs	r3, r7, #0
 80064d0:	bfaa      	itet	ge
 80064d2:	2300      	movge	r3, #0
 80064d4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80064d8:	f8c8 3000 	strge.w	r3, [r8]
 80064dc:	4b9a      	ldr	r3, [pc, #616]	; (8006748 <_dtoa_r+0x2d8>)
 80064de:	bfbc      	itt	lt
 80064e0:	2201      	movlt	r2, #1
 80064e2:	f8c8 2000 	strlt.w	r2, [r8]
 80064e6:	ea33 030b 	bics.w	r3, r3, fp
 80064ea:	d11b      	bne.n	8006524 <_dtoa_r+0xb4>
 80064ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80064ee:	f242 730f 	movw	r3, #9999	; 0x270f
 80064f2:	6013      	str	r3, [r2, #0]
 80064f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80064f8:	4333      	orrs	r3, r6
 80064fa:	f000 8592 	beq.w	8007022 <_dtoa_r+0xbb2>
 80064fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006500:	b963      	cbnz	r3, 800651c <_dtoa_r+0xac>
 8006502:	4b92      	ldr	r3, [pc, #584]	; (800674c <_dtoa_r+0x2dc>)
 8006504:	e022      	b.n	800654c <_dtoa_r+0xdc>
 8006506:	4b92      	ldr	r3, [pc, #584]	; (8006750 <_dtoa_r+0x2e0>)
 8006508:	9301      	str	r3, [sp, #4]
 800650a:	3308      	adds	r3, #8
 800650c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800650e:	6013      	str	r3, [r2, #0]
 8006510:	9801      	ldr	r0, [sp, #4]
 8006512:	b013      	add	sp, #76	; 0x4c
 8006514:	ecbd 8b04 	vpop	{d8-d9}
 8006518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800651c:	4b8b      	ldr	r3, [pc, #556]	; (800674c <_dtoa_r+0x2dc>)
 800651e:	9301      	str	r3, [sp, #4]
 8006520:	3303      	adds	r3, #3
 8006522:	e7f3      	b.n	800650c <_dtoa_r+0x9c>
 8006524:	2200      	movs	r2, #0
 8006526:	2300      	movs	r3, #0
 8006528:	4650      	mov	r0, sl
 800652a:	4659      	mov	r1, fp
 800652c:	f7fa faec 	bl	8000b08 <__aeabi_dcmpeq>
 8006530:	ec4b ab19 	vmov	d9, sl, fp
 8006534:	4680      	mov	r8, r0
 8006536:	b158      	cbz	r0, 8006550 <_dtoa_r+0xe0>
 8006538:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800653a:	2301      	movs	r3, #1
 800653c:	6013      	str	r3, [r2, #0]
 800653e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006540:	2b00      	cmp	r3, #0
 8006542:	f000 856b 	beq.w	800701c <_dtoa_r+0xbac>
 8006546:	4883      	ldr	r0, [pc, #524]	; (8006754 <_dtoa_r+0x2e4>)
 8006548:	6018      	str	r0, [r3, #0]
 800654a:	1e43      	subs	r3, r0, #1
 800654c:	9301      	str	r3, [sp, #4]
 800654e:	e7df      	b.n	8006510 <_dtoa_r+0xa0>
 8006550:	ec4b ab10 	vmov	d0, sl, fp
 8006554:	aa10      	add	r2, sp, #64	; 0x40
 8006556:	a911      	add	r1, sp, #68	; 0x44
 8006558:	4620      	mov	r0, r4
 800655a:	f001 f8ab 	bl	80076b4 <__d2b>
 800655e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006562:	ee08 0a10 	vmov	s16, r0
 8006566:	2d00      	cmp	r5, #0
 8006568:	f000 8084 	beq.w	8006674 <_dtoa_r+0x204>
 800656c:	ee19 3a90 	vmov	r3, s19
 8006570:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006574:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006578:	4656      	mov	r6, sl
 800657a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800657e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006582:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006586:	4b74      	ldr	r3, [pc, #464]	; (8006758 <_dtoa_r+0x2e8>)
 8006588:	2200      	movs	r2, #0
 800658a:	4630      	mov	r0, r6
 800658c:	4639      	mov	r1, r7
 800658e:	f7f9 fe9b 	bl	80002c8 <__aeabi_dsub>
 8006592:	a365      	add	r3, pc, #404	; (adr r3, 8006728 <_dtoa_r+0x2b8>)
 8006594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006598:	f7fa f84e 	bl	8000638 <__aeabi_dmul>
 800659c:	a364      	add	r3, pc, #400	; (adr r3, 8006730 <_dtoa_r+0x2c0>)
 800659e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a2:	f7f9 fe93 	bl	80002cc <__adddf3>
 80065a6:	4606      	mov	r6, r0
 80065a8:	4628      	mov	r0, r5
 80065aa:	460f      	mov	r7, r1
 80065ac:	f7f9 ffda 	bl	8000564 <__aeabi_i2d>
 80065b0:	a361      	add	r3, pc, #388	; (adr r3, 8006738 <_dtoa_r+0x2c8>)
 80065b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b6:	f7fa f83f 	bl	8000638 <__aeabi_dmul>
 80065ba:	4602      	mov	r2, r0
 80065bc:	460b      	mov	r3, r1
 80065be:	4630      	mov	r0, r6
 80065c0:	4639      	mov	r1, r7
 80065c2:	f7f9 fe83 	bl	80002cc <__adddf3>
 80065c6:	4606      	mov	r6, r0
 80065c8:	460f      	mov	r7, r1
 80065ca:	f7fa fae5 	bl	8000b98 <__aeabi_d2iz>
 80065ce:	2200      	movs	r2, #0
 80065d0:	9000      	str	r0, [sp, #0]
 80065d2:	2300      	movs	r3, #0
 80065d4:	4630      	mov	r0, r6
 80065d6:	4639      	mov	r1, r7
 80065d8:	f7fa faa0 	bl	8000b1c <__aeabi_dcmplt>
 80065dc:	b150      	cbz	r0, 80065f4 <_dtoa_r+0x184>
 80065de:	9800      	ldr	r0, [sp, #0]
 80065e0:	f7f9 ffc0 	bl	8000564 <__aeabi_i2d>
 80065e4:	4632      	mov	r2, r6
 80065e6:	463b      	mov	r3, r7
 80065e8:	f7fa fa8e 	bl	8000b08 <__aeabi_dcmpeq>
 80065ec:	b910      	cbnz	r0, 80065f4 <_dtoa_r+0x184>
 80065ee:	9b00      	ldr	r3, [sp, #0]
 80065f0:	3b01      	subs	r3, #1
 80065f2:	9300      	str	r3, [sp, #0]
 80065f4:	9b00      	ldr	r3, [sp, #0]
 80065f6:	2b16      	cmp	r3, #22
 80065f8:	d85a      	bhi.n	80066b0 <_dtoa_r+0x240>
 80065fa:	9a00      	ldr	r2, [sp, #0]
 80065fc:	4b57      	ldr	r3, [pc, #348]	; (800675c <_dtoa_r+0x2ec>)
 80065fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006606:	ec51 0b19 	vmov	r0, r1, d9
 800660a:	f7fa fa87 	bl	8000b1c <__aeabi_dcmplt>
 800660e:	2800      	cmp	r0, #0
 8006610:	d050      	beq.n	80066b4 <_dtoa_r+0x244>
 8006612:	9b00      	ldr	r3, [sp, #0]
 8006614:	3b01      	subs	r3, #1
 8006616:	9300      	str	r3, [sp, #0]
 8006618:	2300      	movs	r3, #0
 800661a:	930b      	str	r3, [sp, #44]	; 0x2c
 800661c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800661e:	1b5d      	subs	r5, r3, r5
 8006620:	1e6b      	subs	r3, r5, #1
 8006622:	9305      	str	r3, [sp, #20]
 8006624:	bf45      	ittet	mi
 8006626:	f1c5 0301 	rsbmi	r3, r5, #1
 800662a:	9304      	strmi	r3, [sp, #16]
 800662c:	2300      	movpl	r3, #0
 800662e:	2300      	movmi	r3, #0
 8006630:	bf4c      	ite	mi
 8006632:	9305      	strmi	r3, [sp, #20]
 8006634:	9304      	strpl	r3, [sp, #16]
 8006636:	9b00      	ldr	r3, [sp, #0]
 8006638:	2b00      	cmp	r3, #0
 800663a:	db3d      	blt.n	80066b8 <_dtoa_r+0x248>
 800663c:	9b05      	ldr	r3, [sp, #20]
 800663e:	9a00      	ldr	r2, [sp, #0]
 8006640:	920a      	str	r2, [sp, #40]	; 0x28
 8006642:	4413      	add	r3, r2
 8006644:	9305      	str	r3, [sp, #20]
 8006646:	2300      	movs	r3, #0
 8006648:	9307      	str	r3, [sp, #28]
 800664a:	9b06      	ldr	r3, [sp, #24]
 800664c:	2b09      	cmp	r3, #9
 800664e:	f200 8089 	bhi.w	8006764 <_dtoa_r+0x2f4>
 8006652:	2b05      	cmp	r3, #5
 8006654:	bfc4      	itt	gt
 8006656:	3b04      	subgt	r3, #4
 8006658:	9306      	strgt	r3, [sp, #24]
 800665a:	9b06      	ldr	r3, [sp, #24]
 800665c:	f1a3 0302 	sub.w	r3, r3, #2
 8006660:	bfcc      	ite	gt
 8006662:	2500      	movgt	r5, #0
 8006664:	2501      	movle	r5, #1
 8006666:	2b03      	cmp	r3, #3
 8006668:	f200 8087 	bhi.w	800677a <_dtoa_r+0x30a>
 800666c:	e8df f003 	tbb	[pc, r3]
 8006670:	59383a2d 	.word	0x59383a2d
 8006674:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006678:	441d      	add	r5, r3
 800667a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800667e:	2b20      	cmp	r3, #32
 8006680:	bfc1      	itttt	gt
 8006682:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006686:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800668a:	fa0b f303 	lslgt.w	r3, fp, r3
 800668e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006692:	bfda      	itte	le
 8006694:	f1c3 0320 	rsble	r3, r3, #32
 8006698:	fa06 f003 	lslle.w	r0, r6, r3
 800669c:	4318      	orrgt	r0, r3
 800669e:	f7f9 ff51 	bl	8000544 <__aeabi_ui2d>
 80066a2:	2301      	movs	r3, #1
 80066a4:	4606      	mov	r6, r0
 80066a6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80066aa:	3d01      	subs	r5, #1
 80066ac:	930e      	str	r3, [sp, #56]	; 0x38
 80066ae:	e76a      	b.n	8006586 <_dtoa_r+0x116>
 80066b0:	2301      	movs	r3, #1
 80066b2:	e7b2      	b.n	800661a <_dtoa_r+0x1aa>
 80066b4:	900b      	str	r0, [sp, #44]	; 0x2c
 80066b6:	e7b1      	b.n	800661c <_dtoa_r+0x1ac>
 80066b8:	9b04      	ldr	r3, [sp, #16]
 80066ba:	9a00      	ldr	r2, [sp, #0]
 80066bc:	1a9b      	subs	r3, r3, r2
 80066be:	9304      	str	r3, [sp, #16]
 80066c0:	4253      	negs	r3, r2
 80066c2:	9307      	str	r3, [sp, #28]
 80066c4:	2300      	movs	r3, #0
 80066c6:	930a      	str	r3, [sp, #40]	; 0x28
 80066c8:	e7bf      	b.n	800664a <_dtoa_r+0x1da>
 80066ca:	2300      	movs	r3, #0
 80066cc:	9308      	str	r3, [sp, #32]
 80066ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	dc55      	bgt.n	8006780 <_dtoa_r+0x310>
 80066d4:	2301      	movs	r3, #1
 80066d6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80066da:	461a      	mov	r2, r3
 80066dc:	9209      	str	r2, [sp, #36]	; 0x24
 80066de:	e00c      	b.n	80066fa <_dtoa_r+0x28a>
 80066e0:	2301      	movs	r3, #1
 80066e2:	e7f3      	b.n	80066cc <_dtoa_r+0x25c>
 80066e4:	2300      	movs	r3, #0
 80066e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066e8:	9308      	str	r3, [sp, #32]
 80066ea:	9b00      	ldr	r3, [sp, #0]
 80066ec:	4413      	add	r3, r2
 80066ee:	9302      	str	r3, [sp, #8]
 80066f0:	3301      	adds	r3, #1
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	9303      	str	r3, [sp, #12]
 80066f6:	bfb8      	it	lt
 80066f8:	2301      	movlt	r3, #1
 80066fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80066fc:	2200      	movs	r2, #0
 80066fe:	6042      	str	r2, [r0, #4]
 8006700:	2204      	movs	r2, #4
 8006702:	f102 0614 	add.w	r6, r2, #20
 8006706:	429e      	cmp	r6, r3
 8006708:	6841      	ldr	r1, [r0, #4]
 800670a:	d93d      	bls.n	8006788 <_dtoa_r+0x318>
 800670c:	4620      	mov	r0, r4
 800670e:	f000 fca9 	bl	8007064 <_Balloc>
 8006712:	9001      	str	r0, [sp, #4]
 8006714:	2800      	cmp	r0, #0
 8006716:	d13b      	bne.n	8006790 <_dtoa_r+0x320>
 8006718:	4b11      	ldr	r3, [pc, #68]	; (8006760 <_dtoa_r+0x2f0>)
 800671a:	4602      	mov	r2, r0
 800671c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006720:	e6c0      	b.n	80064a4 <_dtoa_r+0x34>
 8006722:	2301      	movs	r3, #1
 8006724:	e7df      	b.n	80066e6 <_dtoa_r+0x276>
 8006726:	bf00      	nop
 8006728:	636f4361 	.word	0x636f4361
 800672c:	3fd287a7 	.word	0x3fd287a7
 8006730:	8b60c8b3 	.word	0x8b60c8b3
 8006734:	3fc68a28 	.word	0x3fc68a28
 8006738:	509f79fb 	.word	0x509f79fb
 800673c:	3fd34413 	.word	0x3fd34413
 8006740:	080088fd 	.word	0x080088fd
 8006744:	08008914 	.word	0x08008914
 8006748:	7ff00000 	.word	0x7ff00000
 800674c:	080088f9 	.word	0x080088f9
 8006750:	080088f0 	.word	0x080088f0
 8006754:	080088cd 	.word	0x080088cd
 8006758:	3ff80000 	.word	0x3ff80000
 800675c:	08008a08 	.word	0x08008a08
 8006760:	0800896f 	.word	0x0800896f
 8006764:	2501      	movs	r5, #1
 8006766:	2300      	movs	r3, #0
 8006768:	9306      	str	r3, [sp, #24]
 800676a:	9508      	str	r5, [sp, #32]
 800676c:	f04f 33ff 	mov.w	r3, #4294967295
 8006770:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006774:	2200      	movs	r2, #0
 8006776:	2312      	movs	r3, #18
 8006778:	e7b0      	b.n	80066dc <_dtoa_r+0x26c>
 800677a:	2301      	movs	r3, #1
 800677c:	9308      	str	r3, [sp, #32]
 800677e:	e7f5      	b.n	800676c <_dtoa_r+0x2fc>
 8006780:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006782:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006786:	e7b8      	b.n	80066fa <_dtoa_r+0x28a>
 8006788:	3101      	adds	r1, #1
 800678a:	6041      	str	r1, [r0, #4]
 800678c:	0052      	lsls	r2, r2, #1
 800678e:	e7b8      	b.n	8006702 <_dtoa_r+0x292>
 8006790:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006792:	9a01      	ldr	r2, [sp, #4]
 8006794:	601a      	str	r2, [r3, #0]
 8006796:	9b03      	ldr	r3, [sp, #12]
 8006798:	2b0e      	cmp	r3, #14
 800679a:	f200 809d 	bhi.w	80068d8 <_dtoa_r+0x468>
 800679e:	2d00      	cmp	r5, #0
 80067a0:	f000 809a 	beq.w	80068d8 <_dtoa_r+0x468>
 80067a4:	9b00      	ldr	r3, [sp, #0]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	dd32      	ble.n	8006810 <_dtoa_r+0x3a0>
 80067aa:	4ab7      	ldr	r2, [pc, #732]	; (8006a88 <_dtoa_r+0x618>)
 80067ac:	f003 030f 	and.w	r3, r3, #15
 80067b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80067b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80067b8:	9b00      	ldr	r3, [sp, #0]
 80067ba:	05d8      	lsls	r0, r3, #23
 80067bc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80067c0:	d516      	bpl.n	80067f0 <_dtoa_r+0x380>
 80067c2:	4bb2      	ldr	r3, [pc, #712]	; (8006a8c <_dtoa_r+0x61c>)
 80067c4:	ec51 0b19 	vmov	r0, r1, d9
 80067c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80067cc:	f7fa f85e 	bl	800088c <__aeabi_ddiv>
 80067d0:	f007 070f 	and.w	r7, r7, #15
 80067d4:	4682      	mov	sl, r0
 80067d6:	468b      	mov	fp, r1
 80067d8:	2503      	movs	r5, #3
 80067da:	4eac      	ldr	r6, [pc, #688]	; (8006a8c <_dtoa_r+0x61c>)
 80067dc:	b957      	cbnz	r7, 80067f4 <_dtoa_r+0x384>
 80067de:	4642      	mov	r2, r8
 80067e0:	464b      	mov	r3, r9
 80067e2:	4650      	mov	r0, sl
 80067e4:	4659      	mov	r1, fp
 80067e6:	f7fa f851 	bl	800088c <__aeabi_ddiv>
 80067ea:	4682      	mov	sl, r0
 80067ec:	468b      	mov	fp, r1
 80067ee:	e028      	b.n	8006842 <_dtoa_r+0x3d2>
 80067f0:	2502      	movs	r5, #2
 80067f2:	e7f2      	b.n	80067da <_dtoa_r+0x36a>
 80067f4:	07f9      	lsls	r1, r7, #31
 80067f6:	d508      	bpl.n	800680a <_dtoa_r+0x39a>
 80067f8:	4640      	mov	r0, r8
 80067fa:	4649      	mov	r1, r9
 80067fc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006800:	f7f9 ff1a 	bl	8000638 <__aeabi_dmul>
 8006804:	3501      	adds	r5, #1
 8006806:	4680      	mov	r8, r0
 8006808:	4689      	mov	r9, r1
 800680a:	107f      	asrs	r7, r7, #1
 800680c:	3608      	adds	r6, #8
 800680e:	e7e5      	b.n	80067dc <_dtoa_r+0x36c>
 8006810:	f000 809b 	beq.w	800694a <_dtoa_r+0x4da>
 8006814:	9b00      	ldr	r3, [sp, #0]
 8006816:	4f9d      	ldr	r7, [pc, #628]	; (8006a8c <_dtoa_r+0x61c>)
 8006818:	425e      	negs	r6, r3
 800681a:	4b9b      	ldr	r3, [pc, #620]	; (8006a88 <_dtoa_r+0x618>)
 800681c:	f006 020f 	and.w	r2, r6, #15
 8006820:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006828:	ec51 0b19 	vmov	r0, r1, d9
 800682c:	f7f9 ff04 	bl	8000638 <__aeabi_dmul>
 8006830:	1136      	asrs	r6, r6, #4
 8006832:	4682      	mov	sl, r0
 8006834:	468b      	mov	fp, r1
 8006836:	2300      	movs	r3, #0
 8006838:	2502      	movs	r5, #2
 800683a:	2e00      	cmp	r6, #0
 800683c:	d17a      	bne.n	8006934 <_dtoa_r+0x4c4>
 800683e:	2b00      	cmp	r3, #0
 8006840:	d1d3      	bne.n	80067ea <_dtoa_r+0x37a>
 8006842:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006844:	2b00      	cmp	r3, #0
 8006846:	f000 8082 	beq.w	800694e <_dtoa_r+0x4de>
 800684a:	4b91      	ldr	r3, [pc, #580]	; (8006a90 <_dtoa_r+0x620>)
 800684c:	2200      	movs	r2, #0
 800684e:	4650      	mov	r0, sl
 8006850:	4659      	mov	r1, fp
 8006852:	f7fa f963 	bl	8000b1c <__aeabi_dcmplt>
 8006856:	2800      	cmp	r0, #0
 8006858:	d079      	beq.n	800694e <_dtoa_r+0x4de>
 800685a:	9b03      	ldr	r3, [sp, #12]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d076      	beq.n	800694e <_dtoa_r+0x4de>
 8006860:	9b02      	ldr	r3, [sp, #8]
 8006862:	2b00      	cmp	r3, #0
 8006864:	dd36      	ble.n	80068d4 <_dtoa_r+0x464>
 8006866:	9b00      	ldr	r3, [sp, #0]
 8006868:	4650      	mov	r0, sl
 800686a:	4659      	mov	r1, fp
 800686c:	1e5f      	subs	r7, r3, #1
 800686e:	2200      	movs	r2, #0
 8006870:	4b88      	ldr	r3, [pc, #544]	; (8006a94 <_dtoa_r+0x624>)
 8006872:	f7f9 fee1 	bl	8000638 <__aeabi_dmul>
 8006876:	9e02      	ldr	r6, [sp, #8]
 8006878:	4682      	mov	sl, r0
 800687a:	468b      	mov	fp, r1
 800687c:	3501      	adds	r5, #1
 800687e:	4628      	mov	r0, r5
 8006880:	f7f9 fe70 	bl	8000564 <__aeabi_i2d>
 8006884:	4652      	mov	r2, sl
 8006886:	465b      	mov	r3, fp
 8006888:	f7f9 fed6 	bl	8000638 <__aeabi_dmul>
 800688c:	4b82      	ldr	r3, [pc, #520]	; (8006a98 <_dtoa_r+0x628>)
 800688e:	2200      	movs	r2, #0
 8006890:	f7f9 fd1c 	bl	80002cc <__adddf3>
 8006894:	46d0      	mov	r8, sl
 8006896:	46d9      	mov	r9, fp
 8006898:	4682      	mov	sl, r0
 800689a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800689e:	2e00      	cmp	r6, #0
 80068a0:	d158      	bne.n	8006954 <_dtoa_r+0x4e4>
 80068a2:	4b7e      	ldr	r3, [pc, #504]	; (8006a9c <_dtoa_r+0x62c>)
 80068a4:	2200      	movs	r2, #0
 80068a6:	4640      	mov	r0, r8
 80068a8:	4649      	mov	r1, r9
 80068aa:	f7f9 fd0d 	bl	80002c8 <__aeabi_dsub>
 80068ae:	4652      	mov	r2, sl
 80068b0:	465b      	mov	r3, fp
 80068b2:	4680      	mov	r8, r0
 80068b4:	4689      	mov	r9, r1
 80068b6:	f7fa f94f 	bl	8000b58 <__aeabi_dcmpgt>
 80068ba:	2800      	cmp	r0, #0
 80068bc:	f040 8295 	bne.w	8006dea <_dtoa_r+0x97a>
 80068c0:	4652      	mov	r2, sl
 80068c2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80068c6:	4640      	mov	r0, r8
 80068c8:	4649      	mov	r1, r9
 80068ca:	f7fa f927 	bl	8000b1c <__aeabi_dcmplt>
 80068ce:	2800      	cmp	r0, #0
 80068d0:	f040 8289 	bne.w	8006de6 <_dtoa_r+0x976>
 80068d4:	ec5b ab19 	vmov	sl, fp, d9
 80068d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80068da:	2b00      	cmp	r3, #0
 80068dc:	f2c0 8148 	blt.w	8006b70 <_dtoa_r+0x700>
 80068e0:	9a00      	ldr	r2, [sp, #0]
 80068e2:	2a0e      	cmp	r2, #14
 80068e4:	f300 8144 	bgt.w	8006b70 <_dtoa_r+0x700>
 80068e8:	4b67      	ldr	r3, [pc, #412]	; (8006a88 <_dtoa_r+0x618>)
 80068ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80068ee:	e9d3 8900 	ldrd	r8, r9, [r3]
 80068f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	f280 80d5 	bge.w	8006aa4 <_dtoa_r+0x634>
 80068fa:	9b03      	ldr	r3, [sp, #12]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	f300 80d1 	bgt.w	8006aa4 <_dtoa_r+0x634>
 8006902:	f040 826f 	bne.w	8006de4 <_dtoa_r+0x974>
 8006906:	4b65      	ldr	r3, [pc, #404]	; (8006a9c <_dtoa_r+0x62c>)
 8006908:	2200      	movs	r2, #0
 800690a:	4640      	mov	r0, r8
 800690c:	4649      	mov	r1, r9
 800690e:	f7f9 fe93 	bl	8000638 <__aeabi_dmul>
 8006912:	4652      	mov	r2, sl
 8006914:	465b      	mov	r3, fp
 8006916:	f7fa f915 	bl	8000b44 <__aeabi_dcmpge>
 800691a:	9e03      	ldr	r6, [sp, #12]
 800691c:	4637      	mov	r7, r6
 800691e:	2800      	cmp	r0, #0
 8006920:	f040 8245 	bne.w	8006dae <_dtoa_r+0x93e>
 8006924:	9d01      	ldr	r5, [sp, #4]
 8006926:	2331      	movs	r3, #49	; 0x31
 8006928:	f805 3b01 	strb.w	r3, [r5], #1
 800692c:	9b00      	ldr	r3, [sp, #0]
 800692e:	3301      	adds	r3, #1
 8006930:	9300      	str	r3, [sp, #0]
 8006932:	e240      	b.n	8006db6 <_dtoa_r+0x946>
 8006934:	07f2      	lsls	r2, r6, #31
 8006936:	d505      	bpl.n	8006944 <_dtoa_r+0x4d4>
 8006938:	e9d7 2300 	ldrd	r2, r3, [r7]
 800693c:	f7f9 fe7c 	bl	8000638 <__aeabi_dmul>
 8006940:	3501      	adds	r5, #1
 8006942:	2301      	movs	r3, #1
 8006944:	1076      	asrs	r6, r6, #1
 8006946:	3708      	adds	r7, #8
 8006948:	e777      	b.n	800683a <_dtoa_r+0x3ca>
 800694a:	2502      	movs	r5, #2
 800694c:	e779      	b.n	8006842 <_dtoa_r+0x3d2>
 800694e:	9f00      	ldr	r7, [sp, #0]
 8006950:	9e03      	ldr	r6, [sp, #12]
 8006952:	e794      	b.n	800687e <_dtoa_r+0x40e>
 8006954:	9901      	ldr	r1, [sp, #4]
 8006956:	4b4c      	ldr	r3, [pc, #304]	; (8006a88 <_dtoa_r+0x618>)
 8006958:	4431      	add	r1, r6
 800695a:	910d      	str	r1, [sp, #52]	; 0x34
 800695c:	9908      	ldr	r1, [sp, #32]
 800695e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006962:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006966:	2900      	cmp	r1, #0
 8006968:	d043      	beq.n	80069f2 <_dtoa_r+0x582>
 800696a:	494d      	ldr	r1, [pc, #308]	; (8006aa0 <_dtoa_r+0x630>)
 800696c:	2000      	movs	r0, #0
 800696e:	f7f9 ff8d 	bl	800088c <__aeabi_ddiv>
 8006972:	4652      	mov	r2, sl
 8006974:	465b      	mov	r3, fp
 8006976:	f7f9 fca7 	bl	80002c8 <__aeabi_dsub>
 800697a:	9d01      	ldr	r5, [sp, #4]
 800697c:	4682      	mov	sl, r0
 800697e:	468b      	mov	fp, r1
 8006980:	4649      	mov	r1, r9
 8006982:	4640      	mov	r0, r8
 8006984:	f7fa f908 	bl	8000b98 <__aeabi_d2iz>
 8006988:	4606      	mov	r6, r0
 800698a:	f7f9 fdeb 	bl	8000564 <__aeabi_i2d>
 800698e:	4602      	mov	r2, r0
 8006990:	460b      	mov	r3, r1
 8006992:	4640      	mov	r0, r8
 8006994:	4649      	mov	r1, r9
 8006996:	f7f9 fc97 	bl	80002c8 <__aeabi_dsub>
 800699a:	3630      	adds	r6, #48	; 0x30
 800699c:	f805 6b01 	strb.w	r6, [r5], #1
 80069a0:	4652      	mov	r2, sl
 80069a2:	465b      	mov	r3, fp
 80069a4:	4680      	mov	r8, r0
 80069a6:	4689      	mov	r9, r1
 80069a8:	f7fa f8b8 	bl	8000b1c <__aeabi_dcmplt>
 80069ac:	2800      	cmp	r0, #0
 80069ae:	d163      	bne.n	8006a78 <_dtoa_r+0x608>
 80069b0:	4642      	mov	r2, r8
 80069b2:	464b      	mov	r3, r9
 80069b4:	4936      	ldr	r1, [pc, #216]	; (8006a90 <_dtoa_r+0x620>)
 80069b6:	2000      	movs	r0, #0
 80069b8:	f7f9 fc86 	bl	80002c8 <__aeabi_dsub>
 80069bc:	4652      	mov	r2, sl
 80069be:	465b      	mov	r3, fp
 80069c0:	f7fa f8ac 	bl	8000b1c <__aeabi_dcmplt>
 80069c4:	2800      	cmp	r0, #0
 80069c6:	f040 80b5 	bne.w	8006b34 <_dtoa_r+0x6c4>
 80069ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069cc:	429d      	cmp	r5, r3
 80069ce:	d081      	beq.n	80068d4 <_dtoa_r+0x464>
 80069d0:	4b30      	ldr	r3, [pc, #192]	; (8006a94 <_dtoa_r+0x624>)
 80069d2:	2200      	movs	r2, #0
 80069d4:	4650      	mov	r0, sl
 80069d6:	4659      	mov	r1, fp
 80069d8:	f7f9 fe2e 	bl	8000638 <__aeabi_dmul>
 80069dc:	4b2d      	ldr	r3, [pc, #180]	; (8006a94 <_dtoa_r+0x624>)
 80069de:	4682      	mov	sl, r0
 80069e0:	468b      	mov	fp, r1
 80069e2:	4640      	mov	r0, r8
 80069e4:	4649      	mov	r1, r9
 80069e6:	2200      	movs	r2, #0
 80069e8:	f7f9 fe26 	bl	8000638 <__aeabi_dmul>
 80069ec:	4680      	mov	r8, r0
 80069ee:	4689      	mov	r9, r1
 80069f0:	e7c6      	b.n	8006980 <_dtoa_r+0x510>
 80069f2:	4650      	mov	r0, sl
 80069f4:	4659      	mov	r1, fp
 80069f6:	f7f9 fe1f 	bl	8000638 <__aeabi_dmul>
 80069fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069fc:	9d01      	ldr	r5, [sp, #4]
 80069fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a00:	4682      	mov	sl, r0
 8006a02:	468b      	mov	fp, r1
 8006a04:	4649      	mov	r1, r9
 8006a06:	4640      	mov	r0, r8
 8006a08:	f7fa f8c6 	bl	8000b98 <__aeabi_d2iz>
 8006a0c:	4606      	mov	r6, r0
 8006a0e:	f7f9 fda9 	bl	8000564 <__aeabi_i2d>
 8006a12:	3630      	adds	r6, #48	; 0x30
 8006a14:	4602      	mov	r2, r0
 8006a16:	460b      	mov	r3, r1
 8006a18:	4640      	mov	r0, r8
 8006a1a:	4649      	mov	r1, r9
 8006a1c:	f7f9 fc54 	bl	80002c8 <__aeabi_dsub>
 8006a20:	f805 6b01 	strb.w	r6, [r5], #1
 8006a24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a26:	429d      	cmp	r5, r3
 8006a28:	4680      	mov	r8, r0
 8006a2a:	4689      	mov	r9, r1
 8006a2c:	f04f 0200 	mov.w	r2, #0
 8006a30:	d124      	bne.n	8006a7c <_dtoa_r+0x60c>
 8006a32:	4b1b      	ldr	r3, [pc, #108]	; (8006aa0 <_dtoa_r+0x630>)
 8006a34:	4650      	mov	r0, sl
 8006a36:	4659      	mov	r1, fp
 8006a38:	f7f9 fc48 	bl	80002cc <__adddf3>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	460b      	mov	r3, r1
 8006a40:	4640      	mov	r0, r8
 8006a42:	4649      	mov	r1, r9
 8006a44:	f7fa f888 	bl	8000b58 <__aeabi_dcmpgt>
 8006a48:	2800      	cmp	r0, #0
 8006a4a:	d173      	bne.n	8006b34 <_dtoa_r+0x6c4>
 8006a4c:	4652      	mov	r2, sl
 8006a4e:	465b      	mov	r3, fp
 8006a50:	4913      	ldr	r1, [pc, #76]	; (8006aa0 <_dtoa_r+0x630>)
 8006a52:	2000      	movs	r0, #0
 8006a54:	f7f9 fc38 	bl	80002c8 <__aeabi_dsub>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	460b      	mov	r3, r1
 8006a5c:	4640      	mov	r0, r8
 8006a5e:	4649      	mov	r1, r9
 8006a60:	f7fa f85c 	bl	8000b1c <__aeabi_dcmplt>
 8006a64:	2800      	cmp	r0, #0
 8006a66:	f43f af35 	beq.w	80068d4 <_dtoa_r+0x464>
 8006a6a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006a6c:	1e6b      	subs	r3, r5, #1
 8006a6e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a70:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006a74:	2b30      	cmp	r3, #48	; 0x30
 8006a76:	d0f8      	beq.n	8006a6a <_dtoa_r+0x5fa>
 8006a78:	9700      	str	r7, [sp, #0]
 8006a7a:	e049      	b.n	8006b10 <_dtoa_r+0x6a0>
 8006a7c:	4b05      	ldr	r3, [pc, #20]	; (8006a94 <_dtoa_r+0x624>)
 8006a7e:	f7f9 fddb 	bl	8000638 <__aeabi_dmul>
 8006a82:	4680      	mov	r8, r0
 8006a84:	4689      	mov	r9, r1
 8006a86:	e7bd      	b.n	8006a04 <_dtoa_r+0x594>
 8006a88:	08008a08 	.word	0x08008a08
 8006a8c:	080089e0 	.word	0x080089e0
 8006a90:	3ff00000 	.word	0x3ff00000
 8006a94:	40240000 	.word	0x40240000
 8006a98:	401c0000 	.word	0x401c0000
 8006a9c:	40140000 	.word	0x40140000
 8006aa0:	3fe00000 	.word	0x3fe00000
 8006aa4:	9d01      	ldr	r5, [sp, #4]
 8006aa6:	4656      	mov	r6, sl
 8006aa8:	465f      	mov	r7, fp
 8006aaa:	4642      	mov	r2, r8
 8006aac:	464b      	mov	r3, r9
 8006aae:	4630      	mov	r0, r6
 8006ab0:	4639      	mov	r1, r7
 8006ab2:	f7f9 feeb 	bl	800088c <__aeabi_ddiv>
 8006ab6:	f7fa f86f 	bl	8000b98 <__aeabi_d2iz>
 8006aba:	4682      	mov	sl, r0
 8006abc:	f7f9 fd52 	bl	8000564 <__aeabi_i2d>
 8006ac0:	4642      	mov	r2, r8
 8006ac2:	464b      	mov	r3, r9
 8006ac4:	f7f9 fdb8 	bl	8000638 <__aeabi_dmul>
 8006ac8:	4602      	mov	r2, r0
 8006aca:	460b      	mov	r3, r1
 8006acc:	4630      	mov	r0, r6
 8006ace:	4639      	mov	r1, r7
 8006ad0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006ad4:	f7f9 fbf8 	bl	80002c8 <__aeabi_dsub>
 8006ad8:	f805 6b01 	strb.w	r6, [r5], #1
 8006adc:	9e01      	ldr	r6, [sp, #4]
 8006ade:	9f03      	ldr	r7, [sp, #12]
 8006ae0:	1bae      	subs	r6, r5, r6
 8006ae2:	42b7      	cmp	r7, r6
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	460b      	mov	r3, r1
 8006ae8:	d135      	bne.n	8006b56 <_dtoa_r+0x6e6>
 8006aea:	f7f9 fbef 	bl	80002cc <__adddf3>
 8006aee:	4642      	mov	r2, r8
 8006af0:	464b      	mov	r3, r9
 8006af2:	4606      	mov	r6, r0
 8006af4:	460f      	mov	r7, r1
 8006af6:	f7fa f82f 	bl	8000b58 <__aeabi_dcmpgt>
 8006afa:	b9d0      	cbnz	r0, 8006b32 <_dtoa_r+0x6c2>
 8006afc:	4642      	mov	r2, r8
 8006afe:	464b      	mov	r3, r9
 8006b00:	4630      	mov	r0, r6
 8006b02:	4639      	mov	r1, r7
 8006b04:	f7fa f800 	bl	8000b08 <__aeabi_dcmpeq>
 8006b08:	b110      	cbz	r0, 8006b10 <_dtoa_r+0x6a0>
 8006b0a:	f01a 0f01 	tst.w	sl, #1
 8006b0e:	d110      	bne.n	8006b32 <_dtoa_r+0x6c2>
 8006b10:	4620      	mov	r0, r4
 8006b12:	ee18 1a10 	vmov	r1, s16
 8006b16:	f000 fae5 	bl	80070e4 <_Bfree>
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	9800      	ldr	r0, [sp, #0]
 8006b1e:	702b      	strb	r3, [r5, #0]
 8006b20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b22:	3001      	adds	r0, #1
 8006b24:	6018      	str	r0, [r3, #0]
 8006b26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	f43f acf1 	beq.w	8006510 <_dtoa_r+0xa0>
 8006b2e:	601d      	str	r5, [r3, #0]
 8006b30:	e4ee      	b.n	8006510 <_dtoa_r+0xa0>
 8006b32:	9f00      	ldr	r7, [sp, #0]
 8006b34:	462b      	mov	r3, r5
 8006b36:	461d      	mov	r5, r3
 8006b38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b3c:	2a39      	cmp	r2, #57	; 0x39
 8006b3e:	d106      	bne.n	8006b4e <_dtoa_r+0x6de>
 8006b40:	9a01      	ldr	r2, [sp, #4]
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d1f7      	bne.n	8006b36 <_dtoa_r+0x6c6>
 8006b46:	9901      	ldr	r1, [sp, #4]
 8006b48:	2230      	movs	r2, #48	; 0x30
 8006b4a:	3701      	adds	r7, #1
 8006b4c:	700a      	strb	r2, [r1, #0]
 8006b4e:	781a      	ldrb	r2, [r3, #0]
 8006b50:	3201      	adds	r2, #1
 8006b52:	701a      	strb	r2, [r3, #0]
 8006b54:	e790      	b.n	8006a78 <_dtoa_r+0x608>
 8006b56:	4ba6      	ldr	r3, [pc, #664]	; (8006df0 <_dtoa_r+0x980>)
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f7f9 fd6d 	bl	8000638 <__aeabi_dmul>
 8006b5e:	2200      	movs	r2, #0
 8006b60:	2300      	movs	r3, #0
 8006b62:	4606      	mov	r6, r0
 8006b64:	460f      	mov	r7, r1
 8006b66:	f7f9 ffcf 	bl	8000b08 <__aeabi_dcmpeq>
 8006b6a:	2800      	cmp	r0, #0
 8006b6c:	d09d      	beq.n	8006aaa <_dtoa_r+0x63a>
 8006b6e:	e7cf      	b.n	8006b10 <_dtoa_r+0x6a0>
 8006b70:	9a08      	ldr	r2, [sp, #32]
 8006b72:	2a00      	cmp	r2, #0
 8006b74:	f000 80d7 	beq.w	8006d26 <_dtoa_r+0x8b6>
 8006b78:	9a06      	ldr	r2, [sp, #24]
 8006b7a:	2a01      	cmp	r2, #1
 8006b7c:	f300 80ba 	bgt.w	8006cf4 <_dtoa_r+0x884>
 8006b80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006b82:	2a00      	cmp	r2, #0
 8006b84:	f000 80b2 	beq.w	8006cec <_dtoa_r+0x87c>
 8006b88:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006b8c:	9e07      	ldr	r6, [sp, #28]
 8006b8e:	9d04      	ldr	r5, [sp, #16]
 8006b90:	9a04      	ldr	r2, [sp, #16]
 8006b92:	441a      	add	r2, r3
 8006b94:	9204      	str	r2, [sp, #16]
 8006b96:	9a05      	ldr	r2, [sp, #20]
 8006b98:	2101      	movs	r1, #1
 8006b9a:	441a      	add	r2, r3
 8006b9c:	4620      	mov	r0, r4
 8006b9e:	9205      	str	r2, [sp, #20]
 8006ba0:	f000 fb58 	bl	8007254 <__i2b>
 8006ba4:	4607      	mov	r7, r0
 8006ba6:	2d00      	cmp	r5, #0
 8006ba8:	dd0c      	ble.n	8006bc4 <_dtoa_r+0x754>
 8006baa:	9b05      	ldr	r3, [sp, #20]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	dd09      	ble.n	8006bc4 <_dtoa_r+0x754>
 8006bb0:	42ab      	cmp	r3, r5
 8006bb2:	9a04      	ldr	r2, [sp, #16]
 8006bb4:	bfa8      	it	ge
 8006bb6:	462b      	movge	r3, r5
 8006bb8:	1ad2      	subs	r2, r2, r3
 8006bba:	9204      	str	r2, [sp, #16]
 8006bbc:	9a05      	ldr	r2, [sp, #20]
 8006bbe:	1aed      	subs	r5, r5, r3
 8006bc0:	1ad3      	subs	r3, r2, r3
 8006bc2:	9305      	str	r3, [sp, #20]
 8006bc4:	9b07      	ldr	r3, [sp, #28]
 8006bc6:	b31b      	cbz	r3, 8006c10 <_dtoa_r+0x7a0>
 8006bc8:	9b08      	ldr	r3, [sp, #32]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	f000 80af 	beq.w	8006d2e <_dtoa_r+0x8be>
 8006bd0:	2e00      	cmp	r6, #0
 8006bd2:	dd13      	ble.n	8006bfc <_dtoa_r+0x78c>
 8006bd4:	4639      	mov	r1, r7
 8006bd6:	4632      	mov	r2, r6
 8006bd8:	4620      	mov	r0, r4
 8006bda:	f000 fbfb 	bl	80073d4 <__pow5mult>
 8006bde:	ee18 2a10 	vmov	r2, s16
 8006be2:	4601      	mov	r1, r0
 8006be4:	4607      	mov	r7, r0
 8006be6:	4620      	mov	r0, r4
 8006be8:	f000 fb4a 	bl	8007280 <__multiply>
 8006bec:	ee18 1a10 	vmov	r1, s16
 8006bf0:	4680      	mov	r8, r0
 8006bf2:	4620      	mov	r0, r4
 8006bf4:	f000 fa76 	bl	80070e4 <_Bfree>
 8006bf8:	ee08 8a10 	vmov	s16, r8
 8006bfc:	9b07      	ldr	r3, [sp, #28]
 8006bfe:	1b9a      	subs	r2, r3, r6
 8006c00:	d006      	beq.n	8006c10 <_dtoa_r+0x7a0>
 8006c02:	ee18 1a10 	vmov	r1, s16
 8006c06:	4620      	mov	r0, r4
 8006c08:	f000 fbe4 	bl	80073d4 <__pow5mult>
 8006c0c:	ee08 0a10 	vmov	s16, r0
 8006c10:	2101      	movs	r1, #1
 8006c12:	4620      	mov	r0, r4
 8006c14:	f000 fb1e 	bl	8007254 <__i2b>
 8006c18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	4606      	mov	r6, r0
 8006c1e:	f340 8088 	ble.w	8006d32 <_dtoa_r+0x8c2>
 8006c22:	461a      	mov	r2, r3
 8006c24:	4601      	mov	r1, r0
 8006c26:	4620      	mov	r0, r4
 8006c28:	f000 fbd4 	bl	80073d4 <__pow5mult>
 8006c2c:	9b06      	ldr	r3, [sp, #24]
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	4606      	mov	r6, r0
 8006c32:	f340 8081 	ble.w	8006d38 <_dtoa_r+0x8c8>
 8006c36:	f04f 0800 	mov.w	r8, #0
 8006c3a:	6933      	ldr	r3, [r6, #16]
 8006c3c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006c40:	6918      	ldr	r0, [r3, #16]
 8006c42:	f000 fab7 	bl	80071b4 <__hi0bits>
 8006c46:	f1c0 0020 	rsb	r0, r0, #32
 8006c4a:	9b05      	ldr	r3, [sp, #20]
 8006c4c:	4418      	add	r0, r3
 8006c4e:	f010 001f 	ands.w	r0, r0, #31
 8006c52:	f000 8092 	beq.w	8006d7a <_dtoa_r+0x90a>
 8006c56:	f1c0 0320 	rsb	r3, r0, #32
 8006c5a:	2b04      	cmp	r3, #4
 8006c5c:	f340 808a 	ble.w	8006d74 <_dtoa_r+0x904>
 8006c60:	f1c0 001c 	rsb	r0, r0, #28
 8006c64:	9b04      	ldr	r3, [sp, #16]
 8006c66:	4403      	add	r3, r0
 8006c68:	9304      	str	r3, [sp, #16]
 8006c6a:	9b05      	ldr	r3, [sp, #20]
 8006c6c:	4403      	add	r3, r0
 8006c6e:	4405      	add	r5, r0
 8006c70:	9305      	str	r3, [sp, #20]
 8006c72:	9b04      	ldr	r3, [sp, #16]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	dd07      	ble.n	8006c88 <_dtoa_r+0x818>
 8006c78:	ee18 1a10 	vmov	r1, s16
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	4620      	mov	r0, r4
 8006c80:	f000 fc02 	bl	8007488 <__lshift>
 8006c84:	ee08 0a10 	vmov	s16, r0
 8006c88:	9b05      	ldr	r3, [sp, #20]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	dd05      	ble.n	8006c9a <_dtoa_r+0x82a>
 8006c8e:	4631      	mov	r1, r6
 8006c90:	461a      	mov	r2, r3
 8006c92:	4620      	mov	r0, r4
 8006c94:	f000 fbf8 	bl	8007488 <__lshift>
 8006c98:	4606      	mov	r6, r0
 8006c9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d06e      	beq.n	8006d7e <_dtoa_r+0x90e>
 8006ca0:	ee18 0a10 	vmov	r0, s16
 8006ca4:	4631      	mov	r1, r6
 8006ca6:	f000 fc5f 	bl	8007568 <__mcmp>
 8006caa:	2800      	cmp	r0, #0
 8006cac:	da67      	bge.n	8006d7e <_dtoa_r+0x90e>
 8006cae:	9b00      	ldr	r3, [sp, #0]
 8006cb0:	3b01      	subs	r3, #1
 8006cb2:	ee18 1a10 	vmov	r1, s16
 8006cb6:	9300      	str	r3, [sp, #0]
 8006cb8:	220a      	movs	r2, #10
 8006cba:	2300      	movs	r3, #0
 8006cbc:	4620      	mov	r0, r4
 8006cbe:	f000 fa33 	bl	8007128 <__multadd>
 8006cc2:	9b08      	ldr	r3, [sp, #32]
 8006cc4:	ee08 0a10 	vmov	s16, r0
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	f000 81b1 	beq.w	8007030 <_dtoa_r+0xbc0>
 8006cce:	2300      	movs	r3, #0
 8006cd0:	4639      	mov	r1, r7
 8006cd2:	220a      	movs	r2, #10
 8006cd4:	4620      	mov	r0, r4
 8006cd6:	f000 fa27 	bl	8007128 <__multadd>
 8006cda:	9b02      	ldr	r3, [sp, #8]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	4607      	mov	r7, r0
 8006ce0:	f300 808e 	bgt.w	8006e00 <_dtoa_r+0x990>
 8006ce4:	9b06      	ldr	r3, [sp, #24]
 8006ce6:	2b02      	cmp	r3, #2
 8006ce8:	dc51      	bgt.n	8006d8e <_dtoa_r+0x91e>
 8006cea:	e089      	b.n	8006e00 <_dtoa_r+0x990>
 8006cec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006cee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006cf2:	e74b      	b.n	8006b8c <_dtoa_r+0x71c>
 8006cf4:	9b03      	ldr	r3, [sp, #12]
 8006cf6:	1e5e      	subs	r6, r3, #1
 8006cf8:	9b07      	ldr	r3, [sp, #28]
 8006cfa:	42b3      	cmp	r3, r6
 8006cfc:	bfbf      	itttt	lt
 8006cfe:	9b07      	ldrlt	r3, [sp, #28]
 8006d00:	9607      	strlt	r6, [sp, #28]
 8006d02:	1af2      	sublt	r2, r6, r3
 8006d04:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006d06:	bfb6      	itet	lt
 8006d08:	189b      	addlt	r3, r3, r2
 8006d0a:	1b9e      	subge	r6, r3, r6
 8006d0c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006d0e:	9b03      	ldr	r3, [sp, #12]
 8006d10:	bfb8      	it	lt
 8006d12:	2600      	movlt	r6, #0
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	bfb7      	itett	lt
 8006d18:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006d1c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006d20:	1a9d      	sublt	r5, r3, r2
 8006d22:	2300      	movlt	r3, #0
 8006d24:	e734      	b.n	8006b90 <_dtoa_r+0x720>
 8006d26:	9e07      	ldr	r6, [sp, #28]
 8006d28:	9d04      	ldr	r5, [sp, #16]
 8006d2a:	9f08      	ldr	r7, [sp, #32]
 8006d2c:	e73b      	b.n	8006ba6 <_dtoa_r+0x736>
 8006d2e:	9a07      	ldr	r2, [sp, #28]
 8006d30:	e767      	b.n	8006c02 <_dtoa_r+0x792>
 8006d32:	9b06      	ldr	r3, [sp, #24]
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	dc18      	bgt.n	8006d6a <_dtoa_r+0x8fa>
 8006d38:	f1ba 0f00 	cmp.w	sl, #0
 8006d3c:	d115      	bne.n	8006d6a <_dtoa_r+0x8fa>
 8006d3e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006d42:	b993      	cbnz	r3, 8006d6a <_dtoa_r+0x8fa>
 8006d44:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006d48:	0d1b      	lsrs	r3, r3, #20
 8006d4a:	051b      	lsls	r3, r3, #20
 8006d4c:	b183      	cbz	r3, 8006d70 <_dtoa_r+0x900>
 8006d4e:	9b04      	ldr	r3, [sp, #16]
 8006d50:	3301      	adds	r3, #1
 8006d52:	9304      	str	r3, [sp, #16]
 8006d54:	9b05      	ldr	r3, [sp, #20]
 8006d56:	3301      	adds	r3, #1
 8006d58:	9305      	str	r3, [sp, #20]
 8006d5a:	f04f 0801 	mov.w	r8, #1
 8006d5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	f47f af6a 	bne.w	8006c3a <_dtoa_r+0x7ca>
 8006d66:	2001      	movs	r0, #1
 8006d68:	e76f      	b.n	8006c4a <_dtoa_r+0x7da>
 8006d6a:	f04f 0800 	mov.w	r8, #0
 8006d6e:	e7f6      	b.n	8006d5e <_dtoa_r+0x8ee>
 8006d70:	4698      	mov	r8, r3
 8006d72:	e7f4      	b.n	8006d5e <_dtoa_r+0x8ee>
 8006d74:	f43f af7d 	beq.w	8006c72 <_dtoa_r+0x802>
 8006d78:	4618      	mov	r0, r3
 8006d7a:	301c      	adds	r0, #28
 8006d7c:	e772      	b.n	8006c64 <_dtoa_r+0x7f4>
 8006d7e:	9b03      	ldr	r3, [sp, #12]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	dc37      	bgt.n	8006df4 <_dtoa_r+0x984>
 8006d84:	9b06      	ldr	r3, [sp, #24]
 8006d86:	2b02      	cmp	r3, #2
 8006d88:	dd34      	ble.n	8006df4 <_dtoa_r+0x984>
 8006d8a:	9b03      	ldr	r3, [sp, #12]
 8006d8c:	9302      	str	r3, [sp, #8]
 8006d8e:	9b02      	ldr	r3, [sp, #8]
 8006d90:	b96b      	cbnz	r3, 8006dae <_dtoa_r+0x93e>
 8006d92:	4631      	mov	r1, r6
 8006d94:	2205      	movs	r2, #5
 8006d96:	4620      	mov	r0, r4
 8006d98:	f000 f9c6 	bl	8007128 <__multadd>
 8006d9c:	4601      	mov	r1, r0
 8006d9e:	4606      	mov	r6, r0
 8006da0:	ee18 0a10 	vmov	r0, s16
 8006da4:	f000 fbe0 	bl	8007568 <__mcmp>
 8006da8:	2800      	cmp	r0, #0
 8006daa:	f73f adbb 	bgt.w	8006924 <_dtoa_r+0x4b4>
 8006dae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006db0:	9d01      	ldr	r5, [sp, #4]
 8006db2:	43db      	mvns	r3, r3
 8006db4:	9300      	str	r3, [sp, #0]
 8006db6:	f04f 0800 	mov.w	r8, #0
 8006dba:	4631      	mov	r1, r6
 8006dbc:	4620      	mov	r0, r4
 8006dbe:	f000 f991 	bl	80070e4 <_Bfree>
 8006dc2:	2f00      	cmp	r7, #0
 8006dc4:	f43f aea4 	beq.w	8006b10 <_dtoa_r+0x6a0>
 8006dc8:	f1b8 0f00 	cmp.w	r8, #0
 8006dcc:	d005      	beq.n	8006dda <_dtoa_r+0x96a>
 8006dce:	45b8      	cmp	r8, r7
 8006dd0:	d003      	beq.n	8006dda <_dtoa_r+0x96a>
 8006dd2:	4641      	mov	r1, r8
 8006dd4:	4620      	mov	r0, r4
 8006dd6:	f000 f985 	bl	80070e4 <_Bfree>
 8006dda:	4639      	mov	r1, r7
 8006ddc:	4620      	mov	r0, r4
 8006dde:	f000 f981 	bl	80070e4 <_Bfree>
 8006de2:	e695      	b.n	8006b10 <_dtoa_r+0x6a0>
 8006de4:	2600      	movs	r6, #0
 8006de6:	4637      	mov	r7, r6
 8006de8:	e7e1      	b.n	8006dae <_dtoa_r+0x93e>
 8006dea:	9700      	str	r7, [sp, #0]
 8006dec:	4637      	mov	r7, r6
 8006dee:	e599      	b.n	8006924 <_dtoa_r+0x4b4>
 8006df0:	40240000 	.word	0x40240000
 8006df4:	9b08      	ldr	r3, [sp, #32]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	f000 80ca 	beq.w	8006f90 <_dtoa_r+0xb20>
 8006dfc:	9b03      	ldr	r3, [sp, #12]
 8006dfe:	9302      	str	r3, [sp, #8]
 8006e00:	2d00      	cmp	r5, #0
 8006e02:	dd05      	ble.n	8006e10 <_dtoa_r+0x9a0>
 8006e04:	4639      	mov	r1, r7
 8006e06:	462a      	mov	r2, r5
 8006e08:	4620      	mov	r0, r4
 8006e0a:	f000 fb3d 	bl	8007488 <__lshift>
 8006e0e:	4607      	mov	r7, r0
 8006e10:	f1b8 0f00 	cmp.w	r8, #0
 8006e14:	d05b      	beq.n	8006ece <_dtoa_r+0xa5e>
 8006e16:	6879      	ldr	r1, [r7, #4]
 8006e18:	4620      	mov	r0, r4
 8006e1a:	f000 f923 	bl	8007064 <_Balloc>
 8006e1e:	4605      	mov	r5, r0
 8006e20:	b928      	cbnz	r0, 8006e2e <_dtoa_r+0x9be>
 8006e22:	4b87      	ldr	r3, [pc, #540]	; (8007040 <_dtoa_r+0xbd0>)
 8006e24:	4602      	mov	r2, r0
 8006e26:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006e2a:	f7ff bb3b 	b.w	80064a4 <_dtoa_r+0x34>
 8006e2e:	693a      	ldr	r2, [r7, #16]
 8006e30:	3202      	adds	r2, #2
 8006e32:	0092      	lsls	r2, r2, #2
 8006e34:	f107 010c 	add.w	r1, r7, #12
 8006e38:	300c      	adds	r0, #12
 8006e3a:	f7fe fdeb 	bl	8005a14 <memcpy>
 8006e3e:	2201      	movs	r2, #1
 8006e40:	4629      	mov	r1, r5
 8006e42:	4620      	mov	r0, r4
 8006e44:	f000 fb20 	bl	8007488 <__lshift>
 8006e48:	9b01      	ldr	r3, [sp, #4]
 8006e4a:	f103 0901 	add.w	r9, r3, #1
 8006e4e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006e52:	4413      	add	r3, r2
 8006e54:	9305      	str	r3, [sp, #20]
 8006e56:	f00a 0301 	and.w	r3, sl, #1
 8006e5a:	46b8      	mov	r8, r7
 8006e5c:	9304      	str	r3, [sp, #16]
 8006e5e:	4607      	mov	r7, r0
 8006e60:	4631      	mov	r1, r6
 8006e62:	ee18 0a10 	vmov	r0, s16
 8006e66:	f7ff fa75 	bl	8006354 <quorem>
 8006e6a:	4641      	mov	r1, r8
 8006e6c:	9002      	str	r0, [sp, #8]
 8006e6e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006e72:	ee18 0a10 	vmov	r0, s16
 8006e76:	f000 fb77 	bl	8007568 <__mcmp>
 8006e7a:	463a      	mov	r2, r7
 8006e7c:	9003      	str	r0, [sp, #12]
 8006e7e:	4631      	mov	r1, r6
 8006e80:	4620      	mov	r0, r4
 8006e82:	f000 fb8d 	bl	80075a0 <__mdiff>
 8006e86:	68c2      	ldr	r2, [r0, #12]
 8006e88:	f109 3bff 	add.w	fp, r9, #4294967295
 8006e8c:	4605      	mov	r5, r0
 8006e8e:	bb02      	cbnz	r2, 8006ed2 <_dtoa_r+0xa62>
 8006e90:	4601      	mov	r1, r0
 8006e92:	ee18 0a10 	vmov	r0, s16
 8006e96:	f000 fb67 	bl	8007568 <__mcmp>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	4629      	mov	r1, r5
 8006e9e:	4620      	mov	r0, r4
 8006ea0:	9207      	str	r2, [sp, #28]
 8006ea2:	f000 f91f 	bl	80070e4 <_Bfree>
 8006ea6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006eaa:	ea43 0102 	orr.w	r1, r3, r2
 8006eae:	9b04      	ldr	r3, [sp, #16]
 8006eb0:	430b      	orrs	r3, r1
 8006eb2:	464d      	mov	r5, r9
 8006eb4:	d10f      	bne.n	8006ed6 <_dtoa_r+0xa66>
 8006eb6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006eba:	d02a      	beq.n	8006f12 <_dtoa_r+0xaa2>
 8006ebc:	9b03      	ldr	r3, [sp, #12]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	dd02      	ble.n	8006ec8 <_dtoa_r+0xa58>
 8006ec2:	9b02      	ldr	r3, [sp, #8]
 8006ec4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006ec8:	f88b a000 	strb.w	sl, [fp]
 8006ecc:	e775      	b.n	8006dba <_dtoa_r+0x94a>
 8006ece:	4638      	mov	r0, r7
 8006ed0:	e7ba      	b.n	8006e48 <_dtoa_r+0x9d8>
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	e7e2      	b.n	8006e9c <_dtoa_r+0xa2c>
 8006ed6:	9b03      	ldr	r3, [sp, #12]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	db04      	blt.n	8006ee6 <_dtoa_r+0xa76>
 8006edc:	9906      	ldr	r1, [sp, #24]
 8006ede:	430b      	orrs	r3, r1
 8006ee0:	9904      	ldr	r1, [sp, #16]
 8006ee2:	430b      	orrs	r3, r1
 8006ee4:	d122      	bne.n	8006f2c <_dtoa_r+0xabc>
 8006ee6:	2a00      	cmp	r2, #0
 8006ee8:	ddee      	ble.n	8006ec8 <_dtoa_r+0xa58>
 8006eea:	ee18 1a10 	vmov	r1, s16
 8006eee:	2201      	movs	r2, #1
 8006ef0:	4620      	mov	r0, r4
 8006ef2:	f000 fac9 	bl	8007488 <__lshift>
 8006ef6:	4631      	mov	r1, r6
 8006ef8:	ee08 0a10 	vmov	s16, r0
 8006efc:	f000 fb34 	bl	8007568 <__mcmp>
 8006f00:	2800      	cmp	r0, #0
 8006f02:	dc03      	bgt.n	8006f0c <_dtoa_r+0xa9c>
 8006f04:	d1e0      	bne.n	8006ec8 <_dtoa_r+0xa58>
 8006f06:	f01a 0f01 	tst.w	sl, #1
 8006f0a:	d0dd      	beq.n	8006ec8 <_dtoa_r+0xa58>
 8006f0c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006f10:	d1d7      	bne.n	8006ec2 <_dtoa_r+0xa52>
 8006f12:	2339      	movs	r3, #57	; 0x39
 8006f14:	f88b 3000 	strb.w	r3, [fp]
 8006f18:	462b      	mov	r3, r5
 8006f1a:	461d      	mov	r5, r3
 8006f1c:	3b01      	subs	r3, #1
 8006f1e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006f22:	2a39      	cmp	r2, #57	; 0x39
 8006f24:	d071      	beq.n	800700a <_dtoa_r+0xb9a>
 8006f26:	3201      	adds	r2, #1
 8006f28:	701a      	strb	r2, [r3, #0]
 8006f2a:	e746      	b.n	8006dba <_dtoa_r+0x94a>
 8006f2c:	2a00      	cmp	r2, #0
 8006f2e:	dd07      	ble.n	8006f40 <_dtoa_r+0xad0>
 8006f30:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006f34:	d0ed      	beq.n	8006f12 <_dtoa_r+0xaa2>
 8006f36:	f10a 0301 	add.w	r3, sl, #1
 8006f3a:	f88b 3000 	strb.w	r3, [fp]
 8006f3e:	e73c      	b.n	8006dba <_dtoa_r+0x94a>
 8006f40:	9b05      	ldr	r3, [sp, #20]
 8006f42:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006f46:	4599      	cmp	r9, r3
 8006f48:	d047      	beq.n	8006fda <_dtoa_r+0xb6a>
 8006f4a:	ee18 1a10 	vmov	r1, s16
 8006f4e:	2300      	movs	r3, #0
 8006f50:	220a      	movs	r2, #10
 8006f52:	4620      	mov	r0, r4
 8006f54:	f000 f8e8 	bl	8007128 <__multadd>
 8006f58:	45b8      	cmp	r8, r7
 8006f5a:	ee08 0a10 	vmov	s16, r0
 8006f5e:	f04f 0300 	mov.w	r3, #0
 8006f62:	f04f 020a 	mov.w	r2, #10
 8006f66:	4641      	mov	r1, r8
 8006f68:	4620      	mov	r0, r4
 8006f6a:	d106      	bne.n	8006f7a <_dtoa_r+0xb0a>
 8006f6c:	f000 f8dc 	bl	8007128 <__multadd>
 8006f70:	4680      	mov	r8, r0
 8006f72:	4607      	mov	r7, r0
 8006f74:	f109 0901 	add.w	r9, r9, #1
 8006f78:	e772      	b.n	8006e60 <_dtoa_r+0x9f0>
 8006f7a:	f000 f8d5 	bl	8007128 <__multadd>
 8006f7e:	4639      	mov	r1, r7
 8006f80:	4680      	mov	r8, r0
 8006f82:	2300      	movs	r3, #0
 8006f84:	220a      	movs	r2, #10
 8006f86:	4620      	mov	r0, r4
 8006f88:	f000 f8ce 	bl	8007128 <__multadd>
 8006f8c:	4607      	mov	r7, r0
 8006f8e:	e7f1      	b.n	8006f74 <_dtoa_r+0xb04>
 8006f90:	9b03      	ldr	r3, [sp, #12]
 8006f92:	9302      	str	r3, [sp, #8]
 8006f94:	9d01      	ldr	r5, [sp, #4]
 8006f96:	ee18 0a10 	vmov	r0, s16
 8006f9a:	4631      	mov	r1, r6
 8006f9c:	f7ff f9da 	bl	8006354 <quorem>
 8006fa0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006fa4:	9b01      	ldr	r3, [sp, #4]
 8006fa6:	f805 ab01 	strb.w	sl, [r5], #1
 8006faa:	1aea      	subs	r2, r5, r3
 8006fac:	9b02      	ldr	r3, [sp, #8]
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	dd09      	ble.n	8006fc6 <_dtoa_r+0xb56>
 8006fb2:	ee18 1a10 	vmov	r1, s16
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	220a      	movs	r2, #10
 8006fba:	4620      	mov	r0, r4
 8006fbc:	f000 f8b4 	bl	8007128 <__multadd>
 8006fc0:	ee08 0a10 	vmov	s16, r0
 8006fc4:	e7e7      	b.n	8006f96 <_dtoa_r+0xb26>
 8006fc6:	9b02      	ldr	r3, [sp, #8]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	bfc8      	it	gt
 8006fcc:	461d      	movgt	r5, r3
 8006fce:	9b01      	ldr	r3, [sp, #4]
 8006fd0:	bfd8      	it	le
 8006fd2:	2501      	movle	r5, #1
 8006fd4:	441d      	add	r5, r3
 8006fd6:	f04f 0800 	mov.w	r8, #0
 8006fda:	ee18 1a10 	vmov	r1, s16
 8006fde:	2201      	movs	r2, #1
 8006fe0:	4620      	mov	r0, r4
 8006fe2:	f000 fa51 	bl	8007488 <__lshift>
 8006fe6:	4631      	mov	r1, r6
 8006fe8:	ee08 0a10 	vmov	s16, r0
 8006fec:	f000 fabc 	bl	8007568 <__mcmp>
 8006ff0:	2800      	cmp	r0, #0
 8006ff2:	dc91      	bgt.n	8006f18 <_dtoa_r+0xaa8>
 8006ff4:	d102      	bne.n	8006ffc <_dtoa_r+0xb8c>
 8006ff6:	f01a 0f01 	tst.w	sl, #1
 8006ffa:	d18d      	bne.n	8006f18 <_dtoa_r+0xaa8>
 8006ffc:	462b      	mov	r3, r5
 8006ffe:	461d      	mov	r5, r3
 8007000:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007004:	2a30      	cmp	r2, #48	; 0x30
 8007006:	d0fa      	beq.n	8006ffe <_dtoa_r+0xb8e>
 8007008:	e6d7      	b.n	8006dba <_dtoa_r+0x94a>
 800700a:	9a01      	ldr	r2, [sp, #4]
 800700c:	429a      	cmp	r2, r3
 800700e:	d184      	bne.n	8006f1a <_dtoa_r+0xaaa>
 8007010:	9b00      	ldr	r3, [sp, #0]
 8007012:	3301      	adds	r3, #1
 8007014:	9300      	str	r3, [sp, #0]
 8007016:	2331      	movs	r3, #49	; 0x31
 8007018:	7013      	strb	r3, [r2, #0]
 800701a:	e6ce      	b.n	8006dba <_dtoa_r+0x94a>
 800701c:	4b09      	ldr	r3, [pc, #36]	; (8007044 <_dtoa_r+0xbd4>)
 800701e:	f7ff ba95 	b.w	800654c <_dtoa_r+0xdc>
 8007022:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007024:	2b00      	cmp	r3, #0
 8007026:	f47f aa6e 	bne.w	8006506 <_dtoa_r+0x96>
 800702a:	4b07      	ldr	r3, [pc, #28]	; (8007048 <_dtoa_r+0xbd8>)
 800702c:	f7ff ba8e 	b.w	800654c <_dtoa_r+0xdc>
 8007030:	9b02      	ldr	r3, [sp, #8]
 8007032:	2b00      	cmp	r3, #0
 8007034:	dcae      	bgt.n	8006f94 <_dtoa_r+0xb24>
 8007036:	9b06      	ldr	r3, [sp, #24]
 8007038:	2b02      	cmp	r3, #2
 800703a:	f73f aea8 	bgt.w	8006d8e <_dtoa_r+0x91e>
 800703e:	e7a9      	b.n	8006f94 <_dtoa_r+0xb24>
 8007040:	0800896f 	.word	0x0800896f
 8007044:	080088cc 	.word	0x080088cc
 8007048:	080088f0 	.word	0x080088f0

0800704c <_localeconv_r>:
 800704c:	4800      	ldr	r0, [pc, #0]	; (8007050 <_localeconv_r+0x4>)
 800704e:	4770      	bx	lr
 8007050:	20000160 	.word	0x20000160

08007054 <malloc>:
 8007054:	4b02      	ldr	r3, [pc, #8]	; (8007060 <malloc+0xc>)
 8007056:	4601      	mov	r1, r0
 8007058:	6818      	ldr	r0, [r3, #0]
 800705a:	f000 bc09 	b.w	8007870 <_malloc_r>
 800705e:	bf00      	nop
 8007060:	2000000c 	.word	0x2000000c

08007064 <_Balloc>:
 8007064:	b570      	push	{r4, r5, r6, lr}
 8007066:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007068:	4604      	mov	r4, r0
 800706a:	460d      	mov	r5, r1
 800706c:	b976      	cbnz	r6, 800708c <_Balloc+0x28>
 800706e:	2010      	movs	r0, #16
 8007070:	f7ff fff0 	bl	8007054 <malloc>
 8007074:	4602      	mov	r2, r0
 8007076:	6260      	str	r0, [r4, #36]	; 0x24
 8007078:	b920      	cbnz	r0, 8007084 <_Balloc+0x20>
 800707a:	4b18      	ldr	r3, [pc, #96]	; (80070dc <_Balloc+0x78>)
 800707c:	4818      	ldr	r0, [pc, #96]	; (80070e0 <_Balloc+0x7c>)
 800707e:	2166      	movs	r1, #102	; 0x66
 8007080:	f000 fdd6 	bl	8007c30 <__assert_func>
 8007084:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007088:	6006      	str	r6, [r0, #0]
 800708a:	60c6      	str	r6, [r0, #12]
 800708c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800708e:	68f3      	ldr	r3, [r6, #12]
 8007090:	b183      	cbz	r3, 80070b4 <_Balloc+0x50>
 8007092:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007094:	68db      	ldr	r3, [r3, #12]
 8007096:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800709a:	b9b8      	cbnz	r0, 80070cc <_Balloc+0x68>
 800709c:	2101      	movs	r1, #1
 800709e:	fa01 f605 	lsl.w	r6, r1, r5
 80070a2:	1d72      	adds	r2, r6, #5
 80070a4:	0092      	lsls	r2, r2, #2
 80070a6:	4620      	mov	r0, r4
 80070a8:	f000 fb60 	bl	800776c <_calloc_r>
 80070ac:	b160      	cbz	r0, 80070c8 <_Balloc+0x64>
 80070ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80070b2:	e00e      	b.n	80070d2 <_Balloc+0x6e>
 80070b4:	2221      	movs	r2, #33	; 0x21
 80070b6:	2104      	movs	r1, #4
 80070b8:	4620      	mov	r0, r4
 80070ba:	f000 fb57 	bl	800776c <_calloc_r>
 80070be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070c0:	60f0      	str	r0, [r6, #12]
 80070c2:	68db      	ldr	r3, [r3, #12]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d1e4      	bne.n	8007092 <_Balloc+0x2e>
 80070c8:	2000      	movs	r0, #0
 80070ca:	bd70      	pop	{r4, r5, r6, pc}
 80070cc:	6802      	ldr	r2, [r0, #0]
 80070ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80070d2:	2300      	movs	r3, #0
 80070d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80070d8:	e7f7      	b.n	80070ca <_Balloc+0x66>
 80070da:	bf00      	nop
 80070dc:	080088fd 	.word	0x080088fd
 80070e0:	08008980 	.word	0x08008980

080070e4 <_Bfree>:
 80070e4:	b570      	push	{r4, r5, r6, lr}
 80070e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80070e8:	4605      	mov	r5, r0
 80070ea:	460c      	mov	r4, r1
 80070ec:	b976      	cbnz	r6, 800710c <_Bfree+0x28>
 80070ee:	2010      	movs	r0, #16
 80070f0:	f7ff ffb0 	bl	8007054 <malloc>
 80070f4:	4602      	mov	r2, r0
 80070f6:	6268      	str	r0, [r5, #36]	; 0x24
 80070f8:	b920      	cbnz	r0, 8007104 <_Bfree+0x20>
 80070fa:	4b09      	ldr	r3, [pc, #36]	; (8007120 <_Bfree+0x3c>)
 80070fc:	4809      	ldr	r0, [pc, #36]	; (8007124 <_Bfree+0x40>)
 80070fe:	218a      	movs	r1, #138	; 0x8a
 8007100:	f000 fd96 	bl	8007c30 <__assert_func>
 8007104:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007108:	6006      	str	r6, [r0, #0]
 800710a:	60c6      	str	r6, [r0, #12]
 800710c:	b13c      	cbz	r4, 800711e <_Bfree+0x3a>
 800710e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007110:	6862      	ldr	r2, [r4, #4]
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007118:	6021      	str	r1, [r4, #0]
 800711a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800711e:	bd70      	pop	{r4, r5, r6, pc}
 8007120:	080088fd 	.word	0x080088fd
 8007124:	08008980 	.word	0x08008980

08007128 <__multadd>:
 8007128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800712c:	690d      	ldr	r5, [r1, #16]
 800712e:	4607      	mov	r7, r0
 8007130:	460c      	mov	r4, r1
 8007132:	461e      	mov	r6, r3
 8007134:	f101 0c14 	add.w	ip, r1, #20
 8007138:	2000      	movs	r0, #0
 800713a:	f8dc 3000 	ldr.w	r3, [ip]
 800713e:	b299      	uxth	r1, r3
 8007140:	fb02 6101 	mla	r1, r2, r1, r6
 8007144:	0c1e      	lsrs	r6, r3, #16
 8007146:	0c0b      	lsrs	r3, r1, #16
 8007148:	fb02 3306 	mla	r3, r2, r6, r3
 800714c:	b289      	uxth	r1, r1
 800714e:	3001      	adds	r0, #1
 8007150:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007154:	4285      	cmp	r5, r0
 8007156:	f84c 1b04 	str.w	r1, [ip], #4
 800715a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800715e:	dcec      	bgt.n	800713a <__multadd+0x12>
 8007160:	b30e      	cbz	r6, 80071a6 <__multadd+0x7e>
 8007162:	68a3      	ldr	r3, [r4, #8]
 8007164:	42ab      	cmp	r3, r5
 8007166:	dc19      	bgt.n	800719c <__multadd+0x74>
 8007168:	6861      	ldr	r1, [r4, #4]
 800716a:	4638      	mov	r0, r7
 800716c:	3101      	adds	r1, #1
 800716e:	f7ff ff79 	bl	8007064 <_Balloc>
 8007172:	4680      	mov	r8, r0
 8007174:	b928      	cbnz	r0, 8007182 <__multadd+0x5a>
 8007176:	4602      	mov	r2, r0
 8007178:	4b0c      	ldr	r3, [pc, #48]	; (80071ac <__multadd+0x84>)
 800717a:	480d      	ldr	r0, [pc, #52]	; (80071b0 <__multadd+0x88>)
 800717c:	21b5      	movs	r1, #181	; 0xb5
 800717e:	f000 fd57 	bl	8007c30 <__assert_func>
 8007182:	6922      	ldr	r2, [r4, #16]
 8007184:	3202      	adds	r2, #2
 8007186:	f104 010c 	add.w	r1, r4, #12
 800718a:	0092      	lsls	r2, r2, #2
 800718c:	300c      	adds	r0, #12
 800718e:	f7fe fc41 	bl	8005a14 <memcpy>
 8007192:	4621      	mov	r1, r4
 8007194:	4638      	mov	r0, r7
 8007196:	f7ff ffa5 	bl	80070e4 <_Bfree>
 800719a:	4644      	mov	r4, r8
 800719c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80071a0:	3501      	adds	r5, #1
 80071a2:	615e      	str	r6, [r3, #20]
 80071a4:	6125      	str	r5, [r4, #16]
 80071a6:	4620      	mov	r0, r4
 80071a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071ac:	0800896f 	.word	0x0800896f
 80071b0:	08008980 	.word	0x08008980

080071b4 <__hi0bits>:
 80071b4:	0c03      	lsrs	r3, r0, #16
 80071b6:	041b      	lsls	r3, r3, #16
 80071b8:	b9d3      	cbnz	r3, 80071f0 <__hi0bits+0x3c>
 80071ba:	0400      	lsls	r0, r0, #16
 80071bc:	2310      	movs	r3, #16
 80071be:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80071c2:	bf04      	itt	eq
 80071c4:	0200      	lsleq	r0, r0, #8
 80071c6:	3308      	addeq	r3, #8
 80071c8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80071cc:	bf04      	itt	eq
 80071ce:	0100      	lsleq	r0, r0, #4
 80071d0:	3304      	addeq	r3, #4
 80071d2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80071d6:	bf04      	itt	eq
 80071d8:	0080      	lsleq	r0, r0, #2
 80071da:	3302      	addeq	r3, #2
 80071dc:	2800      	cmp	r0, #0
 80071de:	db05      	blt.n	80071ec <__hi0bits+0x38>
 80071e0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80071e4:	f103 0301 	add.w	r3, r3, #1
 80071e8:	bf08      	it	eq
 80071ea:	2320      	moveq	r3, #32
 80071ec:	4618      	mov	r0, r3
 80071ee:	4770      	bx	lr
 80071f0:	2300      	movs	r3, #0
 80071f2:	e7e4      	b.n	80071be <__hi0bits+0xa>

080071f4 <__lo0bits>:
 80071f4:	6803      	ldr	r3, [r0, #0]
 80071f6:	f013 0207 	ands.w	r2, r3, #7
 80071fa:	4601      	mov	r1, r0
 80071fc:	d00b      	beq.n	8007216 <__lo0bits+0x22>
 80071fe:	07da      	lsls	r2, r3, #31
 8007200:	d423      	bmi.n	800724a <__lo0bits+0x56>
 8007202:	0798      	lsls	r0, r3, #30
 8007204:	bf49      	itett	mi
 8007206:	085b      	lsrmi	r3, r3, #1
 8007208:	089b      	lsrpl	r3, r3, #2
 800720a:	2001      	movmi	r0, #1
 800720c:	600b      	strmi	r3, [r1, #0]
 800720e:	bf5c      	itt	pl
 8007210:	600b      	strpl	r3, [r1, #0]
 8007212:	2002      	movpl	r0, #2
 8007214:	4770      	bx	lr
 8007216:	b298      	uxth	r0, r3
 8007218:	b9a8      	cbnz	r0, 8007246 <__lo0bits+0x52>
 800721a:	0c1b      	lsrs	r3, r3, #16
 800721c:	2010      	movs	r0, #16
 800721e:	b2da      	uxtb	r2, r3
 8007220:	b90a      	cbnz	r2, 8007226 <__lo0bits+0x32>
 8007222:	3008      	adds	r0, #8
 8007224:	0a1b      	lsrs	r3, r3, #8
 8007226:	071a      	lsls	r2, r3, #28
 8007228:	bf04      	itt	eq
 800722a:	091b      	lsreq	r3, r3, #4
 800722c:	3004      	addeq	r0, #4
 800722e:	079a      	lsls	r2, r3, #30
 8007230:	bf04      	itt	eq
 8007232:	089b      	lsreq	r3, r3, #2
 8007234:	3002      	addeq	r0, #2
 8007236:	07da      	lsls	r2, r3, #31
 8007238:	d403      	bmi.n	8007242 <__lo0bits+0x4e>
 800723a:	085b      	lsrs	r3, r3, #1
 800723c:	f100 0001 	add.w	r0, r0, #1
 8007240:	d005      	beq.n	800724e <__lo0bits+0x5a>
 8007242:	600b      	str	r3, [r1, #0]
 8007244:	4770      	bx	lr
 8007246:	4610      	mov	r0, r2
 8007248:	e7e9      	b.n	800721e <__lo0bits+0x2a>
 800724a:	2000      	movs	r0, #0
 800724c:	4770      	bx	lr
 800724e:	2020      	movs	r0, #32
 8007250:	4770      	bx	lr
	...

08007254 <__i2b>:
 8007254:	b510      	push	{r4, lr}
 8007256:	460c      	mov	r4, r1
 8007258:	2101      	movs	r1, #1
 800725a:	f7ff ff03 	bl	8007064 <_Balloc>
 800725e:	4602      	mov	r2, r0
 8007260:	b928      	cbnz	r0, 800726e <__i2b+0x1a>
 8007262:	4b05      	ldr	r3, [pc, #20]	; (8007278 <__i2b+0x24>)
 8007264:	4805      	ldr	r0, [pc, #20]	; (800727c <__i2b+0x28>)
 8007266:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800726a:	f000 fce1 	bl	8007c30 <__assert_func>
 800726e:	2301      	movs	r3, #1
 8007270:	6144      	str	r4, [r0, #20]
 8007272:	6103      	str	r3, [r0, #16]
 8007274:	bd10      	pop	{r4, pc}
 8007276:	bf00      	nop
 8007278:	0800896f 	.word	0x0800896f
 800727c:	08008980 	.word	0x08008980

08007280 <__multiply>:
 8007280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007284:	4691      	mov	r9, r2
 8007286:	690a      	ldr	r2, [r1, #16]
 8007288:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800728c:	429a      	cmp	r2, r3
 800728e:	bfb8      	it	lt
 8007290:	460b      	movlt	r3, r1
 8007292:	460c      	mov	r4, r1
 8007294:	bfbc      	itt	lt
 8007296:	464c      	movlt	r4, r9
 8007298:	4699      	movlt	r9, r3
 800729a:	6927      	ldr	r7, [r4, #16]
 800729c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80072a0:	68a3      	ldr	r3, [r4, #8]
 80072a2:	6861      	ldr	r1, [r4, #4]
 80072a4:	eb07 060a 	add.w	r6, r7, sl
 80072a8:	42b3      	cmp	r3, r6
 80072aa:	b085      	sub	sp, #20
 80072ac:	bfb8      	it	lt
 80072ae:	3101      	addlt	r1, #1
 80072b0:	f7ff fed8 	bl	8007064 <_Balloc>
 80072b4:	b930      	cbnz	r0, 80072c4 <__multiply+0x44>
 80072b6:	4602      	mov	r2, r0
 80072b8:	4b44      	ldr	r3, [pc, #272]	; (80073cc <__multiply+0x14c>)
 80072ba:	4845      	ldr	r0, [pc, #276]	; (80073d0 <__multiply+0x150>)
 80072bc:	f240 115d 	movw	r1, #349	; 0x15d
 80072c0:	f000 fcb6 	bl	8007c30 <__assert_func>
 80072c4:	f100 0514 	add.w	r5, r0, #20
 80072c8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80072cc:	462b      	mov	r3, r5
 80072ce:	2200      	movs	r2, #0
 80072d0:	4543      	cmp	r3, r8
 80072d2:	d321      	bcc.n	8007318 <__multiply+0x98>
 80072d4:	f104 0314 	add.w	r3, r4, #20
 80072d8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80072dc:	f109 0314 	add.w	r3, r9, #20
 80072e0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80072e4:	9202      	str	r2, [sp, #8]
 80072e6:	1b3a      	subs	r2, r7, r4
 80072e8:	3a15      	subs	r2, #21
 80072ea:	f022 0203 	bic.w	r2, r2, #3
 80072ee:	3204      	adds	r2, #4
 80072f0:	f104 0115 	add.w	r1, r4, #21
 80072f4:	428f      	cmp	r7, r1
 80072f6:	bf38      	it	cc
 80072f8:	2204      	movcc	r2, #4
 80072fa:	9201      	str	r2, [sp, #4]
 80072fc:	9a02      	ldr	r2, [sp, #8]
 80072fe:	9303      	str	r3, [sp, #12]
 8007300:	429a      	cmp	r2, r3
 8007302:	d80c      	bhi.n	800731e <__multiply+0x9e>
 8007304:	2e00      	cmp	r6, #0
 8007306:	dd03      	ble.n	8007310 <__multiply+0x90>
 8007308:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800730c:	2b00      	cmp	r3, #0
 800730e:	d05a      	beq.n	80073c6 <__multiply+0x146>
 8007310:	6106      	str	r6, [r0, #16]
 8007312:	b005      	add	sp, #20
 8007314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007318:	f843 2b04 	str.w	r2, [r3], #4
 800731c:	e7d8      	b.n	80072d0 <__multiply+0x50>
 800731e:	f8b3 a000 	ldrh.w	sl, [r3]
 8007322:	f1ba 0f00 	cmp.w	sl, #0
 8007326:	d024      	beq.n	8007372 <__multiply+0xf2>
 8007328:	f104 0e14 	add.w	lr, r4, #20
 800732c:	46a9      	mov	r9, r5
 800732e:	f04f 0c00 	mov.w	ip, #0
 8007332:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007336:	f8d9 1000 	ldr.w	r1, [r9]
 800733a:	fa1f fb82 	uxth.w	fp, r2
 800733e:	b289      	uxth	r1, r1
 8007340:	fb0a 110b 	mla	r1, sl, fp, r1
 8007344:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007348:	f8d9 2000 	ldr.w	r2, [r9]
 800734c:	4461      	add	r1, ip
 800734e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007352:	fb0a c20b 	mla	r2, sl, fp, ip
 8007356:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800735a:	b289      	uxth	r1, r1
 800735c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007360:	4577      	cmp	r7, lr
 8007362:	f849 1b04 	str.w	r1, [r9], #4
 8007366:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800736a:	d8e2      	bhi.n	8007332 <__multiply+0xb2>
 800736c:	9a01      	ldr	r2, [sp, #4]
 800736e:	f845 c002 	str.w	ip, [r5, r2]
 8007372:	9a03      	ldr	r2, [sp, #12]
 8007374:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007378:	3304      	adds	r3, #4
 800737a:	f1b9 0f00 	cmp.w	r9, #0
 800737e:	d020      	beq.n	80073c2 <__multiply+0x142>
 8007380:	6829      	ldr	r1, [r5, #0]
 8007382:	f104 0c14 	add.w	ip, r4, #20
 8007386:	46ae      	mov	lr, r5
 8007388:	f04f 0a00 	mov.w	sl, #0
 800738c:	f8bc b000 	ldrh.w	fp, [ip]
 8007390:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007394:	fb09 220b 	mla	r2, r9, fp, r2
 8007398:	4492      	add	sl, r2
 800739a:	b289      	uxth	r1, r1
 800739c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80073a0:	f84e 1b04 	str.w	r1, [lr], #4
 80073a4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80073a8:	f8be 1000 	ldrh.w	r1, [lr]
 80073ac:	0c12      	lsrs	r2, r2, #16
 80073ae:	fb09 1102 	mla	r1, r9, r2, r1
 80073b2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80073b6:	4567      	cmp	r7, ip
 80073b8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80073bc:	d8e6      	bhi.n	800738c <__multiply+0x10c>
 80073be:	9a01      	ldr	r2, [sp, #4]
 80073c0:	50a9      	str	r1, [r5, r2]
 80073c2:	3504      	adds	r5, #4
 80073c4:	e79a      	b.n	80072fc <__multiply+0x7c>
 80073c6:	3e01      	subs	r6, #1
 80073c8:	e79c      	b.n	8007304 <__multiply+0x84>
 80073ca:	bf00      	nop
 80073cc:	0800896f 	.word	0x0800896f
 80073d0:	08008980 	.word	0x08008980

080073d4 <__pow5mult>:
 80073d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073d8:	4615      	mov	r5, r2
 80073da:	f012 0203 	ands.w	r2, r2, #3
 80073de:	4606      	mov	r6, r0
 80073e0:	460f      	mov	r7, r1
 80073e2:	d007      	beq.n	80073f4 <__pow5mult+0x20>
 80073e4:	4c25      	ldr	r4, [pc, #148]	; (800747c <__pow5mult+0xa8>)
 80073e6:	3a01      	subs	r2, #1
 80073e8:	2300      	movs	r3, #0
 80073ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80073ee:	f7ff fe9b 	bl	8007128 <__multadd>
 80073f2:	4607      	mov	r7, r0
 80073f4:	10ad      	asrs	r5, r5, #2
 80073f6:	d03d      	beq.n	8007474 <__pow5mult+0xa0>
 80073f8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80073fa:	b97c      	cbnz	r4, 800741c <__pow5mult+0x48>
 80073fc:	2010      	movs	r0, #16
 80073fe:	f7ff fe29 	bl	8007054 <malloc>
 8007402:	4602      	mov	r2, r0
 8007404:	6270      	str	r0, [r6, #36]	; 0x24
 8007406:	b928      	cbnz	r0, 8007414 <__pow5mult+0x40>
 8007408:	4b1d      	ldr	r3, [pc, #116]	; (8007480 <__pow5mult+0xac>)
 800740a:	481e      	ldr	r0, [pc, #120]	; (8007484 <__pow5mult+0xb0>)
 800740c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007410:	f000 fc0e 	bl	8007c30 <__assert_func>
 8007414:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007418:	6004      	str	r4, [r0, #0]
 800741a:	60c4      	str	r4, [r0, #12]
 800741c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007420:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007424:	b94c      	cbnz	r4, 800743a <__pow5mult+0x66>
 8007426:	f240 2171 	movw	r1, #625	; 0x271
 800742a:	4630      	mov	r0, r6
 800742c:	f7ff ff12 	bl	8007254 <__i2b>
 8007430:	2300      	movs	r3, #0
 8007432:	f8c8 0008 	str.w	r0, [r8, #8]
 8007436:	4604      	mov	r4, r0
 8007438:	6003      	str	r3, [r0, #0]
 800743a:	f04f 0900 	mov.w	r9, #0
 800743e:	07eb      	lsls	r3, r5, #31
 8007440:	d50a      	bpl.n	8007458 <__pow5mult+0x84>
 8007442:	4639      	mov	r1, r7
 8007444:	4622      	mov	r2, r4
 8007446:	4630      	mov	r0, r6
 8007448:	f7ff ff1a 	bl	8007280 <__multiply>
 800744c:	4639      	mov	r1, r7
 800744e:	4680      	mov	r8, r0
 8007450:	4630      	mov	r0, r6
 8007452:	f7ff fe47 	bl	80070e4 <_Bfree>
 8007456:	4647      	mov	r7, r8
 8007458:	106d      	asrs	r5, r5, #1
 800745a:	d00b      	beq.n	8007474 <__pow5mult+0xa0>
 800745c:	6820      	ldr	r0, [r4, #0]
 800745e:	b938      	cbnz	r0, 8007470 <__pow5mult+0x9c>
 8007460:	4622      	mov	r2, r4
 8007462:	4621      	mov	r1, r4
 8007464:	4630      	mov	r0, r6
 8007466:	f7ff ff0b 	bl	8007280 <__multiply>
 800746a:	6020      	str	r0, [r4, #0]
 800746c:	f8c0 9000 	str.w	r9, [r0]
 8007470:	4604      	mov	r4, r0
 8007472:	e7e4      	b.n	800743e <__pow5mult+0x6a>
 8007474:	4638      	mov	r0, r7
 8007476:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800747a:	bf00      	nop
 800747c:	08008ad0 	.word	0x08008ad0
 8007480:	080088fd 	.word	0x080088fd
 8007484:	08008980 	.word	0x08008980

08007488 <__lshift>:
 8007488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800748c:	460c      	mov	r4, r1
 800748e:	6849      	ldr	r1, [r1, #4]
 8007490:	6923      	ldr	r3, [r4, #16]
 8007492:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007496:	68a3      	ldr	r3, [r4, #8]
 8007498:	4607      	mov	r7, r0
 800749a:	4691      	mov	r9, r2
 800749c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80074a0:	f108 0601 	add.w	r6, r8, #1
 80074a4:	42b3      	cmp	r3, r6
 80074a6:	db0b      	blt.n	80074c0 <__lshift+0x38>
 80074a8:	4638      	mov	r0, r7
 80074aa:	f7ff fddb 	bl	8007064 <_Balloc>
 80074ae:	4605      	mov	r5, r0
 80074b0:	b948      	cbnz	r0, 80074c6 <__lshift+0x3e>
 80074b2:	4602      	mov	r2, r0
 80074b4:	4b2a      	ldr	r3, [pc, #168]	; (8007560 <__lshift+0xd8>)
 80074b6:	482b      	ldr	r0, [pc, #172]	; (8007564 <__lshift+0xdc>)
 80074b8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80074bc:	f000 fbb8 	bl	8007c30 <__assert_func>
 80074c0:	3101      	adds	r1, #1
 80074c2:	005b      	lsls	r3, r3, #1
 80074c4:	e7ee      	b.n	80074a4 <__lshift+0x1c>
 80074c6:	2300      	movs	r3, #0
 80074c8:	f100 0114 	add.w	r1, r0, #20
 80074cc:	f100 0210 	add.w	r2, r0, #16
 80074d0:	4618      	mov	r0, r3
 80074d2:	4553      	cmp	r3, sl
 80074d4:	db37      	blt.n	8007546 <__lshift+0xbe>
 80074d6:	6920      	ldr	r0, [r4, #16]
 80074d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80074dc:	f104 0314 	add.w	r3, r4, #20
 80074e0:	f019 091f 	ands.w	r9, r9, #31
 80074e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80074e8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80074ec:	d02f      	beq.n	800754e <__lshift+0xc6>
 80074ee:	f1c9 0e20 	rsb	lr, r9, #32
 80074f2:	468a      	mov	sl, r1
 80074f4:	f04f 0c00 	mov.w	ip, #0
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	fa02 f209 	lsl.w	r2, r2, r9
 80074fe:	ea42 020c 	orr.w	r2, r2, ip
 8007502:	f84a 2b04 	str.w	r2, [sl], #4
 8007506:	f853 2b04 	ldr.w	r2, [r3], #4
 800750a:	4298      	cmp	r0, r3
 800750c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007510:	d8f2      	bhi.n	80074f8 <__lshift+0x70>
 8007512:	1b03      	subs	r3, r0, r4
 8007514:	3b15      	subs	r3, #21
 8007516:	f023 0303 	bic.w	r3, r3, #3
 800751a:	3304      	adds	r3, #4
 800751c:	f104 0215 	add.w	r2, r4, #21
 8007520:	4290      	cmp	r0, r2
 8007522:	bf38      	it	cc
 8007524:	2304      	movcc	r3, #4
 8007526:	f841 c003 	str.w	ip, [r1, r3]
 800752a:	f1bc 0f00 	cmp.w	ip, #0
 800752e:	d001      	beq.n	8007534 <__lshift+0xac>
 8007530:	f108 0602 	add.w	r6, r8, #2
 8007534:	3e01      	subs	r6, #1
 8007536:	4638      	mov	r0, r7
 8007538:	612e      	str	r6, [r5, #16]
 800753a:	4621      	mov	r1, r4
 800753c:	f7ff fdd2 	bl	80070e4 <_Bfree>
 8007540:	4628      	mov	r0, r5
 8007542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007546:	f842 0f04 	str.w	r0, [r2, #4]!
 800754a:	3301      	adds	r3, #1
 800754c:	e7c1      	b.n	80074d2 <__lshift+0x4a>
 800754e:	3904      	subs	r1, #4
 8007550:	f853 2b04 	ldr.w	r2, [r3], #4
 8007554:	f841 2f04 	str.w	r2, [r1, #4]!
 8007558:	4298      	cmp	r0, r3
 800755a:	d8f9      	bhi.n	8007550 <__lshift+0xc8>
 800755c:	e7ea      	b.n	8007534 <__lshift+0xac>
 800755e:	bf00      	nop
 8007560:	0800896f 	.word	0x0800896f
 8007564:	08008980 	.word	0x08008980

08007568 <__mcmp>:
 8007568:	b530      	push	{r4, r5, lr}
 800756a:	6902      	ldr	r2, [r0, #16]
 800756c:	690c      	ldr	r4, [r1, #16]
 800756e:	1b12      	subs	r2, r2, r4
 8007570:	d10e      	bne.n	8007590 <__mcmp+0x28>
 8007572:	f100 0314 	add.w	r3, r0, #20
 8007576:	3114      	adds	r1, #20
 8007578:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800757c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007580:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007584:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007588:	42a5      	cmp	r5, r4
 800758a:	d003      	beq.n	8007594 <__mcmp+0x2c>
 800758c:	d305      	bcc.n	800759a <__mcmp+0x32>
 800758e:	2201      	movs	r2, #1
 8007590:	4610      	mov	r0, r2
 8007592:	bd30      	pop	{r4, r5, pc}
 8007594:	4283      	cmp	r3, r0
 8007596:	d3f3      	bcc.n	8007580 <__mcmp+0x18>
 8007598:	e7fa      	b.n	8007590 <__mcmp+0x28>
 800759a:	f04f 32ff 	mov.w	r2, #4294967295
 800759e:	e7f7      	b.n	8007590 <__mcmp+0x28>

080075a0 <__mdiff>:
 80075a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075a4:	460c      	mov	r4, r1
 80075a6:	4606      	mov	r6, r0
 80075a8:	4611      	mov	r1, r2
 80075aa:	4620      	mov	r0, r4
 80075ac:	4690      	mov	r8, r2
 80075ae:	f7ff ffdb 	bl	8007568 <__mcmp>
 80075b2:	1e05      	subs	r5, r0, #0
 80075b4:	d110      	bne.n	80075d8 <__mdiff+0x38>
 80075b6:	4629      	mov	r1, r5
 80075b8:	4630      	mov	r0, r6
 80075ba:	f7ff fd53 	bl	8007064 <_Balloc>
 80075be:	b930      	cbnz	r0, 80075ce <__mdiff+0x2e>
 80075c0:	4b3a      	ldr	r3, [pc, #232]	; (80076ac <__mdiff+0x10c>)
 80075c2:	4602      	mov	r2, r0
 80075c4:	f240 2132 	movw	r1, #562	; 0x232
 80075c8:	4839      	ldr	r0, [pc, #228]	; (80076b0 <__mdiff+0x110>)
 80075ca:	f000 fb31 	bl	8007c30 <__assert_func>
 80075ce:	2301      	movs	r3, #1
 80075d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80075d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075d8:	bfa4      	itt	ge
 80075da:	4643      	movge	r3, r8
 80075dc:	46a0      	movge	r8, r4
 80075de:	4630      	mov	r0, r6
 80075e0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80075e4:	bfa6      	itte	ge
 80075e6:	461c      	movge	r4, r3
 80075e8:	2500      	movge	r5, #0
 80075ea:	2501      	movlt	r5, #1
 80075ec:	f7ff fd3a 	bl	8007064 <_Balloc>
 80075f0:	b920      	cbnz	r0, 80075fc <__mdiff+0x5c>
 80075f2:	4b2e      	ldr	r3, [pc, #184]	; (80076ac <__mdiff+0x10c>)
 80075f4:	4602      	mov	r2, r0
 80075f6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80075fa:	e7e5      	b.n	80075c8 <__mdiff+0x28>
 80075fc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007600:	6926      	ldr	r6, [r4, #16]
 8007602:	60c5      	str	r5, [r0, #12]
 8007604:	f104 0914 	add.w	r9, r4, #20
 8007608:	f108 0514 	add.w	r5, r8, #20
 800760c:	f100 0e14 	add.w	lr, r0, #20
 8007610:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007614:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007618:	f108 0210 	add.w	r2, r8, #16
 800761c:	46f2      	mov	sl, lr
 800761e:	2100      	movs	r1, #0
 8007620:	f859 3b04 	ldr.w	r3, [r9], #4
 8007624:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007628:	fa1f f883 	uxth.w	r8, r3
 800762c:	fa11 f18b 	uxtah	r1, r1, fp
 8007630:	0c1b      	lsrs	r3, r3, #16
 8007632:	eba1 0808 	sub.w	r8, r1, r8
 8007636:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800763a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800763e:	fa1f f888 	uxth.w	r8, r8
 8007642:	1419      	asrs	r1, r3, #16
 8007644:	454e      	cmp	r6, r9
 8007646:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800764a:	f84a 3b04 	str.w	r3, [sl], #4
 800764e:	d8e7      	bhi.n	8007620 <__mdiff+0x80>
 8007650:	1b33      	subs	r3, r6, r4
 8007652:	3b15      	subs	r3, #21
 8007654:	f023 0303 	bic.w	r3, r3, #3
 8007658:	3304      	adds	r3, #4
 800765a:	3415      	adds	r4, #21
 800765c:	42a6      	cmp	r6, r4
 800765e:	bf38      	it	cc
 8007660:	2304      	movcc	r3, #4
 8007662:	441d      	add	r5, r3
 8007664:	4473      	add	r3, lr
 8007666:	469e      	mov	lr, r3
 8007668:	462e      	mov	r6, r5
 800766a:	4566      	cmp	r6, ip
 800766c:	d30e      	bcc.n	800768c <__mdiff+0xec>
 800766e:	f10c 0203 	add.w	r2, ip, #3
 8007672:	1b52      	subs	r2, r2, r5
 8007674:	f022 0203 	bic.w	r2, r2, #3
 8007678:	3d03      	subs	r5, #3
 800767a:	45ac      	cmp	ip, r5
 800767c:	bf38      	it	cc
 800767e:	2200      	movcc	r2, #0
 8007680:	441a      	add	r2, r3
 8007682:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007686:	b17b      	cbz	r3, 80076a8 <__mdiff+0x108>
 8007688:	6107      	str	r7, [r0, #16]
 800768a:	e7a3      	b.n	80075d4 <__mdiff+0x34>
 800768c:	f856 8b04 	ldr.w	r8, [r6], #4
 8007690:	fa11 f288 	uxtah	r2, r1, r8
 8007694:	1414      	asrs	r4, r2, #16
 8007696:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800769a:	b292      	uxth	r2, r2
 800769c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80076a0:	f84e 2b04 	str.w	r2, [lr], #4
 80076a4:	1421      	asrs	r1, r4, #16
 80076a6:	e7e0      	b.n	800766a <__mdiff+0xca>
 80076a8:	3f01      	subs	r7, #1
 80076aa:	e7ea      	b.n	8007682 <__mdiff+0xe2>
 80076ac:	0800896f 	.word	0x0800896f
 80076b0:	08008980 	.word	0x08008980

080076b4 <__d2b>:
 80076b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80076b8:	4689      	mov	r9, r1
 80076ba:	2101      	movs	r1, #1
 80076bc:	ec57 6b10 	vmov	r6, r7, d0
 80076c0:	4690      	mov	r8, r2
 80076c2:	f7ff fccf 	bl	8007064 <_Balloc>
 80076c6:	4604      	mov	r4, r0
 80076c8:	b930      	cbnz	r0, 80076d8 <__d2b+0x24>
 80076ca:	4602      	mov	r2, r0
 80076cc:	4b25      	ldr	r3, [pc, #148]	; (8007764 <__d2b+0xb0>)
 80076ce:	4826      	ldr	r0, [pc, #152]	; (8007768 <__d2b+0xb4>)
 80076d0:	f240 310a 	movw	r1, #778	; 0x30a
 80076d4:	f000 faac 	bl	8007c30 <__assert_func>
 80076d8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80076dc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80076e0:	bb35      	cbnz	r5, 8007730 <__d2b+0x7c>
 80076e2:	2e00      	cmp	r6, #0
 80076e4:	9301      	str	r3, [sp, #4]
 80076e6:	d028      	beq.n	800773a <__d2b+0x86>
 80076e8:	4668      	mov	r0, sp
 80076ea:	9600      	str	r6, [sp, #0]
 80076ec:	f7ff fd82 	bl	80071f4 <__lo0bits>
 80076f0:	9900      	ldr	r1, [sp, #0]
 80076f2:	b300      	cbz	r0, 8007736 <__d2b+0x82>
 80076f4:	9a01      	ldr	r2, [sp, #4]
 80076f6:	f1c0 0320 	rsb	r3, r0, #32
 80076fa:	fa02 f303 	lsl.w	r3, r2, r3
 80076fe:	430b      	orrs	r3, r1
 8007700:	40c2      	lsrs	r2, r0
 8007702:	6163      	str	r3, [r4, #20]
 8007704:	9201      	str	r2, [sp, #4]
 8007706:	9b01      	ldr	r3, [sp, #4]
 8007708:	61a3      	str	r3, [r4, #24]
 800770a:	2b00      	cmp	r3, #0
 800770c:	bf14      	ite	ne
 800770e:	2202      	movne	r2, #2
 8007710:	2201      	moveq	r2, #1
 8007712:	6122      	str	r2, [r4, #16]
 8007714:	b1d5      	cbz	r5, 800774c <__d2b+0x98>
 8007716:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800771a:	4405      	add	r5, r0
 800771c:	f8c9 5000 	str.w	r5, [r9]
 8007720:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007724:	f8c8 0000 	str.w	r0, [r8]
 8007728:	4620      	mov	r0, r4
 800772a:	b003      	add	sp, #12
 800772c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007730:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007734:	e7d5      	b.n	80076e2 <__d2b+0x2e>
 8007736:	6161      	str	r1, [r4, #20]
 8007738:	e7e5      	b.n	8007706 <__d2b+0x52>
 800773a:	a801      	add	r0, sp, #4
 800773c:	f7ff fd5a 	bl	80071f4 <__lo0bits>
 8007740:	9b01      	ldr	r3, [sp, #4]
 8007742:	6163      	str	r3, [r4, #20]
 8007744:	2201      	movs	r2, #1
 8007746:	6122      	str	r2, [r4, #16]
 8007748:	3020      	adds	r0, #32
 800774a:	e7e3      	b.n	8007714 <__d2b+0x60>
 800774c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007750:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007754:	f8c9 0000 	str.w	r0, [r9]
 8007758:	6918      	ldr	r0, [r3, #16]
 800775a:	f7ff fd2b 	bl	80071b4 <__hi0bits>
 800775e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007762:	e7df      	b.n	8007724 <__d2b+0x70>
 8007764:	0800896f 	.word	0x0800896f
 8007768:	08008980 	.word	0x08008980

0800776c <_calloc_r>:
 800776c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800776e:	fba1 2402 	umull	r2, r4, r1, r2
 8007772:	b94c      	cbnz	r4, 8007788 <_calloc_r+0x1c>
 8007774:	4611      	mov	r1, r2
 8007776:	9201      	str	r2, [sp, #4]
 8007778:	f000 f87a 	bl	8007870 <_malloc_r>
 800777c:	9a01      	ldr	r2, [sp, #4]
 800777e:	4605      	mov	r5, r0
 8007780:	b930      	cbnz	r0, 8007790 <_calloc_r+0x24>
 8007782:	4628      	mov	r0, r5
 8007784:	b003      	add	sp, #12
 8007786:	bd30      	pop	{r4, r5, pc}
 8007788:	220c      	movs	r2, #12
 800778a:	6002      	str	r2, [r0, #0]
 800778c:	2500      	movs	r5, #0
 800778e:	e7f8      	b.n	8007782 <_calloc_r+0x16>
 8007790:	4621      	mov	r1, r4
 8007792:	f7fe f94d 	bl	8005a30 <memset>
 8007796:	e7f4      	b.n	8007782 <_calloc_r+0x16>

08007798 <_free_r>:
 8007798:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800779a:	2900      	cmp	r1, #0
 800779c:	d044      	beq.n	8007828 <_free_r+0x90>
 800779e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077a2:	9001      	str	r0, [sp, #4]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	f1a1 0404 	sub.w	r4, r1, #4
 80077aa:	bfb8      	it	lt
 80077ac:	18e4      	addlt	r4, r4, r3
 80077ae:	f000 fa9b 	bl	8007ce8 <__malloc_lock>
 80077b2:	4a1e      	ldr	r2, [pc, #120]	; (800782c <_free_r+0x94>)
 80077b4:	9801      	ldr	r0, [sp, #4]
 80077b6:	6813      	ldr	r3, [r2, #0]
 80077b8:	b933      	cbnz	r3, 80077c8 <_free_r+0x30>
 80077ba:	6063      	str	r3, [r4, #4]
 80077bc:	6014      	str	r4, [r2, #0]
 80077be:	b003      	add	sp, #12
 80077c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80077c4:	f000 ba96 	b.w	8007cf4 <__malloc_unlock>
 80077c8:	42a3      	cmp	r3, r4
 80077ca:	d908      	bls.n	80077de <_free_r+0x46>
 80077cc:	6825      	ldr	r5, [r4, #0]
 80077ce:	1961      	adds	r1, r4, r5
 80077d0:	428b      	cmp	r3, r1
 80077d2:	bf01      	itttt	eq
 80077d4:	6819      	ldreq	r1, [r3, #0]
 80077d6:	685b      	ldreq	r3, [r3, #4]
 80077d8:	1949      	addeq	r1, r1, r5
 80077da:	6021      	streq	r1, [r4, #0]
 80077dc:	e7ed      	b.n	80077ba <_free_r+0x22>
 80077de:	461a      	mov	r2, r3
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	b10b      	cbz	r3, 80077e8 <_free_r+0x50>
 80077e4:	42a3      	cmp	r3, r4
 80077e6:	d9fa      	bls.n	80077de <_free_r+0x46>
 80077e8:	6811      	ldr	r1, [r2, #0]
 80077ea:	1855      	adds	r5, r2, r1
 80077ec:	42a5      	cmp	r5, r4
 80077ee:	d10b      	bne.n	8007808 <_free_r+0x70>
 80077f0:	6824      	ldr	r4, [r4, #0]
 80077f2:	4421      	add	r1, r4
 80077f4:	1854      	adds	r4, r2, r1
 80077f6:	42a3      	cmp	r3, r4
 80077f8:	6011      	str	r1, [r2, #0]
 80077fa:	d1e0      	bne.n	80077be <_free_r+0x26>
 80077fc:	681c      	ldr	r4, [r3, #0]
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	6053      	str	r3, [r2, #4]
 8007802:	4421      	add	r1, r4
 8007804:	6011      	str	r1, [r2, #0]
 8007806:	e7da      	b.n	80077be <_free_r+0x26>
 8007808:	d902      	bls.n	8007810 <_free_r+0x78>
 800780a:	230c      	movs	r3, #12
 800780c:	6003      	str	r3, [r0, #0]
 800780e:	e7d6      	b.n	80077be <_free_r+0x26>
 8007810:	6825      	ldr	r5, [r4, #0]
 8007812:	1961      	adds	r1, r4, r5
 8007814:	428b      	cmp	r3, r1
 8007816:	bf04      	itt	eq
 8007818:	6819      	ldreq	r1, [r3, #0]
 800781a:	685b      	ldreq	r3, [r3, #4]
 800781c:	6063      	str	r3, [r4, #4]
 800781e:	bf04      	itt	eq
 8007820:	1949      	addeq	r1, r1, r5
 8007822:	6021      	streq	r1, [r4, #0]
 8007824:	6054      	str	r4, [r2, #4]
 8007826:	e7ca      	b.n	80077be <_free_r+0x26>
 8007828:	b003      	add	sp, #12
 800782a:	bd30      	pop	{r4, r5, pc}
 800782c:	20000e34 	.word	0x20000e34

08007830 <sbrk_aligned>:
 8007830:	b570      	push	{r4, r5, r6, lr}
 8007832:	4e0e      	ldr	r6, [pc, #56]	; (800786c <sbrk_aligned+0x3c>)
 8007834:	460c      	mov	r4, r1
 8007836:	6831      	ldr	r1, [r6, #0]
 8007838:	4605      	mov	r5, r0
 800783a:	b911      	cbnz	r1, 8007842 <sbrk_aligned+0x12>
 800783c:	f000 f9e8 	bl	8007c10 <_sbrk_r>
 8007840:	6030      	str	r0, [r6, #0]
 8007842:	4621      	mov	r1, r4
 8007844:	4628      	mov	r0, r5
 8007846:	f000 f9e3 	bl	8007c10 <_sbrk_r>
 800784a:	1c43      	adds	r3, r0, #1
 800784c:	d00a      	beq.n	8007864 <sbrk_aligned+0x34>
 800784e:	1cc4      	adds	r4, r0, #3
 8007850:	f024 0403 	bic.w	r4, r4, #3
 8007854:	42a0      	cmp	r0, r4
 8007856:	d007      	beq.n	8007868 <sbrk_aligned+0x38>
 8007858:	1a21      	subs	r1, r4, r0
 800785a:	4628      	mov	r0, r5
 800785c:	f000 f9d8 	bl	8007c10 <_sbrk_r>
 8007860:	3001      	adds	r0, #1
 8007862:	d101      	bne.n	8007868 <sbrk_aligned+0x38>
 8007864:	f04f 34ff 	mov.w	r4, #4294967295
 8007868:	4620      	mov	r0, r4
 800786a:	bd70      	pop	{r4, r5, r6, pc}
 800786c:	20000e38 	.word	0x20000e38

08007870 <_malloc_r>:
 8007870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007874:	1ccd      	adds	r5, r1, #3
 8007876:	f025 0503 	bic.w	r5, r5, #3
 800787a:	3508      	adds	r5, #8
 800787c:	2d0c      	cmp	r5, #12
 800787e:	bf38      	it	cc
 8007880:	250c      	movcc	r5, #12
 8007882:	2d00      	cmp	r5, #0
 8007884:	4607      	mov	r7, r0
 8007886:	db01      	blt.n	800788c <_malloc_r+0x1c>
 8007888:	42a9      	cmp	r1, r5
 800788a:	d905      	bls.n	8007898 <_malloc_r+0x28>
 800788c:	230c      	movs	r3, #12
 800788e:	603b      	str	r3, [r7, #0]
 8007890:	2600      	movs	r6, #0
 8007892:	4630      	mov	r0, r6
 8007894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007898:	4e2e      	ldr	r6, [pc, #184]	; (8007954 <_malloc_r+0xe4>)
 800789a:	f000 fa25 	bl	8007ce8 <__malloc_lock>
 800789e:	6833      	ldr	r3, [r6, #0]
 80078a0:	461c      	mov	r4, r3
 80078a2:	bb34      	cbnz	r4, 80078f2 <_malloc_r+0x82>
 80078a4:	4629      	mov	r1, r5
 80078a6:	4638      	mov	r0, r7
 80078a8:	f7ff ffc2 	bl	8007830 <sbrk_aligned>
 80078ac:	1c43      	adds	r3, r0, #1
 80078ae:	4604      	mov	r4, r0
 80078b0:	d14d      	bne.n	800794e <_malloc_r+0xde>
 80078b2:	6834      	ldr	r4, [r6, #0]
 80078b4:	4626      	mov	r6, r4
 80078b6:	2e00      	cmp	r6, #0
 80078b8:	d140      	bne.n	800793c <_malloc_r+0xcc>
 80078ba:	6823      	ldr	r3, [r4, #0]
 80078bc:	4631      	mov	r1, r6
 80078be:	4638      	mov	r0, r7
 80078c0:	eb04 0803 	add.w	r8, r4, r3
 80078c4:	f000 f9a4 	bl	8007c10 <_sbrk_r>
 80078c8:	4580      	cmp	r8, r0
 80078ca:	d13a      	bne.n	8007942 <_malloc_r+0xd2>
 80078cc:	6821      	ldr	r1, [r4, #0]
 80078ce:	3503      	adds	r5, #3
 80078d0:	1a6d      	subs	r5, r5, r1
 80078d2:	f025 0503 	bic.w	r5, r5, #3
 80078d6:	3508      	adds	r5, #8
 80078d8:	2d0c      	cmp	r5, #12
 80078da:	bf38      	it	cc
 80078dc:	250c      	movcc	r5, #12
 80078de:	4629      	mov	r1, r5
 80078e0:	4638      	mov	r0, r7
 80078e2:	f7ff ffa5 	bl	8007830 <sbrk_aligned>
 80078e6:	3001      	adds	r0, #1
 80078e8:	d02b      	beq.n	8007942 <_malloc_r+0xd2>
 80078ea:	6823      	ldr	r3, [r4, #0]
 80078ec:	442b      	add	r3, r5
 80078ee:	6023      	str	r3, [r4, #0]
 80078f0:	e00e      	b.n	8007910 <_malloc_r+0xa0>
 80078f2:	6822      	ldr	r2, [r4, #0]
 80078f4:	1b52      	subs	r2, r2, r5
 80078f6:	d41e      	bmi.n	8007936 <_malloc_r+0xc6>
 80078f8:	2a0b      	cmp	r2, #11
 80078fa:	d916      	bls.n	800792a <_malloc_r+0xba>
 80078fc:	1961      	adds	r1, r4, r5
 80078fe:	42a3      	cmp	r3, r4
 8007900:	6025      	str	r5, [r4, #0]
 8007902:	bf18      	it	ne
 8007904:	6059      	strne	r1, [r3, #4]
 8007906:	6863      	ldr	r3, [r4, #4]
 8007908:	bf08      	it	eq
 800790a:	6031      	streq	r1, [r6, #0]
 800790c:	5162      	str	r2, [r4, r5]
 800790e:	604b      	str	r3, [r1, #4]
 8007910:	4638      	mov	r0, r7
 8007912:	f104 060b 	add.w	r6, r4, #11
 8007916:	f000 f9ed 	bl	8007cf4 <__malloc_unlock>
 800791a:	f026 0607 	bic.w	r6, r6, #7
 800791e:	1d23      	adds	r3, r4, #4
 8007920:	1af2      	subs	r2, r6, r3
 8007922:	d0b6      	beq.n	8007892 <_malloc_r+0x22>
 8007924:	1b9b      	subs	r3, r3, r6
 8007926:	50a3      	str	r3, [r4, r2]
 8007928:	e7b3      	b.n	8007892 <_malloc_r+0x22>
 800792a:	6862      	ldr	r2, [r4, #4]
 800792c:	42a3      	cmp	r3, r4
 800792e:	bf0c      	ite	eq
 8007930:	6032      	streq	r2, [r6, #0]
 8007932:	605a      	strne	r2, [r3, #4]
 8007934:	e7ec      	b.n	8007910 <_malloc_r+0xa0>
 8007936:	4623      	mov	r3, r4
 8007938:	6864      	ldr	r4, [r4, #4]
 800793a:	e7b2      	b.n	80078a2 <_malloc_r+0x32>
 800793c:	4634      	mov	r4, r6
 800793e:	6876      	ldr	r6, [r6, #4]
 8007940:	e7b9      	b.n	80078b6 <_malloc_r+0x46>
 8007942:	230c      	movs	r3, #12
 8007944:	603b      	str	r3, [r7, #0]
 8007946:	4638      	mov	r0, r7
 8007948:	f000 f9d4 	bl	8007cf4 <__malloc_unlock>
 800794c:	e7a1      	b.n	8007892 <_malloc_r+0x22>
 800794e:	6025      	str	r5, [r4, #0]
 8007950:	e7de      	b.n	8007910 <_malloc_r+0xa0>
 8007952:	bf00      	nop
 8007954:	20000e34 	.word	0x20000e34

08007958 <__ssputs_r>:
 8007958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800795c:	688e      	ldr	r6, [r1, #8]
 800795e:	429e      	cmp	r6, r3
 8007960:	4682      	mov	sl, r0
 8007962:	460c      	mov	r4, r1
 8007964:	4690      	mov	r8, r2
 8007966:	461f      	mov	r7, r3
 8007968:	d838      	bhi.n	80079dc <__ssputs_r+0x84>
 800796a:	898a      	ldrh	r2, [r1, #12]
 800796c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007970:	d032      	beq.n	80079d8 <__ssputs_r+0x80>
 8007972:	6825      	ldr	r5, [r4, #0]
 8007974:	6909      	ldr	r1, [r1, #16]
 8007976:	eba5 0901 	sub.w	r9, r5, r1
 800797a:	6965      	ldr	r5, [r4, #20]
 800797c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007980:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007984:	3301      	adds	r3, #1
 8007986:	444b      	add	r3, r9
 8007988:	106d      	asrs	r5, r5, #1
 800798a:	429d      	cmp	r5, r3
 800798c:	bf38      	it	cc
 800798e:	461d      	movcc	r5, r3
 8007990:	0553      	lsls	r3, r2, #21
 8007992:	d531      	bpl.n	80079f8 <__ssputs_r+0xa0>
 8007994:	4629      	mov	r1, r5
 8007996:	f7ff ff6b 	bl	8007870 <_malloc_r>
 800799a:	4606      	mov	r6, r0
 800799c:	b950      	cbnz	r0, 80079b4 <__ssputs_r+0x5c>
 800799e:	230c      	movs	r3, #12
 80079a0:	f8ca 3000 	str.w	r3, [sl]
 80079a4:	89a3      	ldrh	r3, [r4, #12]
 80079a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079aa:	81a3      	strh	r3, [r4, #12]
 80079ac:	f04f 30ff 	mov.w	r0, #4294967295
 80079b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079b4:	6921      	ldr	r1, [r4, #16]
 80079b6:	464a      	mov	r2, r9
 80079b8:	f7fe f82c 	bl	8005a14 <memcpy>
 80079bc:	89a3      	ldrh	r3, [r4, #12]
 80079be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80079c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079c6:	81a3      	strh	r3, [r4, #12]
 80079c8:	6126      	str	r6, [r4, #16]
 80079ca:	6165      	str	r5, [r4, #20]
 80079cc:	444e      	add	r6, r9
 80079ce:	eba5 0509 	sub.w	r5, r5, r9
 80079d2:	6026      	str	r6, [r4, #0]
 80079d4:	60a5      	str	r5, [r4, #8]
 80079d6:	463e      	mov	r6, r7
 80079d8:	42be      	cmp	r6, r7
 80079da:	d900      	bls.n	80079de <__ssputs_r+0x86>
 80079dc:	463e      	mov	r6, r7
 80079de:	6820      	ldr	r0, [r4, #0]
 80079e0:	4632      	mov	r2, r6
 80079e2:	4641      	mov	r1, r8
 80079e4:	f000 f966 	bl	8007cb4 <memmove>
 80079e8:	68a3      	ldr	r3, [r4, #8]
 80079ea:	1b9b      	subs	r3, r3, r6
 80079ec:	60a3      	str	r3, [r4, #8]
 80079ee:	6823      	ldr	r3, [r4, #0]
 80079f0:	4433      	add	r3, r6
 80079f2:	6023      	str	r3, [r4, #0]
 80079f4:	2000      	movs	r0, #0
 80079f6:	e7db      	b.n	80079b0 <__ssputs_r+0x58>
 80079f8:	462a      	mov	r2, r5
 80079fa:	f000 f981 	bl	8007d00 <_realloc_r>
 80079fe:	4606      	mov	r6, r0
 8007a00:	2800      	cmp	r0, #0
 8007a02:	d1e1      	bne.n	80079c8 <__ssputs_r+0x70>
 8007a04:	6921      	ldr	r1, [r4, #16]
 8007a06:	4650      	mov	r0, sl
 8007a08:	f7ff fec6 	bl	8007798 <_free_r>
 8007a0c:	e7c7      	b.n	800799e <__ssputs_r+0x46>
	...

08007a10 <_svfiprintf_r>:
 8007a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a14:	4698      	mov	r8, r3
 8007a16:	898b      	ldrh	r3, [r1, #12]
 8007a18:	061b      	lsls	r3, r3, #24
 8007a1a:	b09d      	sub	sp, #116	; 0x74
 8007a1c:	4607      	mov	r7, r0
 8007a1e:	460d      	mov	r5, r1
 8007a20:	4614      	mov	r4, r2
 8007a22:	d50e      	bpl.n	8007a42 <_svfiprintf_r+0x32>
 8007a24:	690b      	ldr	r3, [r1, #16]
 8007a26:	b963      	cbnz	r3, 8007a42 <_svfiprintf_r+0x32>
 8007a28:	2140      	movs	r1, #64	; 0x40
 8007a2a:	f7ff ff21 	bl	8007870 <_malloc_r>
 8007a2e:	6028      	str	r0, [r5, #0]
 8007a30:	6128      	str	r0, [r5, #16]
 8007a32:	b920      	cbnz	r0, 8007a3e <_svfiprintf_r+0x2e>
 8007a34:	230c      	movs	r3, #12
 8007a36:	603b      	str	r3, [r7, #0]
 8007a38:	f04f 30ff 	mov.w	r0, #4294967295
 8007a3c:	e0d1      	b.n	8007be2 <_svfiprintf_r+0x1d2>
 8007a3e:	2340      	movs	r3, #64	; 0x40
 8007a40:	616b      	str	r3, [r5, #20]
 8007a42:	2300      	movs	r3, #0
 8007a44:	9309      	str	r3, [sp, #36]	; 0x24
 8007a46:	2320      	movs	r3, #32
 8007a48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a50:	2330      	movs	r3, #48	; 0x30
 8007a52:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007bfc <_svfiprintf_r+0x1ec>
 8007a56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a5a:	f04f 0901 	mov.w	r9, #1
 8007a5e:	4623      	mov	r3, r4
 8007a60:	469a      	mov	sl, r3
 8007a62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a66:	b10a      	cbz	r2, 8007a6c <_svfiprintf_r+0x5c>
 8007a68:	2a25      	cmp	r2, #37	; 0x25
 8007a6a:	d1f9      	bne.n	8007a60 <_svfiprintf_r+0x50>
 8007a6c:	ebba 0b04 	subs.w	fp, sl, r4
 8007a70:	d00b      	beq.n	8007a8a <_svfiprintf_r+0x7a>
 8007a72:	465b      	mov	r3, fp
 8007a74:	4622      	mov	r2, r4
 8007a76:	4629      	mov	r1, r5
 8007a78:	4638      	mov	r0, r7
 8007a7a:	f7ff ff6d 	bl	8007958 <__ssputs_r>
 8007a7e:	3001      	adds	r0, #1
 8007a80:	f000 80aa 	beq.w	8007bd8 <_svfiprintf_r+0x1c8>
 8007a84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a86:	445a      	add	r2, fp
 8007a88:	9209      	str	r2, [sp, #36]	; 0x24
 8007a8a:	f89a 3000 	ldrb.w	r3, [sl]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	f000 80a2 	beq.w	8007bd8 <_svfiprintf_r+0x1c8>
 8007a94:	2300      	movs	r3, #0
 8007a96:	f04f 32ff 	mov.w	r2, #4294967295
 8007a9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a9e:	f10a 0a01 	add.w	sl, sl, #1
 8007aa2:	9304      	str	r3, [sp, #16]
 8007aa4:	9307      	str	r3, [sp, #28]
 8007aa6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007aaa:	931a      	str	r3, [sp, #104]	; 0x68
 8007aac:	4654      	mov	r4, sl
 8007aae:	2205      	movs	r2, #5
 8007ab0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ab4:	4851      	ldr	r0, [pc, #324]	; (8007bfc <_svfiprintf_r+0x1ec>)
 8007ab6:	f7f8 fbb3 	bl	8000220 <memchr>
 8007aba:	9a04      	ldr	r2, [sp, #16]
 8007abc:	b9d8      	cbnz	r0, 8007af6 <_svfiprintf_r+0xe6>
 8007abe:	06d0      	lsls	r0, r2, #27
 8007ac0:	bf44      	itt	mi
 8007ac2:	2320      	movmi	r3, #32
 8007ac4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ac8:	0711      	lsls	r1, r2, #28
 8007aca:	bf44      	itt	mi
 8007acc:	232b      	movmi	r3, #43	; 0x2b
 8007ace:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ad2:	f89a 3000 	ldrb.w	r3, [sl]
 8007ad6:	2b2a      	cmp	r3, #42	; 0x2a
 8007ad8:	d015      	beq.n	8007b06 <_svfiprintf_r+0xf6>
 8007ada:	9a07      	ldr	r2, [sp, #28]
 8007adc:	4654      	mov	r4, sl
 8007ade:	2000      	movs	r0, #0
 8007ae0:	f04f 0c0a 	mov.w	ip, #10
 8007ae4:	4621      	mov	r1, r4
 8007ae6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007aea:	3b30      	subs	r3, #48	; 0x30
 8007aec:	2b09      	cmp	r3, #9
 8007aee:	d94e      	bls.n	8007b8e <_svfiprintf_r+0x17e>
 8007af0:	b1b0      	cbz	r0, 8007b20 <_svfiprintf_r+0x110>
 8007af2:	9207      	str	r2, [sp, #28]
 8007af4:	e014      	b.n	8007b20 <_svfiprintf_r+0x110>
 8007af6:	eba0 0308 	sub.w	r3, r0, r8
 8007afa:	fa09 f303 	lsl.w	r3, r9, r3
 8007afe:	4313      	orrs	r3, r2
 8007b00:	9304      	str	r3, [sp, #16]
 8007b02:	46a2      	mov	sl, r4
 8007b04:	e7d2      	b.n	8007aac <_svfiprintf_r+0x9c>
 8007b06:	9b03      	ldr	r3, [sp, #12]
 8007b08:	1d19      	adds	r1, r3, #4
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	9103      	str	r1, [sp, #12]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	bfbb      	ittet	lt
 8007b12:	425b      	neglt	r3, r3
 8007b14:	f042 0202 	orrlt.w	r2, r2, #2
 8007b18:	9307      	strge	r3, [sp, #28]
 8007b1a:	9307      	strlt	r3, [sp, #28]
 8007b1c:	bfb8      	it	lt
 8007b1e:	9204      	strlt	r2, [sp, #16]
 8007b20:	7823      	ldrb	r3, [r4, #0]
 8007b22:	2b2e      	cmp	r3, #46	; 0x2e
 8007b24:	d10c      	bne.n	8007b40 <_svfiprintf_r+0x130>
 8007b26:	7863      	ldrb	r3, [r4, #1]
 8007b28:	2b2a      	cmp	r3, #42	; 0x2a
 8007b2a:	d135      	bne.n	8007b98 <_svfiprintf_r+0x188>
 8007b2c:	9b03      	ldr	r3, [sp, #12]
 8007b2e:	1d1a      	adds	r2, r3, #4
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	9203      	str	r2, [sp, #12]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	bfb8      	it	lt
 8007b38:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b3c:	3402      	adds	r4, #2
 8007b3e:	9305      	str	r3, [sp, #20]
 8007b40:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007c0c <_svfiprintf_r+0x1fc>
 8007b44:	7821      	ldrb	r1, [r4, #0]
 8007b46:	2203      	movs	r2, #3
 8007b48:	4650      	mov	r0, sl
 8007b4a:	f7f8 fb69 	bl	8000220 <memchr>
 8007b4e:	b140      	cbz	r0, 8007b62 <_svfiprintf_r+0x152>
 8007b50:	2340      	movs	r3, #64	; 0x40
 8007b52:	eba0 000a 	sub.w	r0, r0, sl
 8007b56:	fa03 f000 	lsl.w	r0, r3, r0
 8007b5a:	9b04      	ldr	r3, [sp, #16]
 8007b5c:	4303      	orrs	r3, r0
 8007b5e:	3401      	adds	r4, #1
 8007b60:	9304      	str	r3, [sp, #16]
 8007b62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b66:	4826      	ldr	r0, [pc, #152]	; (8007c00 <_svfiprintf_r+0x1f0>)
 8007b68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b6c:	2206      	movs	r2, #6
 8007b6e:	f7f8 fb57 	bl	8000220 <memchr>
 8007b72:	2800      	cmp	r0, #0
 8007b74:	d038      	beq.n	8007be8 <_svfiprintf_r+0x1d8>
 8007b76:	4b23      	ldr	r3, [pc, #140]	; (8007c04 <_svfiprintf_r+0x1f4>)
 8007b78:	bb1b      	cbnz	r3, 8007bc2 <_svfiprintf_r+0x1b2>
 8007b7a:	9b03      	ldr	r3, [sp, #12]
 8007b7c:	3307      	adds	r3, #7
 8007b7e:	f023 0307 	bic.w	r3, r3, #7
 8007b82:	3308      	adds	r3, #8
 8007b84:	9303      	str	r3, [sp, #12]
 8007b86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b88:	4433      	add	r3, r6
 8007b8a:	9309      	str	r3, [sp, #36]	; 0x24
 8007b8c:	e767      	b.n	8007a5e <_svfiprintf_r+0x4e>
 8007b8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b92:	460c      	mov	r4, r1
 8007b94:	2001      	movs	r0, #1
 8007b96:	e7a5      	b.n	8007ae4 <_svfiprintf_r+0xd4>
 8007b98:	2300      	movs	r3, #0
 8007b9a:	3401      	adds	r4, #1
 8007b9c:	9305      	str	r3, [sp, #20]
 8007b9e:	4619      	mov	r1, r3
 8007ba0:	f04f 0c0a 	mov.w	ip, #10
 8007ba4:	4620      	mov	r0, r4
 8007ba6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007baa:	3a30      	subs	r2, #48	; 0x30
 8007bac:	2a09      	cmp	r2, #9
 8007bae:	d903      	bls.n	8007bb8 <_svfiprintf_r+0x1a8>
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d0c5      	beq.n	8007b40 <_svfiprintf_r+0x130>
 8007bb4:	9105      	str	r1, [sp, #20]
 8007bb6:	e7c3      	b.n	8007b40 <_svfiprintf_r+0x130>
 8007bb8:	fb0c 2101 	mla	r1, ip, r1, r2
 8007bbc:	4604      	mov	r4, r0
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	e7f0      	b.n	8007ba4 <_svfiprintf_r+0x194>
 8007bc2:	ab03      	add	r3, sp, #12
 8007bc4:	9300      	str	r3, [sp, #0]
 8007bc6:	462a      	mov	r2, r5
 8007bc8:	4b0f      	ldr	r3, [pc, #60]	; (8007c08 <_svfiprintf_r+0x1f8>)
 8007bca:	a904      	add	r1, sp, #16
 8007bcc:	4638      	mov	r0, r7
 8007bce:	f7fd ffd7 	bl	8005b80 <_printf_float>
 8007bd2:	1c42      	adds	r2, r0, #1
 8007bd4:	4606      	mov	r6, r0
 8007bd6:	d1d6      	bne.n	8007b86 <_svfiprintf_r+0x176>
 8007bd8:	89ab      	ldrh	r3, [r5, #12]
 8007bda:	065b      	lsls	r3, r3, #25
 8007bdc:	f53f af2c 	bmi.w	8007a38 <_svfiprintf_r+0x28>
 8007be0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007be2:	b01d      	add	sp, #116	; 0x74
 8007be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007be8:	ab03      	add	r3, sp, #12
 8007bea:	9300      	str	r3, [sp, #0]
 8007bec:	462a      	mov	r2, r5
 8007bee:	4b06      	ldr	r3, [pc, #24]	; (8007c08 <_svfiprintf_r+0x1f8>)
 8007bf0:	a904      	add	r1, sp, #16
 8007bf2:	4638      	mov	r0, r7
 8007bf4:	f7fe fa68 	bl	80060c8 <_printf_i>
 8007bf8:	e7eb      	b.n	8007bd2 <_svfiprintf_r+0x1c2>
 8007bfa:	bf00      	nop
 8007bfc:	08008adc 	.word	0x08008adc
 8007c00:	08008ae6 	.word	0x08008ae6
 8007c04:	08005b81 	.word	0x08005b81
 8007c08:	08007959 	.word	0x08007959
 8007c0c:	08008ae2 	.word	0x08008ae2

08007c10 <_sbrk_r>:
 8007c10:	b538      	push	{r3, r4, r5, lr}
 8007c12:	4d06      	ldr	r5, [pc, #24]	; (8007c2c <_sbrk_r+0x1c>)
 8007c14:	2300      	movs	r3, #0
 8007c16:	4604      	mov	r4, r0
 8007c18:	4608      	mov	r0, r1
 8007c1a:	602b      	str	r3, [r5, #0]
 8007c1c:	f7fa fa08 	bl	8002030 <_sbrk>
 8007c20:	1c43      	adds	r3, r0, #1
 8007c22:	d102      	bne.n	8007c2a <_sbrk_r+0x1a>
 8007c24:	682b      	ldr	r3, [r5, #0]
 8007c26:	b103      	cbz	r3, 8007c2a <_sbrk_r+0x1a>
 8007c28:	6023      	str	r3, [r4, #0]
 8007c2a:	bd38      	pop	{r3, r4, r5, pc}
 8007c2c:	20000e3c 	.word	0x20000e3c

08007c30 <__assert_func>:
 8007c30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007c32:	4614      	mov	r4, r2
 8007c34:	461a      	mov	r2, r3
 8007c36:	4b09      	ldr	r3, [pc, #36]	; (8007c5c <__assert_func+0x2c>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4605      	mov	r5, r0
 8007c3c:	68d8      	ldr	r0, [r3, #12]
 8007c3e:	b14c      	cbz	r4, 8007c54 <__assert_func+0x24>
 8007c40:	4b07      	ldr	r3, [pc, #28]	; (8007c60 <__assert_func+0x30>)
 8007c42:	9100      	str	r1, [sp, #0]
 8007c44:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007c48:	4906      	ldr	r1, [pc, #24]	; (8007c64 <__assert_func+0x34>)
 8007c4a:	462b      	mov	r3, r5
 8007c4c:	f000 f80e 	bl	8007c6c <fiprintf>
 8007c50:	f000 faac 	bl	80081ac <abort>
 8007c54:	4b04      	ldr	r3, [pc, #16]	; (8007c68 <__assert_func+0x38>)
 8007c56:	461c      	mov	r4, r3
 8007c58:	e7f3      	b.n	8007c42 <__assert_func+0x12>
 8007c5a:	bf00      	nop
 8007c5c:	2000000c 	.word	0x2000000c
 8007c60:	08008aed 	.word	0x08008aed
 8007c64:	08008afa 	.word	0x08008afa
 8007c68:	08008b28 	.word	0x08008b28

08007c6c <fiprintf>:
 8007c6c:	b40e      	push	{r1, r2, r3}
 8007c6e:	b503      	push	{r0, r1, lr}
 8007c70:	4601      	mov	r1, r0
 8007c72:	ab03      	add	r3, sp, #12
 8007c74:	4805      	ldr	r0, [pc, #20]	; (8007c8c <fiprintf+0x20>)
 8007c76:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c7a:	6800      	ldr	r0, [r0, #0]
 8007c7c:	9301      	str	r3, [sp, #4]
 8007c7e:	f000 f897 	bl	8007db0 <_vfiprintf_r>
 8007c82:	b002      	add	sp, #8
 8007c84:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c88:	b003      	add	sp, #12
 8007c8a:	4770      	bx	lr
 8007c8c:	2000000c 	.word	0x2000000c

08007c90 <__ascii_mbtowc>:
 8007c90:	b082      	sub	sp, #8
 8007c92:	b901      	cbnz	r1, 8007c96 <__ascii_mbtowc+0x6>
 8007c94:	a901      	add	r1, sp, #4
 8007c96:	b142      	cbz	r2, 8007caa <__ascii_mbtowc+0x1a>
 8007c98:	b14b      	cbz	r3, 8007cae <__ascii_mbtowc+0x1e>
 8007c9a:	7813      	ldrb	r3, [r2, #0]
 8007c9c:	600b      	str	r3, [r1, #0]
 8007c9e:	7812      	ldrb	r2, [r2, #0]
 8007ca0:	1e10      	subs	r0, r2, #0
 8007ca2:	bf18      	it	ne
 8007ca4:	2001      	movne	r0, #1
 8007ca6:	b002      	add	sp, #8
 8007ca8:	4770      	bx	lr
 8007caa:	4610      	mov	r0, r2
 8007cac:	e7fb      	b.n	8007ca6 <__ascii_mbtowc+0x16>
 8007cae:	f06f 0001 	mvn.w	r0, #1
 8007cb2:	e7f8      	b.n	8007ca6 <__ascii_mbtowc+0x16>

08007cb4 <memmove>:
 8007cb4:	4288      	cmp	r0, r1
 8007cb6:	b510      	push	{r4, lr}
 8007cb8:	eb01 0402 	add.w	r4, r1, r2
 8007cbc:	d902      	bls.n	8007cc4 <memmove+0x10>
 8007cbe:	4284      	cmp	r4, r0
 8007cc0:	4623      	mov	r3, r4
 8007cc2:	d807      	bhi.n	8007cd4 <memmove+0x20>
 8007cc4:	1e43      	subs	r3, r0, #1
 8007cc6:	42a1      	cmp	r1, r4
 8007cc8:	d008      	beq.n	8007cdc <memmove+0x28>
 8007cca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007cce:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007cd2:	e7f8      	b.n	8007cc6 <memmove+0x12>
 8007cd4:	4402      	add	r2, r0
 8007cd6:	4601      	mov	r1, r0
 8007cd8:	428a      	cmp	r2, r1
 8007cda:	d100      	bne.n	8007cde <memmove+0x2a>
 8007cdc:	bd10      	pop	{r4, pc}
 8007cde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007ce2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007ce6:	e7f7      	b.n	8007cd8 <memmove+0x24>

08007ce8 <__malloc_lock>:
 8007ce8:	4801      	ldr	r0, [pc, #4]	; (8007cf0 <__malloc_lock+0x8>)
 8007cea:	f000 bc1f 	b.w	800852c <__retarget_lock_acquire_recursive>
 8007cee:	bf00      	nop
 8007cf0:	20000e40 	.word	0x20000e40

08007cf4 <__malloc_unlock>:
 8007cf4:	4801      	ldr	r0, [pc, #4]	; (8007cfc <__malloc_unlock+0x8>)
 8007cf6:	f000 bc1a 	b.w	800852e <__retarget_lock_release_recursive>
 8007cfa:	bf00      	nop
 8007cfc:	20000e40 	.word	0x20000e40

08007d00 <_realloc_r>:
 8007d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d04:	4680      	mov	r8, r0
 8007d06:	4614      	mov	r4, r2
 8007d08:	460e      	mov	r6, r1
 8007d0a:	b921      	cbnz	r1, 8007d16 <_realloc_r+0x16>
 8007d0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d10:	4611      	mov	r1, r2
 8007d12:	f7ff bdad 	b.w	8007870 <_malloc_r>
 8007d16:	b92a      	cbnz	r2, 8007d24 <_realloc_r+0x24>
 8007d18:	f7ff fd3e 	bl	8007798 <_free_r>
 8007d1c:	4625      	mov	r5, r4
 8007d1e:	4628      	mov	r0, r5
 8007d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d24:	f000 fc6a 	bl	80085fc <_malloc_usable_size_r>
 8007d28:	4284      	cmp	r4, r0
 8007d2a:	4607      	mov	r7, r0
 8007d2c:	d802      	bhi.n	8007d34 <_realloc_r+0x34>
 8007d2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007d32:	d812      	bhi.n	8007d5a <_realloc_r+0x5a>
 8007d34:	4621      	mov	r1, r4
 8007d36:	4640      	mov	r0, r8
 8007d38:	f7ff fd9a 	bl	8007870 <_malloc_r>
 8007d3c:	4605      	mov	r5, r0
 8007d3e:	2800      	cmp	r0, #0
 8007d40:	d0ed      	beq.n	8007d1e <_realloc_r+0x1e>
 8007d42:	42bc      	cmp	r4, r7
 8007d44:	4622      	mov	r2, r4
 8007d46:	4631      	mov	r1, r6
 8007d48:	bf28      	it	cs
 8007d4a:	463a      	movcs	r2, r7
 8007d4c:	f7fd fe62 	bl	8005a14 <memcpy>
 8007d50:	4631      	mov	r1, r6
 8007d52:	4640      	mov	r0, r8
 8007d54:	f7ff fd20 	bl	8007798 <_free_r>
 8007d58:	e7e1      	b.n	8007d1e <_realloc_r+0x1e>
 8007d5a:	4635      	mov	r5, r6
 8007d5c:	e7df      	b.n	8007d1e <_realloc_r+0x1e>

08007d5e <__sfputc_r>:
 8007d5e:	6893      	ldr	r3, [r2, #8]
 8007d60:	3b01      	subs	r3, #1
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	b410      	push	{r4}
 8007d66:	6093      	str	r3, [r2, #8]
 8007d68:	da08      	bge.n	8007d7c <__sfputc_r+0x1e>
 8007d6a:	6994      	ldr	r4, [r2, #24]
 8007d6c:	42a3      	cmp	r3, r4
 8007d6e:	db01      	blt.n	8007d74 <__sfputc_r+0x16>
 8007d70:	290a      	cmp	r1, #10
 8007d72:	d103      	bne.n	8007d7c <__sfputc_r+0x1e>
 8007d74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d78:	f000 b94a 	b.w	8008010 <__swbuf_r>
 8007d7c:	6813      	ldr	r3, [r2, #0]
 8007d7e:	1c58      	adds	r0, r3, #1
 8007d80:	6010      	str	r0, [r2, #0]
 8007d82:	7019      	strb	r1, [r3, #0]
 8007d84:	4608      	mov	r0, r1
 8007d86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d8a:	4770      	bx	lr

08007d8c <__sfputs_r>:
 8007d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d8e:	4606      	mov	r6, r0
 8007d90:	460f      	mov	r7, r1
 8007d92:	4614      	mov	r4, r2
 8007d94:	18d5      	adds	r5, r2, r3
 8007d96:	42ac      	cmp	r4, r5
 8007d98:	d101      	bne.n	8007d9e <__sfputs_r+0x12>
 8007d9a:	2000      	movs	r0, #0
 8007d9c:	e007      	b.n	8007dae <__sfputs_r+0x22>
 8007d9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007da2:	463a      	mov	r2, r7
 8007da4:	4630      	mov	r0, r6
 8007da6:	f7ff ffda 	bl	8007d5e <__sfputc_r>
 8007daa:	1c43      	adds	r3, r0, #1
 8007dac:	d1f3      	bne.n	8007d96 <__sfputs_r+0xa>
 8007dae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007db0 <_vfiprintf_r>:
 8007db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007db4:	460d      	mov	r5, r1
 8007db6:	b09d      	sub	sp, #116	; 0x74
 8007db8:	4614      	mov	r4, r2
 8007dba:	4698      	mov	r8, r3
 8007dbc:	4606      	mov	r6, r0
 8007dbe:	b118      	cbz	r0, 8007dc8 <_vfiprintf_r+0x18>
 8007dc0:	6983      	ldr	r3, [r0, #24]
 8007dc2:	b90b      	cbnz	r3, 8007dc8 <_vfiprintf_r+0x18>
 8007dc4:	f000 fb14 	bl	80083f0 <__sinit>
 8007dc8:	4b89      	ldr	r3, [pc, #548]	; (8007ff0 <_vfiprintf_r+0x240>)
 8007dca:	429d      	cmp	r5, r3
 8007dcc:	d11b      	bne.n	8007e06 <_vfiprintf_r+0x56>
 8007dce:	6875      	ldr	r5, [r6, #4]
 8007dd0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007dd2:	07d9      	lsls	r1, r3, #31
 8007dd4:	d405      	bmi.n	8007de2 <_vfiprintf_r+0x32>
 8007dd6:	89ab      	ldrh	r3, [r5, #12]
 8007dd8:	059a      	lsls	r2, r3, #22
 8007dda:	d402      	bmi.n	8007de2 <_vfiprintf_r+0x32>
 8007ddc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007dde:	f000 fba5 	bl	800852c <__retarget_lock_acquire_recursive>
 8007de2:	89ab      	ldrh	r3, [r5, #12]
 8007de4:	071b      	lsls	r3, r3, #28
 8007de6:	d501      	bpl.n	8007dec <_vfiprintf_r+0x3c>
 8007de8:	692b      	ldr	r3, [r5, #16]
 8007dea:	b9eb      	cbnz	r3, 8007e28 <_vfiprintf_r+0x78>
 8007dec:	4629      	mov	r1, r5
 8007dee:	4630      	mov	r0, r6
 8007df0:	f000 f96e 	bl	80080d0 <__swsetup_r>
 8007df4:	b1c0      	cbz	r0, 8007e28 <_vfiprintf_r+0x78>
 8007df6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007df8:	07dc      	lsls	r4, r3, #31
 8007dfa:	d50e      	bpl.n	8007e1a <_vfiprintf_r+0x6a>
 8007dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8007e00:	b01d      	add	sp, #116	; 0x74
 8007e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e06:	4b7b      	ldr	r3, [pc, #492]	; (8007ff4 <_vfiprintf_r+0x244>)
 8007e08:	429d      	cmp	r5, r3
 8007e0a:	d101      	bne.n	8007e10 <_vfiprintf_r+0x60>
 8007e0c:	68b5      	ldr	r5, [r6, #8]
 8007e0e:	e7df      	b.n	8007dd0 <_vfiprintf_r+0x20>
 8007e10:	4b79      	ldr	r3, [pc, #484]	; (8007ff8 <_vfiprintf_r+0x248>)
 8007e12:	429d      	cmp	r5, r3
 8007e14:	bf08      	it	eq
 8007e16:	68f5      	ldreq	r5, [r6, #12]
 8007e18:	e7da      	b.n	8007dd0 <_vfiprintf_r+0x20>
 8007e1a:	89ab      	ldrh	r3, [r5, #12]
 8007e1c:	0598      	lsls	r0, r3, #22
 8007e1e:	d4ed      	bmi.n	8007dfc <_vfiprintf_r+0x4c>
 8007e20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e22:	f000 fb84 	bl	800852e <__retarget_lock_release_recursive>
 8007e26:	e7e9      	b.n	8007dfc <_vfiprintf_r+0x4c>
 8007e28:	2300      	movs	r3, #0
 8007e2a:	9309      	str	r3, [sp, #36]	; 0x24
 8007e2c:	2320      	movs	r3, #32
 8007e2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e32:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e36:	2330      	movs	r3, #48	; 0x30
 8007e38:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007ffc <_vfiprintf_r+0x24c>
 8007e3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e40:	f04f 0901 	mov.w	r9, #1
 8007e44:	4623      	mov	r3, r4
 8007e46:	469a      	mov	sl, r3
 8007e48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e4c:	b10a      	cbz	r2, 8007e52 <_vfiprintf_r+0xa2>
 8007e4e:	2a25      	cmp	r2, #37	; 0x25
 8007e50:	d1f9      	bne.n	8007e46 <_vfiprintf_r+0x96>
 8007e52:	ebba 0b04 	subs.w	fp, sl, r4
 8007e56:	d00b      	beq.n	8007e70 <_vfiprintf_r+0xc0>
 8007e58:	465b      	mov	r3, fp
 8007e5a:	4622      	mov	r2, r4
 8007e5c:	4629      	mov	r1, r5
 8007e5e:	4630      	mov	r0, r6
 8007e60:	f7ff ff94 	bl	8007d8c <__sfputs_r>
 8007e64:	3001      	adds	r0, #1
 8007e66:	f000 80aa 	beq.w	8007fbe <_vfiprintf_r+0x20e>
 8007e6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e6c:	445a      	add	r2, fp
 8007e6e:	9209      	str	r2, [sp, #36]	; 0x24
 8007e70:	f89a 3000 	ldrb.w	r3, [sl]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	f000 80a2 	beq.w	8007fbe <_vfiprintf_r+0x20e>
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8007e80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e84:	f10a 0a01 	add.w	sl, sl, #1
 8007e88:	9304      	str	r3, [sp, #16]
 8007e8a:	9307      	str	r3, [sp, #28]
 8007e8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e90:	931a      	str	r3, [sp, #104]	; 0x68
 8007e92:	4654      	mov	r4, sl
 8007e94:	2205      	movs	r2, #5
 8007e96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e9a:	4858      	ldr	r0, [pc, #352]	; (8007ffc <_vfiprintf_r+0x24c>)
 8007e9c:	f7f8 f9c0 	bl	8000220 <memchr>
 8007ea0:	9a04      	ldr	r2, [sp, #16]
 8007ea2:	b9d8      	cbnz	r0, 8007edc <_vfiprintf_r+0x12c>
 8007ea4:	06d1      	lsls	r1, r2, #27
 8007ea6:	bf44      	itt	mi
 8007ea8:	2320      	movmi	r3, #32
 8007eaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007eae:	0713      	lsls	r3, r2, #28
 8007eb0:	bf44      	itt	mi
 8007eb2:	232b      	movmi	r3, #43	; 0x2b
 8007eb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007eb8:	f89a 3000 	ldrb.w	r3, [sl]
 8007ebc:	2b2a      	cmp	r3, #42	; 0x2a
 8007ebe:	d015      	beq.n	8007eec <_vfiprintf_r+0x13c>
 8007ec0:	9a07      	ldr	r2, [sp, #28]
 8007ec2:	4654      	mov	r4, sl
 8007ec4:	2000      	movs	r0, #0
 8007ec6:	f04f 0c0a 	mov.w	ip, #10
 8007eca:	4621      	mov	r1, r4
 8007ecc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ed0:	3b30      	subs	r3, #48	; 0x30
 8007ed2:	2b09      	cmp	r3, #9
 8007ed4:	d94e      	bls.n	8007f74 <_vfiprintf_r+0x1c4>
 8007ed6:	b1b0      	cbz	r0, 8007f06 <_vfiprintf_r+0x156>
 8007ed8:	9207      	str	r2, [sp, #28]
 8007eda:	e014      	b.n	8007f06 <_vfiprintf_r+0x156>
 8007edc:	eba0 0308 	sub.w	r3, r0, r8
 8007ee0:	fa09 f303 	lsl.w	r3, r9, r3
 8007ee4:	4313      	orrs	r3, r2
 8007ee6:	9304      	str	r3, [sp, #16]
 8007ee8:	46a2      	mov	sl, r4
 8007eea:	e7d2      	b.n	8007e92 <_vfiprintf_r+0xe2>
 8007eec:	9b03      	ldr	r3, [sp, #12]
 8007eee:	1d19      	adds	r1, r3, #4
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	9103      	str	r1, [sp, #12]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	bfbb      	ittet	lt
 8007ef8:	425b      	neglt	r3, r3
 8007efa:	f042 0202 	orrlt.w	r2, r2, #2
 8007efe:	9307      	strge	r3, [sp, #28]
 8007f00:	9307      	strlt	r3, [sp, #28]
 8007f02:	bfb8      	it	lt
 8007f04:	9204      	strlt	r2, [sp, #16]
 8007f06:	7823      	ldrb	r3, [r4, #0]
 8007f08:	2b2e      	cmp	r3, #46	; 0x2e
 8007f0a:	d10c      	bne.n	8007f26 <_vfiprintf_r+0x176>
 8007f0c:	7863      	ldrb	r3, [r4, #1]
 8007f0e:	2b2a      	cmp	r3, #42	; 0x2a
 8007f10:	d135      	bne.n	8007f7e <_vfiprintf_r+0x1ce>
 8007f12:	9b03      	ldr	r3, [sp, #12]
 8007f14:	1d1a      	adds	r2, r3, #4
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	9203      	str	r2, [sp, #12]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	bfb8      	it	lt
 8007f1e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f22:	3402      	adds	r4, #2
 8007f24:	9305      	str	r3, [sp, #20]
 8007f26:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800800c <_vfiprintf_r+0x25c>
 8007f2a:	7821      	ldrb	r1, [r4, #0]
 8007f2c:	2203      	movs	r2, #3
 8007f2e:	4650      	mov	r0, sl
 8007f30:	f7f8 f976 	bl	8000220 <memchr>
 8007f34:	b140      	cbz	r0, 8007f48 <_vfiprintf_r+0x198>
 8007f36:	2340      	movs	r3, #64	; 0x40
 8007f38:	eba0 000a 	sub.w	r0, r0, sl
 8007f3c:	fa03 f000 	lsl.w	r0, r3, r0
 8007f40:	9b04      	ldr	r3, [sp, #16]
 8007f42:	4303      	orrs	r3, r0
 8007f44:	3401      	adds	r4, #1
 8007f46:	9304      	str	r3, [sp, #16]
 8007f48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f4c:	482c      	ldr	r0, [pc, #176]	; (8008000 <_vfiprintf_r+0x250>)
 8007f4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f52:	2206      	movs	r2, #6
 8007f54:	f7f8 f964 	bl	8000220 <memchr>
 8007f58:	2800      	cmp	r0, #0
 8007f5a:	d03f      	beq.n	8007fdc <_vfiprintf_r+0x22c>
 8007f5c:	4b29      	ldr	r3, [pc, #164]	; (8008004 <_vfiprintf_r+0x254>)
 8007f5e:	bb1b      	cbnz	r3, 8007fa8 <_vfiprintf_r+0x1f8>
 8007f60:	9b03      	ldr	r3, [sp, #12]
 8007f62:	3307      	adds	r3, #7
 8007f64:	f023 0307 	bic.w	r3, r3, #7
 8007f68:	3308      	adds	r3, #8
 8007f6a:	9303      	str	r3, [sp, #12]
 8007f6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f6e:	443b      	add	r3, r7
 8007f70:	9309      	str	r3, [sp, #36]	; 0x24
 8007f72:	e767      	b.n	8007e44 <_vfiprintf_r+0x94>
 8007f74:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f78:	460c      	mov	r4, r1
 8007f7a:	2001      	movs	r0, #1
 8007f7c:	e7a5      	b.n	8007eca <_vfiprintf_r+0x11a>
 8007f7e:	2300      	movs	r3, #0
 8007f80:	3401      	adds	r4, #1
 8007f82:	9305      	str	r3, [sp, #20]
 8007f84:	4619      	mov	r1, r3
 8007f86:	f04f 0c0a 	mov.w	ip, #10
 8007f8a:	4620      	mov	r0, r4
 8007f8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f90:	3a30      	subs	r2, #48	; 0x30
 8007f92:	2a09      	cmp	r2, #9
 8007f94:	d903      	bls.n	8007f9e <_vfiprintf_r+0x1ee>
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d0c5      	beq.n	8007f26 <_vfiprintf_r+0x176>
 8007f9a:	9105      	str	r1, [sp, #20]
 8007f9c:	e7c3      	b.n	8007f26 <_vfiprintf_r+0x176>
 8007f9e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007fa2:	4604      	mov	r4, r0
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	e7f0      	b.n	8007f8a <_vfiprintf_r+0x1da>
 8007fa8:	ab03      	add	r3, sp, #12
 8007faa:	9300      	str	r3, [sp, #0]
 8007fac:	462a      	mov	r2, r5
 8007fae:	4b16      	ldr	r3, [pc, #88]	; (8008008 <_vfiprintf_r+0x258>)
 8007fb0:	a904      	add	r1, sp, #16
 8007fb2:	4630      	mov	r0, r6
 8007fb4:	f7fd fde4 	bl	8005b80 <_printf_float>
 8007fb8:	4607      	mov	r7, r0
 8007fba:	1c78      	adds	r0, r7, #1
 8007fbc:	d1d6      	bne.n	8007f6c <_vfiprintf_r+0x1bc>
 8007fbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007fc0:	07d9      	lsls	r1, r3, #31
 8007fc2:	d405      	bmi.n	8007fd0 <_vfiprintf_r+0x220>
 8007fc4:	89ab      	ldrh	r3, [r5, #12]
 8007fc6:	059a      	lsls	r2, r3, #22
 8007fc8:	d402      	bmi.n	8007fd0 <_vfiprintf_r+0x220>
 8007fca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007fcc:	f000 faaf 	bl	800852e <__retarget_lock_release_recursive>
 8007fd0:	89ab      	ldrh	r3, [r5, #12]
 8007fd2:	065b      	lsls	r3, r3, #25
 8007fd4:	f53f af12 	bmi.w	8007dfc <_vfiprintf_r+0x4c>
 8007fd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007fda:	e711      	b.n	8007e00 <_vfiprintf_r+0x50>
 8007fdc:	ab03      	add	r3, sp, #12
 8007fde:	9300      	str	r3, [sp, #0]
 8007fe0:	462a      	mov	r2, r5
 8007fe2:	4b09      	ldr	r3, [pc, #36]	; (8008008 <_vfiprintf_r+0x258>)
 8007fe4:	a904      	add	r1, sp, #16
 8007fe6:	4630      	mov	r0, r6
 8007fe8:	f7fe f86e 	bl	80060c8 <_printf_i>
 8007fec:	e7e4      	b.n	8007fb8 <_vfiprintf_r+0x208>
 8007fee:	bf00      	nop
 8007ff0:	08008c54 	.word	0x08008c54
 8007ff4:	08008c74 	.word	0x08008c74
 8007ff8:	08008c34 	.word	0x08008c34
 8007ffc:	08008adc 	.word	0x08008adc
 8008000:	08008ae6 	.word	0x08008ae6
 8008004:	08005b81 	.word	0x08005b81
 8008008:	08007d8d 	.word	0x08007d8d
 800800c:	08008ae2 	.word	0x08008ae2

08008010 <__swbuf_r>:
 8008010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008012:	460e      	mov	r6, r1
 8008014:	4614      	mov	r4, r2
 8008016:	4605      	mov	r5, r0
 8008018:	b118      	cbz	r0, 8008022 <__swbuf_r+0x12>
 800801a:	6983      	ldr	r3, [r0, #24]
 800801c:	b90b      	cbnz	r3, 8008022 <__swbuf_r+0x12>
 800801e:	f000 f9e7 	bl	80083f0 <__sinit>
 8008022:	4b21      	ldr	r3, [pc, #132]	; (80080a8 <__swbuf_r+0x98>)
 8008024:	429c      	cmp	r4, r3
 8008026:	d12b      	bne.n	8008080 <__swbuf_r+0x70>
 8008028:	686c      	ldr	r4, [r5, #4]
 800802a:	69a3      	ldr	r3, [r4, #24]
 800802c:	60a3      	str	r3, [r4, #8]
 800802e:	89a3      	ldrh	r3, [r4, #12]
 8008030:	071a      	lsls	r2, r3, #28
 8008032:	d52f      	bpl.n	8008094 <__swbuf_r+0x84>
 8008034:	6923      	ldr	r3, [r4, #16]
 8008036:	b36b      	cbz	r3, 8008094 <__swbuf_r+0x84>
 8008038:	6923      	ldr	r3, [r4, #16]
 800803a:	6820      	ldr	r0, [r4, #0]
 800803c:	1ac0      	subs	r0, r0, r3
 800803e:	6963      	ldr	r3, [r4, #20]
 8008040:	b2f6      	uxtb	r6, r6
 8008042:	4283      	cmp	r3, r0
 8008044:	4637      	mov	r7, r6
 8008046:	dc04      	bgt.n	8008052 <__swbuf_r+0x42>
 8008048:	4621      	mov	r1, r4
 800804a:	4628      	mov	r0, r5
 800804c:	f000 f93c 	bl	80082c8 <_fflush_r>
 8008050:	bb30      	cbnz	r0, 80080a0 <__swbuf_r+0x90>
 8008052:	68a3      	ldr	r3, [r4, #8]
 8008054:	3b01      	subs	r3, #1
 8008056:	60a3      	str	r3, [r4, #8]
 8008058:	6823      	ldr	r3, [r4, #0]
 800805a:	1c5a      	adds	r2, r3, #1
 800805c:	6022      	str	r2, [r4, #0]
 800805e:	701e      	strb	r6, [r3, #0]
 8008060:	6963      	ldr	r3, [r4, #20]
 8008062:	3001      	adds	r0, #1
 8008064:	4283      	cmp	r3, r0
 8008066:	d004      	beq.n	8008072 <__swbuf_r+0x62>
 8008068:	89a3      	ldrh	r3, [r4, #12]
 800806a:	07db      	lsls	r3, r3, #31
 800806c:	d506      	bpl.n	800807c <__swbuf_r+0x6c>
 800806e:	2e0a      	cmp	r6, #10
 8008070:	d104      	bne.n	800807c <__swbuf_r+0x6c>
 8008072:	4621      	mov	r1, r4
 8008074:	4628      	mov	r0, r5
 8008076:	f000 f927 	bl	80082c8 <_fflush_r>
 800807a:	b988      	cbnz	r0, 80080a0 <__swbuf_r+0x90>
 800807c:	4638      	mov	r0, r7
 800807e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008080:	4b0a      	ldr	r3, [pc, #40]	; (80080ac <__swbuf_r+0x9c>)
 8008082:	429c      	cmp	r4, r3
 8008084:	d101      	bne.n	800808a <__swbuf_r+0x7a>
 8008086:	68ac      	ldr	r4, [r5, #8]
 8008088:	e7cf      	b.n	800802a <__swbuf_r+0x1a>
 800808a:	4b09      	ldr	r3, [pc, #36]	; (80080b0 <__swbuf_r+0xa0>)
 800808c:	429c      	cmp	r4, r3
 800808e:	bf08      	it	eq
 8008090:	68ec      	ldreq	r4, [r5, #12]
 8008092:	e7ca      	b.n	800802a <__swbuf_r+0x1a>
 8008094:	4621      	mov	r1, r4
 8008096:	4628      	mov	r0, r5
 8008098:	f000 f81a 	bl	80080d0 <__swsetup_r>
 800809c:	2800      	cmp	r0, #0
 800809e:	d0cb      	beq.n	8008038 <__swbuf_r+0x28>
 80080a0:	f04f 37ff 	mov.w	r7, #4294967295
 80080a4:	e7ea      	b.n	800807c <__swbuf_r+0x6c>
 80080a6:	bf00      	nop
 80080a8:	08008c54 	.word	0x08008c54
 80080ac:	08008c74 	.word	0x08008c74
 80080b0:	08008c34 	.word	0x08008c34

080080b4 <__ascii_wctomb>:
 80080b4:	b149      	cbz	r1, 80080ca <__ascii_wctomb+0x16>
 80080b6:	2aff      	cmp	r2, #255	; 0xff
 80080b8:	bf85      	ittet	hi
 80080ba:	238a      	movhi	r3, #138	; 0x8a
 80080bc:	6003      	strhi	r3, [r0, #0]
 80080be:	700a      	strbls	r2, [r1, #0]
 80080c0:	f04f 30ff 	movhi.w	r0, #4294967295
 80080c4:	bf98      	it	ls
 80080c6:	2001      	movls	r0, #1
 80080c8:	4770      	bx	lr
 80080ca:	4608      	mov	r0, r1
 80080cc:	4770      	bx	lr
	...

080080d0 <__swsetup_r>:
 80080d0:	4b32      	ldr	r3, [pc, #200]	; (800819c <__swsetup_r+0xcc>)
 80080d2:	b570      	push	{r4, r5, r6, lr}
 80080d4:	681d      	ldr	r5, [r3, #0]
 80080d6:	4606      	mov	r6, r0
 80080d8:	460c      	mov	r4, r1
 80080da:	b125      	cbz	r5, 80080e6 <__swsetup_r+0x16>
 80080dc:	69ab      	ldr	r3, [r5, #24]
 80080de:	b913      	cbnz	r3, 80080e6 <__swsetup_r+0x16>
 80080e0:	4628      	mov	r0, r5
 80080e2:	f000 f985 	bl	80083f0 <__sinit>
 80080e6:	4b2e      	ldr	r3, [pc, #184]	; (80081a0 <__swsetup_r+0xd0>)
 80080e8:	429c      	cmp	r4, r3
 80080ea:	d10f      	bne.n	800810c <__swsetup_r+0x3c>
 80080ec:	686c      	ldr	r4, [r5, #4]
 80080ee:	89a3      	ldrh	r3, [r4, #12]
 80080f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80080f4:	0719      	lsls	r1, r3, #28
 80080f6:	d42c      	bmi.n	8008152 <__swsetup_r+0x82>
 80080f8:	06dd      	lsls	r5, r3, #27
 80080fa:	d411      	bmi.n	8008120 <__swsetup_r+0x50>
 80080fc:	2309      	movs	r3, #9
 80080fe:	6033      	str	r3, [r6, #0]
 8008100:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008104:	81a3      	strh	r3, [r4, #12]
 8008106:	f04f 30ff 	mov.w	r0, #4294967295
 800810a:	e03e      	b.n	800818a <__swsetup_r+0xba>
 800810c:	4b25      	ldr	r3, [pc, #148]	; (80081a4 <__swsetup_r+0xd4>)
 800810e:	429c      	cmp	r4, r3
 8008110:	d101      	bne.n	8008116 <__swsetup_r+0x46>
 8008112:	68ac      	ldr	r4, [r5, #8]
 8008114:	e7eb      	b.n	80080ee <__swsetup_r+0x1e>
 8008116:	4b24      	ldr	r3, [pc, #144]	; (80081a8 <__swsetup_r+0xd8>)
 8008118:	429c      	cmp	r4, r3
 800811a:	bf08      	it	eq
 800811c:	68ec      	ldreq	r4, [r5, #12]
 800811e:	e7e6      	b.n	80080ee <__swsetup_r+0x1e>
 8008120:	0758      	lsls	r0, r3, #29
 8008122:	d512      	bpl.n	800814a <__swsetup_r+0x7a>
 8008124:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008126:	b141      	cbz	r1, 800813a <__swsetup_r+0x6a>
 8008128:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800812c:	4299      	cmp	r1, r3
 800812e:	d002      	beq.n	8008136 <__swsetup_r+0x66>
 8008130:	4630      	mov	r0, r6
 8008132:	f7ff fb31 	bl	8007798 <_free_r>
 8008136:	2300      	movs	r3, #0
 8008138:	6363      	str	r3, [r4, #52]	; 0x34
 800813a:	89a3      	ldrh	r3, [r4, #12]
 800813c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008140:	81a3      	strh	r3, [r4, #12]
 8008142:	2300      	movs	r3, #0
 8008144:	6063      	str	r3, [r4, #4]
 8008146:	6923      	ldr	r3, [r4, #16]
 8008148:	6023      	str	r3, [r4, #0]
 800814a:	89a3      	ldrh	r3, [r4, #12]
 800814c:	f043 0308 	orr.w	r3, r3, #8
 8008150:	81a3      	strh	r3, [r4, #12]
 8008152:	6923      	ldr	r3, [r4, #16]
 8008154:	b94b      	cbnz	r3, 800816a <__swsetup_r+0x9a>
 8008156:	89a3      	ldrh	r3, [r4, #12]
 8008158:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800815c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008160:	d003      	beq.n	800816a <__swsetup_r+0x9a>
 8008162:	4621      	mov	r1, r4
 8008164:	4630      	mov	r0, r6
 8008166:	f000 fa09 	bl	800857c <__smakebuf_r>
 800816a:	89a0      	ldrh	r0, [r4, #12]
 800816c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008170:	f010 0301 	ands.w	r3, r0, #1
 8008174:	d00a      	beq.n	800818c <__swsetup_r+0xbc>
 8008176:	2300      	movs	r3, #0
 8008178:	60a3      	str	r3, [r4, #8]
 800817a:	6963      	ldr	r3, [r4, #20]
 800817c:	425b      	negs	r3, r3
 800817e:	61a3      	str	r3, [r4, #24]
 8008180:	6923      	ldr	r3, [r4, #16]
 8008182:	b943      	cbnz	r3, 8008196 <__swsetup_r+0xc6>
 8008184:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008188:	d1ba      	bne.n	8008100 <__swsetup_r+0x30>
 800818a:	bd70      	pop	{r4, r5, r6, pc}
 800818c:	0781      	lsls	r1, r0, #30
 800818e:	bf58      	it	pl
 8008190:	6963      	ldrpl	r3, [r4, #20]
 8008192:	60a3      	str	r3, [r4, #8]
 8008194:	e7f4      	b.n	8008180 <__swsetup_r+0xb0>
 8008196:	2000      	movs	r0, #0
 8008198:	e7f7      	b.n	800818a <__swsetup_r+0xba>
 800819a:	bf00      	nop
 800819c:	2000000c 	.word	0x2000000c
 80081a0:	08008c54 	.word	0x08008c54
 80081a4:	08008c74 	.word	0x08008c74
 80081a8:	08008c34 	.word	0x08008c34

080081ac <abort>:
 80081ac:	b508      	push	{r3, lr}
 80081ae:	2006      	movs	r0, #6
 80081b0:	f000 fa54 	bl	800865c <raise>
 80081b4:	2001      	movs	r0, #1
 80081b6:	f7f9 fec3 	bl	8001f40 <_exit>
	...

080081bc <__sflush_r>:
 80081bc:	898a      	ldrh	r2, [r1, #12]
 80081be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081c2:	4605      	mov	r5, r0
 80081c4:	0710      	lsls	r0, r2, #28
 80081c6:	460c      	mov	r4, r1
 80081c8:	d458      	bmi.n	800827c <__sflush_r+0xc0>
 80081ca:	684b      	ldr	r3, [r1, #4]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	dc05      	bgt.n	80081dc <__sflush_r+0x20>
 80081d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	dc02      	bgt.n	80081dc <__sflush_r+0x20>
 80081d6:	2000      	movs	r0, #0
 80081d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80081de:	2e00      	cmp	r6, #0
 80081e0:	d0f9      	beq.n	80081d6 <__sflush_r+0x1a>
 80081e2:	2300      	movs	r3, #0
 80081e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80081e8:	682f      	ldr	r7, [r5, #0]
 80081ea:	602b      	str	r3, [r5, #0]
 80081ec:	d032      	beq.n	8008254 <__sflush_r+0x98>
 80081ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80081f0:	89a3      	ldrh	r3, [r4, #12]
 80081f2:	075a      	lsls	r2, r3, #29
 80081f4:	d505      	bpl.n	8008202 <__sflush_r+0x46>
 80081f6:	6863      	ldr	r3, [r4, #4]
 80081f8:	1ac0      	subs	r0, r0, r3
 80081fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80081fc:	b10b      	cbz	r3, 8008202 <__sflush_r+0x46>
 80081fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008200:	1ac0      	subs	r0, r0, r3
 8008202:	2300      	movs	r3, #0
 8008204:	4602      	mov	r2, r0
 8008206:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008208:	6a21      	ldr	r1, [r4, #32]
 800820a:	4628      	mov	r0, r5
 800820c:	47b0      	blx	r6
 800820e:	1c43      	adds	r3, r0, #1
 8008210:	89a3      	ldrh	r3, [r4, #12]
 8008212:	d106      	bne.n	8008222 <__sflush_r+0x66>
 8008214:	6829      	ldr	r1, [r5, #0]
 8008216:	291d      	cmp	r1, #29
 8008218:	d82c      	bhi.n	8008274 <__sflush_r+0xb8>
 800821a:	4a2a      	ldr	r2, [pc, #168]	; (80082c4 <__sflush_r+0x108>)
 800821c:	40ca      	lsrs	r2, r1
 800821e:	07d6      	lsls	r6, r2, #31
 8008220:	d528      	bpl.n	8008274 <__sflush_r+0xb8>
 8008222:	2200      	movs	r2, #0
 8008224:	6062      	str	r2, [r4, #4]
 8008226:	04d9      	lsls	r1, r3, #19
 8008228:	6922      	ldr	r2, [r4, #16]
 800822a:	6022      	str	r2, [r4, #0]
 800822c:	d504      	bpl.n	8008238 <__sflush_r+0x7c>
 800822e:	1c42      	adds	r2, r0, #1
 8008230:	d101      	bne.n	8008236 <__sflush_r+0x7a>
 8008232:	682b      	ldr	r3, [r5, #0]
 8008234:	b903      	cbnz	r3, 8008238 <__sflush_r+0x7c>
 8008236:	6560      	str	r0, [r4, #84]	; 0x54
 8008238:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800823a:	602f      	str	r7, [r5, #0]
 800823c:	2900      	cmp	r1, #0
 800823e:	d0ca      	beq.n	80081d6 <__sflush_r+0x1a>
 8008240:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008244:	4299      	cmp	r1, r3
 8008246:	d002      	beq.n	800824e <__sflush_r+0x92>
 8008248:	4628      	mov	r0, r5
 800824a:	f7ff faa5 	bl	8007798 <_free_r>
 800824e:	2000      	movs	r0, #0
 8008250:	6360      	str	r0, [r4, #52]	; 0x34
 8008252:	e7c1      	b.n	80081d8 <__sflush_r+0x1c>
 8008254:	6a21      	ldr	r1, [r4, #32]
 8008256:	2301      	movs	r3, #1
 8008258:	4628      	mov	r0, r5
 800825a:	47b0      	blx	r6
 800825c:	1c41      	adds	r1, r0, #1
 800825e:	d1c7      	bne.n	80081f0 <__sflush_r+0x34>
 8008260:	682b      	ldr	r3, [r5, #0]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d0c4      	beq.n	80081f0 <__sflush_r+0x34>
 8008266:	2b1d      	cmp	r3, #29
 8008268:	d001      	beq.n	800826e <__sflush_r+0xb2>
 800826a:	2b16      	cmp	r3, #22
 800826c:	d101      	bne.n	8008272 <__sflush_r+0xb6>
 800826e:	602f      	str	r7, [r5, #0]
 8008270:	e7b1      	b.n	80081d6 <__sflush_r+0x1a>
 8008272:	89a3      	ldrh	r3, [r4, #12]
 8008274:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008278:	81a3      	strh	r3, [r4, #12]
 800827a:	e7ad      	b.n	80081d8 <__sflush_r+0x1c>
 800827c:	690f      	ldr	r7, [r1, #16]
 800827e:	2f00      	cmp	r7, #0
 8008280:	d0a9      	beq.n	80081d6 <__sflush_r+0x1a>
 8008282:	0793      	lsls	r3, r2, #30
 8008284:	680e      	ldr	r6, [r1, #0]
 8008286:	bf08      	it	eq
 8008288:	694b      	ldreq	r3, [r1, #20]
 800828a:	600f      	str	r7, [r1, #0]
 800828c:	bf18      	it	ne
 800828e:	2300      	movne	r3, #0
 8008290:	eba6 0807 	sub.w	r8, r6, r7
 8008294:	608b      	str	r3, [r1, #8]
 8008296:	f1b8 0f00 	cmp.w	r8, #0
 800829a:	dd9c      	ble.n	80081d6 <__sflush_r+0x1a>
 800829c:	6a21      	ldr	r1, [r4, #32]
 800829e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80082a0:	4643      	mov	r3, r8
 80082a2:	463a      	mov	r2, r7
 80082a4:	4628      	mov	r0, r5
 80082a6:	47b0      	blx	r6
 80082a8:	2800      	cmp	r0, #0
 80082aa:	dc06      	bgt.n	80082ba <__sflush_r+0xfe>
 80082ac:	89a3      	ldrh	r3, [r4, #12]
 80082ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082b2:	81a3      	strh	r3, [r4, #12]
 80082b4:	f04f 30ff 	mov.w	r0, #4294967295
 80082b8:	e78e      	b.n	80081d8 <__sflush_r+0x1c>
 80082ba:	4407      	add	r7, r0
 80082bc:	eba8 0800 	sub.w	r8, r8, r0
 80082c0:	e7e9      	b.n	8008296 <__sflush_r+0xda>
 80082c2:	bf00      	nop
 80082c4:	20400001 	.word	0x20400001

080082c8 <_fflush_r>:
 80082c8:	b538      	push	{r3, r4, r5, lr}
 80082ca:	690b      	ldr	r3, [r1, #16]
 80082cc:	4605      	mov	r5, r0
 80082ce:	460c      	mov	r4, r1
 80082d0:	b913      	cbnz	r3, 80082d8 <_fflush_r+0x10>
 80082d2:	2500      	movs	r5, #0
 80082d4:	4628      	mov	r0, r5
 80082d6:	bd38      	pop	{r3, r4, r5, pc}
 80082d8:	b118      	cbz	r0, 80082e2 <_fflush_r+0x1a>
 80082da:	6983      	ldr	r3, [r0, #24]
 80082dc:	b90b      	cbnz	r3, 80082e2 <_fflush_r+0x1a>
 80082de:	f000 f887 	bl	80083f0 <__sinit>
 80082e2:	4b14      	ldr	r3, [pc, #80]	; (8008334 <_fflush_r+0x6c>)
 80082e4:	429c      	cmp	r4, r3
 80082e6:	d11b      	bne.n	8008320 <_fflush_r+0x58>
 80082e8:	686c      	ldr	r4, [r5, #4]
 80082ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d0ef      	beq.n	80082d2 <_fflush_r+0xa>
 80082f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80082f4:	07d0      	lsls	r0, r2, #31
 80082f6:	d404      	bmi.n	8008302 <_fflush_r+0x3a>
 80082f8:	0599      	lsls	r1, r3, #22
 80082fa:	d402      	bmi.n	8008302 <_fflush_r+0x3a>
 80082fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082fe:	f000 f915 	bl	800852c <__retarget_lock_acquire_recursive>
 8008302:	4628      	mov	r0, r5
 8008304:	4621      	mov	r1, r4
 8008306:	f7ff ff59 	bl	80081bc <__sflush_r>
 800830a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800830c:	07da      	lsls	r2, r3, #31
 800830e:	4605      	mov	r5, r0
 8008310:	d4e0      	bmi.n	80082d4 <_fflush_r+0xc>
 8008312:	89a3      	ldrh	r3, [r4, #12]
 8008314:	059b      	lsls	r3, r3, #22
 8008316:	d4dd      	bmi.n	80082d4 <_fflush_r+0xc>
 8008318:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800831a:	f000 f908 	bl	800852e <__retarget_lock_release_recursive>
 800831e:	e7d9      	b.n	80082d4 <_fflush_r+0xc>
 8008320:	4b05      	ldr	r3, [pc, #20]	; (8008338 <_fflush_r+0x70>)
 8008322:	429c      	cmp	r4, r3
 8008324:	d101      	bne.n	800832a <_fflush_r+0x62>
 8008326:	68ac      	ldr	r4, [r5, #8]
 8008328:	e7df      	b.n	80082ea <_fflush_r+0x22>
 800832a:	4b04      	ldr	r3, [pc, #16]	; (800833c <_fflush_r+0x74>)
 800832c:	429c      	cmp	r4, r3
 800832e:	bf08      	it	eq
 8008330:	68ec      	ldreq	r4, [r5, #12]
 8008332:	e7da      	b.n	80082ea <_fflush_r+0x22>
 8008334:	08008c54 	.word	0x08008c54
 8008338:	08008c74 	.word	0x08008c74
 800833c:	08008c34 	.word	0x08008c34

08008340 <std>:
 8008340:	2300      	movs	r3, #0
 8008342:	b510      	push	{r4, lr}
 8008344:	4604      	mov	r4, r0
 8008346:	e9c0 3300 	strd	r3, r3, [r0]
 800834a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800834e:	6083      	str	r3, [r0, #8]
 8008350:	8181      	strh	r1, [r0, #12]
 8008352:	6643      	str	r3, [r0, #100]	; 0x64
 8008354:	81c2      	strh	r2, [r0, #14]
 8008356:	6183      	str	r3, [r0, #24]
 8008358:	4619      	mov	r1, r3
 800835a:	2208      	movs	r2, #8
 800835c:	305c      	adds	r0, #92	; 0x5c
 800835e:	f7fd fb67 	bl	8005a30 <memset>
 8008362:	4b05      	ldr	r3, [pc, #20]	; (8008378 <std+0x38>)
 8008364:	6263      	str	r3, [r4, #36]	; 0x24
 8008366:	4b05      	ldr	r3, [pc, #20]	; (800837c <std+0x3c>)
 8008368:	62a3      	str	r3, [r4, #40]	; 0x28
 800836a:	4b05      	ldr	r3, [pc, #20]	; (8008380 <std+0x40>)
 800836c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800836e:	4b05      	ldr	r3, [pc, #20]	; (8008384 <std+0x44>)
 8008370:	6224      	str	r4, [r4, #32]
 8008372:	6323      	str	r3, [r4, #48]	; 0x30
 8008374:	bd10      	pop	{r4, pc}
 8008376:	bf00      	nop
 8008378:	08008695 	.word	0x08008695
 800837c:	080086b7 	.word	0x080086b7
 8008380:	080086ef 	.word	0x080086ef
 8008384:	08008713 	.word	0x08008713

08008388 <_cleanup_r>:
 8008388:	4901      	ldr	r1, [pc, #4]	; (8008390 <_cleanup_r+0x8>)
 800838a:	f000 b8af 	b.w	80084ec <_fwalk_reent>
 800838e:	bf00      	nop
 8008390:	080082c9 	.word	0x080082c9

08008394 <__sfmoreglue>:
 8008394:	b570      	push	{r4, r5, r6, lr}
 8008396:	2268      	movs	r2, #104	; 0x68
 8008398:	1e4d      	subs	r5, r1, #1
 800839a:	4355      	muls	r5, r2
 800839c:	460e      	mov	r6, r1
 800839e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80083a2:	f7ff fa65 	bl	8007870 <_malloc_r>
 80083a6:	4604      	mov	r4, r0
 80083a8:	b140      	cbz	r0, 80083bc <__sfmoreglue+0x28>
 80083aa:	2100      	movs	r1, #0
 80083ac:	e9c0 1600 	strd	r1, r6, [r0]
 80083b0:	300c      	adds	r0, #12
 80083b2:	60a0      	str	r0, [r4, #8]
 80083b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80083b8:	f7fd fb3a 	bl	8005a30 <memset>
 80083bc:	4620      	mov	r0, r4
 80083be:	bd70      	pop	{r4, r5, r6, pc}

080083c0 <__sfp_lock_acquire>:
 80083c0:	4801      	ldr	r0, [pc, #4]	; (80083c8 <__sfp_lock_acquire+0x8>)
 80083c2:	f000 b8b3 	b.w	800852c <__retarget_lock_acquire_recursive>
 80083c6:	bf00      	nop
 80083c8:	20000e41 	.word	0x20000e41

080083cc <__sfp_lock_release>:
 80083cc:	4801      	ldr	r0, [pc, #4]	; (80083d4 <__sfp_lock_release+0x8>)
 80083ce:	f000 b8ae 	b.w	800852e <__retarget_lock_release_recursive>
 80083d2:	bf00      	nop
 80083d4:	20000e41 	.word	0x20000e41

080083d8 <__sinit_lock_acquire>:
 80083d8:	4801      	ldr	r0, [pc, #4]	; (80083e0 <__sinit_lock_acquire+0x8>)
 80083da:	f000 b8a7 	b.w	800852c <__retarget_lock_acquire_recursive>
 80083de:	bf00      	nop
 80083e0:	20000e42 	.word	0x20000e42

080083e4 <__sinit_lock_release>:
 80083e4:	4801      	ldr	r0, [pc, #4]	; (80083ec <__sinit_lock_release+0x8>)
 80083e6:	f000 b8a2 	b.w	800852e <__retarget_lock_release_recursive>
 80083ea:	bf00      	nop
 80083ec:	20000e42 	.word	0x20000e42

080083f0 <__sinit>:
 80083f0:	b510      	push	{r4, lr}
 80083f2:	4604      	mov	r4, r0
 80083f4:	f7ff fff0 	bl	80083d8 <__sinit_lock_acquire>
 80083f8:	69a3      	ldr	r3, [r4, #24]
 80083fa:	b11b      	cbz	r3, 8008404 <__sinit+0x14>
 80083fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008400:	f7ff bff0 	b.w	80083e4 <__sinit_lock_release>
 8008404:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008408:	6523      	str	r3, [r4, #80]	; 0x50
 800840a:	4b13      	ldr	r3, [pc, #76]	; (8008458 <__sinit+0x68>)
 800840c:	4a13      	ldr	r2, [pc, #76]	; (800845c <__sinit+0x6c>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	62a2      	str	r2, [r4, #40]	; 0x28
 8008412:	42a3      	cmp	r3, r4
 8008414:	bf04      	itt	eq
 8008416:	2301      	moveq	r3, #1
 8008418:	61a3      	streq	r3, [r4, #24]
 800841a:	4620      	mov	r0, r4
 800841c:	f000 f820 	bl	8008460 <__sfp>
 8008420:	6060      	str	r0, [r4, #4]
 8008422:	4620      	mov	r0, r4
 8008424:	f000 f81c 	bl	8008460 <__sfp>
 8008428:	60a0      	str	r0, [r4, #8]
 800842a:	4620      	mov	r0, r4
 800842c:	f000 f818 	bl	8008460 <__sfp>
 8008430:	2200      	movs	r2, #0
 8008432:	60e0      	str	r0, [r4, #12]
 8008434:	2104      	movs	r1, #4
 8008436:	6860      	ldr	r0, [r4, #4]
 8008438:	f7ff ff82 	bl	8008340 <std>
 800843c:	68a0      	ldr	r0, [r4, #8]
 800843e:	2201      	movs	r2, #1
 8008440:	2109      	movs	r1, #9
 8008442:	f7ff ff7d 	bl	8008340 <std>
 8008446:	68e0      	ldr	r0, [r4, #12]
 8008448:	2202      	movs	r2, #2
 800844a:	2112      	movs	r1, #18
 800844c:	f7ff ff78 	bl	8008340 <std>
 8008450:	2301      	movs	r3, #1
 8008452:	61a3      	str	r3, [r4, #24]
 8008454:	e7d2      	b.n	80083fc <__sinit+0xc>
 8008456:	bf00      	nop
 8008458:	080088b8 	.word	0x080088b8
 800845c:	08008389 	.word	0x08008389

08008460 <__sfp>:
 8008460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008462:	4607      	mov	r7, r0
 8008464:	f7ff ffac 	bl	80083c0 <__sfp_lock_acquire>
 8008468:	4b1e      	ldr	r3, [pc, #120]	; (80084e4 <__sfp+0x84>)
 800846a:	681e      	ldr	r6, [r3, #0]
 800846c:	69b3      	ldr	r3, [r6, #24]
 800846e:	b913      	cbnz	r3, 8008476 <__sfp+0x16>
 8008470:	4630      	mov	r0, r6
 8008472:	f7ff ffbd 	bl	80083f0 <__sinit>
 8008476:	3648      	adds	r6, #72	; 0x48
 8008478:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800847c:	3b01      	subs	r3, #1
 800847e:	d503      	bpl.n	8008488 <__sfp+0x28>
 8008480:	6833      	ldr	r3, [r6, #0]
 8008482:	b30b      	cbz	r3, 80084c8 <__sfp+0x68>
 8008484:	6836      	ldr	r6, [r6, #0]
 8008486:	e7f7      	b.n	8008478 <__sfp+0x18>
 8008488:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800848c:	b9d5      	cbnz	r5, 80084c4 <__sfp+0x64>
 800848e:	4b16      	ldr	r3, [pc, #88]	; (80084e8 <__sfp+0x88>)
 8008490:	60e3      	str	r3, [r4, #12]
 8008492:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008496:	6665      	str	r5, [r4, #100]	; 0x64
 8008498:	f000 f847 	bl	800852a <__retarget_lock_init_recursive>
 800849c:	f7ff ff96 	bl	80083cc <__sfp_lock_release>
 80084a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80084a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80084a8:	6025      	str	r5, [r4, #0]
 80084aa:	61a5      	str	r5, [r4, #24]
 80084ac:	2208      	movs	r2, #8
 80084ae:	4629      	mov	r1, r5
 80084b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80084b4:	f7fd fabc 	bl	8005a30 <memset>
 80084b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80084bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80084c0:	4620      	mov	r0, r4
 80084c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084c4:	3468      	adds	r4, #104	; 0x68
 80084c6:	e7d9      	b.n	800847c <__sfp+0x1c>
 80084c8:	2104      	movs	r1, #4
 80084ca:	4638      	mov	r0, r7
 80084cc:	f7ff ff62 	bl	8008394 <__sfmoreglue>
 80084d0:	4604      	mov	r4, r0
 80084d2:	6030      	str	r0, [r6, #0]
 80084d4:	2800      	cmp	r0, #0
 80084d6:	d1d5      	bne.n	8008484 <__sfp+0x24>
 80084d8:	f7ff ff78 	bl	80083cc <__sfp_lock_release>
 80084dc:	230c      	movs	r3, #12
 80084de:	603b      	str	r3, [r7, #0]
 80084e0:	e7ee      	b.n	80084c0 <__sfp+0x60>
 80084e2:	bf00      	nop
 80084e4:	080088b8 	.word	0x080088b8
 80084e8:	ffff0001 	.word	0xffff0001

080084ec <_fwalk_reent>:
 80084ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084f0:	4606      	mov	r6, r0
 80084f2:	4688      	mov	r8, r1
 80084f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80084f8:	2700      	movs	r7, #0
 80084fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80084fe:	f1b9 0901 	subs.w	r9, r9, #1
 8008502:	d505      	bpl.n	8008510 <_fwalk_reent+0x24>
 8008504:	6824      	ldr	r4, [r4, #0]
 8008506:	2c00      	cmp	r4, #0
 8008508:	d1f7      	bne.n	80084fa <_fwalk_reent+0xe>
 800850a:	4638      	mov	r0, r7
 800850c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008510:	89ab      	ldrh	r3, [r5, #12]
 8008512:	2b01      	cmp	r3, #1
 8008514:	d907      	bls.n	8008526 <_fwalk_reent+0x3a>
 8008516:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800851a:	3301      	adds	r3, #1
 800851c:	d003      	beq.n	8008526 <_fwalk_reent+0x3a>
 800851e:	4629      	mov	r1, r5
 8008520:	4630      	mov	r0, r6
 8008522:	47c0      	blx	r8
 8008524:	4307      	orrs	r7, r0
 8008526:	3568      	adds	r5, #104	; 0x68
 8008528:	e7e9      	b.n	80084fe <_fwalk_reent+0x12>

0800852a <__retarget_lock_init_recursive>:
 800852a:	4770      	bx	lr

0800852c <__retarget_lock_acquire_recursive>:
 800852c:	4770      	bx	lr

0800852e <__retarget_lock_release_recursive>:
 800852e:	4770      	bx	lr

08008530 <__swhatbuf_r>:
 8008530:	b570      	push	{r4, r5, r6, lr}
 8008532:	460e      	mov	r6, r1
 8008534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008538:	2900      	cmp	r1, #0
 800853a:	b096      	sub	sp, #88	; 0x58
 800853c:	4614      	mov	r4, r2
 800853e:	461d      	mov	r5, r3
 8008540:	da08      	bge.n	8008554 <__swhatbuf_r+0x24>
 8008542:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008546:	2200      	movs	r2, #0
 8008548:	602a      	str	r2, [r5, #0]
 800854a:	061a      	lsls	r2, r3, #24
 800854c:	d410      	bmi.n	8008570 <__swhatbuf_r+0x40>
 800854e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008552:	e00e      	b.n	8008572 <__swhatbuf_r+0x42>
 8008554:	466a      	mov	r2, sp
 8008556:	f000 f903 	bl	8008760 <_fstat_r>
 800855a:	2800      	cmp	r0, #0
 800855c:	dbf1      	blt.n	8008542 <__swhatbuf_r+0x12>
 800855e:	9a01      	ldr	r2, [sp, #4]
 8008560:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008564:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008568:	425a      	negs	r2, r3
 800856a:	415a      	adcs	r2, r3
 800856c:	602a      	str	r2, [r5, #0]
 800856e:	e7ee      	b.n	800854e <__swhatbuf_r+0x1e>
 8008570:	2340      	movs	r3, #64	; 0x40
 8008572:	2000      	movs	r0, #0
 8008574:	6023      	str	r3, [r4, #0]
 8008576:	b016      	add	sp, #88	; 0x58
 8008578:	bd70      	pop	{r4, r5, r6, pc}
	...

0800857c <__smakebuf_r>:
 800857c:	898b      	ldrh	r3, [r1, #12]
 800857e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008580:	079d      	lsls	r5, r3, #30
 8008582:	4606      	mov	r6, r0
 8008584:	460c      	mov	r4, r1
 8008586:	d507      	bpl.n	8008598 <__smakebuf_r+0x1c>
 8008588:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800858c:	6023      	str	r3, [r4, #0]
 800858e:	6123      	str	r3, [r4, #16]
 8008590:	2301      	movs	r3, #1
 8008592:	6163      	str	r3, [r4, #20]
 8008594:	b002      	add	sp, #8
 8008596:	bd70      	pop	{r4, r5, r6, pc}
 8008598:	ab01      	add	r3, sp, #4
 800859a:	466a      	mov	r2, sp
 800859c:	f7ff ffc8 	bl	8008530 <__swhatbuf_r>
 80085a0:	9900      	ldr	r1, [sp, #0]
 80085a2:	4605      	mov	r5, r0
 80085a4:	4630      	mov	r0, r6
 80085a6:	f7ff f963 	bl	8007870 <_malloc_r>
 80085aa:	b948      	cbnz	r0, 80085c0 <__smakebuf_r+0x44>
 80085ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085b0:	059a      	lsls	r2, r3, #22
 80085b2:	d4ef      	bmi.n	8008594 <__smakebuf_r+0x18>
 80085b4:	f023 0303 	bic.w	r3, r3, #3
 80085b8:	f043 0302 	orr.w	r3, r3, #2
 80085bc:	81a3      	strh	r3, [r4, #12]
 80085be:	e7e3      	b.n	8008588 <__smakebuf_r+0xc>
 80085c0:	4b0d      	ldr	r3, [pc, #52]	; (80085f8 <__smakebuf_r+0x7c>)
 80085c2:	62b3      	str	r3, [r6, #40]	; 0x28
 80085c4:	89a3      	ldrh	r3, [r4, #12]
 80085c6:	6020      	str	r0, [r4, #0]
 80085c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085cc:	81a3      	strh	r3, [r4, #12]
 80085ce:	9b00      	ldr	r3, [sp, #0]
 80085d0:	6163      	str	r3, [r4, #20]
 80085d2:	9b01      	ldr	r3, [sp, #4]
 80085d4:	6120      	str	r0, [r4, #16]
 80085d6:	b15b      	cbz	r3, 80085f0 <__smakebuf_r+0x74>
 80085d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085dc:	4630      	mov	r0, r6
 80085de:	f000 f8d1 	bl	8008784 <_isatty_r>
 80085e2:	b128      	cbz	r0, 80085f0 <__smakebuf_r+0x74>
 80085e4:	89a3      	ldrh	r3, [r4, #12]
 80085e6:	f023 0303 	bic.w	r3, r3, #3
 80085ea:	f043 0301 	orr.w	r3, r3, #1
 80085ee:	81a3      	strh	r3, [r4, #12]
 80085f0:	89a0      	ldrh	r0, [r4, #12]
 80085f2:	4305      	orrs	r5, r0
 80085f4:	81a5      	strh	r5, [r4, #12]
 80085f6:	e7cd      	b.n	8008594 <__smakebuf_r+0x18>
 80085f8:	08008389 	.word	0x08008389

080085fc <_malloc_usable_size_r>:
 80085fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008600:	1f18      	subs	r0, r3, #4
 8008602:	2b00      	cmp	r3, #0
 8008604:	bfbc      	itt	lt
 8008606:	580b      	ldrlt	r3, [r1, r0]
 8008608:	18c0      	addlt	r0, r0, r3
 800860a:	4770      	bx	lr

0800860c <_raise_r>:
 800860c:	291f      	cmp	r1, #31
 800860e:	b538      	push	{r3, r4, r5, lr}
 8008610:	4604      	mov	r4, r0
 8008612:	460d      	mov	r5, r1
 8008614:	d904      	bls.n	8008620 <_raise_r+0x14>
 8008616:	2316      	movs	r3, #22
 8008618:	6003      	str	r3, [r0, #0]
 800861a:	f04f 30ff 	mov.w	r0, #4294967295
 800861e:	bd38      	pop	{r3, r4, r5, pc}
 8008620:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008622:	b112      	cbz	r2, 800862a <_raise_r+0x1e>
 8008624:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008628:	b94b      	cbnz	r3, 800863e <_raise_r+0x32>
 800862a:	4620      	mov	r0, r4
 800862c:	f000 f830 	bl	8008690 <_getpid_r>
 8008630:	462a      	mov	r2, r5
 8008632:	4601      	mov	r1, r0
 8008634:	4620      	mov	r0, r4
 8008636:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800863a:	f000 b817 	b.w	800866c <_kill_r>
 800863e:	2b01      	cmp	r3, #1
 8008640:	d00a      	beq.n	8008658 <_raise_r+0x4c>
 8008642:	1c59      	adds	r1, r3, #1
 8008644:	d103      	bne.n	800864e <_raise_r+0x42>
 8008646:	2316      	movs	r3, #22
 8008648:	6003      	str	r3, [r0, #0]
 800864a:	2001      	movs	r0, #1
 800864c:	e7e7      	b.n	800861e <_raise_r+0x12>
 800864e:	2400      	movs	r4, #0
 8008650:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008654:	4628      	mov	r0, r5
 8008656:	4798      	blx	r3
 8008658:	2000      	movs	r0, #0
 800865a:	e7e0      	b.n	800861e <_raise_r+0x12>

0800865c <raise>:
 800865c:	4b02      	ldr	r3, [pc, #8]	; (8008668 <raise+0xc>)
 800865e:	4601      	mov	r1, r0
 8008660:	6818      	ldr	r0, [r3, #0]
 8008662:	f7ff bfd3 	b.w	800860c <_raise_r>
 8008666:	bf00      	nop
 8008668:	2000000c 	.word	0x2000000c

0800866c <_kill_r>:
 800866c:	b538      	push	{r3, r4, r5, lr}
 800866e:	4d07      	ldr	r5, [pc, #28]	; (800868c <_kill_r+0x20>)
 8008670:	2300      	movs	r3, #0
 8008672:	4604      	mov	r4, r0
 8008674:	4608      	mov	r0, r1
 8008676:	4611      	mov	r1, r2
 8008678:	602b      	str	r3, [r5, #0]
 800867a:	f7f9 fc51 	bl	8001f20 <_kill>
 800867e:	1c43      	adds	r3, r0, #1
 8008680:	d102      	bne.n	8008688 <_kill_r+0x1c>
 8008682:	682b      	ldr	r3, [r5, #0]
 8008684:	b103      	cbz	r3, 8008688 <_kill_r+0x1c>
 8008686:	6023      	str	r3, [r4, #0]
 8008688:	bd38      	pop	{r3, r4, r5, pc}
 800868a:	bf00      	nop
 800868c:	20000e3c 	.word	0x20000e3c

08008690 <_getpid_r>:
 8008690:	f7f9 bc3e 	b.w	8001f10 <_getpid>

08008694 <__sread>:
 8008694:	b510      	push	{r4, lr}
 8008696:	460c      	mov	r4, r1
 8008698:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800869c:	f000 f894 	bl	80087c8 <_read_r>
 80086a0:	2800      	cmp	r0, #0
 80086a2:	bfab      	itete	ge
 80086a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80086a6:	89a3      	ldrhlt	r3, [r4, #12]
 80086a8:	181b      	addge	r3, r3, r0
 80086aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80086ae:	bfac      	ite	ge
 80086b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80086b2:	81a3      	strhlt	r3, [r4, #12]
 80086b4:	bd10      	pop	{r4, pc}

080086b6 <__swrite>:
 80086b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086ba:	461f      	mov	r7, r3
 80086bc:	898b      	ldrh	r3, [r1, #12]
 80086be:	05db      	lsls	r3, r3, #23
 80086c0:	4605      	mov	r5, r0
 80086c2:	460c      	mov	r4, r1
 80086c4:	4616      	mov	r6, r2
 80086c6:	d505      	bpl.n	80086d4 <__swrite+0x1e>
 80086c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086cc:	2302      	movs	r3, #2
 80086ce:	2200      	movs	r2, #0
 80086d0:	f000 f868 	bl	80087a4 <_lseek_r>
 80086d4:	89a3      	ldrh	r3, [r4, #12]
 80086d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80086de:	81a3      	strh	r3, [r4, #12]
 80086e0:	4632      	mov	r2, r6
 80086e2:	463b      	mov	r3, r7
 80086e4:	4628      	mov	r0, r5
 80086e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086ea:	f000 b817 	b.w	800871c <_write_r>

080086ee <__sseek>:
 80086ee:	b510      	push	{r4, lr}
 80086f0:	460c      	mov	r4, r1
 80086f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086f6:	f000 f855 	bl	80087a4 <_lseek_r>
 80086fa:	1c43      	adds	r3, r0, #1
 80086fc:	89a3      	ldrh	r3, [r4, #12]
 80086fe:	bf15      	itete	ne
 8008700:	6560      	strne	r0, [r4, #84]	; 0x54
 8008702:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008706:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800870a:	81a3      	strheq	r3, [r4, #12]
 800870c:	bf18      	it	ne
 800870e:	81a3      	strhne	r3, [r4, #12]
 8008710:	bd10      	pop	{r4, pc}

08008712 <__sclose>:
 8008712:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008716:	f000 b813 	b.w	8008740 <_close_r>
	...

0800871c <_write_r>:
 800871c:	b538      	push	{r3, r4, r5, lr}
 800871e:	4d07      	ldr	r5, [pc, #28]	; (800873c <_write_r+0x20>)
 8008720:	4604      	mov	r4, r0
 8008722:	4608      	mov	r0, r1
 8008724:	4611      	mov	r1, r2
 8008726:	2200      	movs	r2, #0
 8008728:	602a      	str	r2, [r5, #0]
 800872a:	461a      	mov	r2, r3
 800872c:	f7f9 fc2f 	bl	8001f8e <_write>
 8008730:	1c43      	adds	r3, r0, #1
 8008732:	d102      	bne.n	800873a <_write_r+0x1e>
 8008734:	682b      	ldr	r3, [r5, #0]
 8008736:	b103      	cbz	r3, 800873a <_write_r+0x1e>
 8008738:	6023      	str	r3, [r4, #0]
 800873a:	bd38      	pop	{r3, r4, r5, pc}
 800873c:	20000e3c 	.word	0x20000e3c

08008740 <_close_r>:
 8008740:	b538      	push	{r3, r4, r5, lr}
 8008742:	4d06      	ldr	r5, [pc, #24]	; (800875c <_close_r+0x1c>)
 8008744:	2300      	movs	r3, #0
 8008746:	4604      	mov	r4, r0
 8008748:	4608      	mov	r0, r1
 800874a:	602b      	str	r3, [r5, #0]
 800874c:	f7f9 fc3b 	bl	8001fc6 <_close>
 8008750:	1c43      	adds	r3, r0, #1
 8008752:	d102      	bne.n	800875a <_close_r+0x1a>
 8008754:	682b      	ldr	r3, [r5, #0]
 8008756:	b103      	cbz	r3, 800875a <_close_r+0x1a>
 8008758:	6023      	str	r3, [r4, #0]
 800875a:	bd38      	pop	{r3, r4, r5, pc}
 800875c:	20000e3c 	.word	0x20000e3c

08008760 <_fstat_r>:
 8008760:	b538      	push	{r3, r4, r5, lr}
 8008762:	4d07      	ldr	r5, [pc, #28]	; (8008780 <_fstat_r+0x20>)
 8008764:	2300      	movs	r3, #0
 8008766:	4604      	mov	r4, r0
 8008768:	4608      	mov	r0, r1
 800876a:	4611      	mov	r1, r2
 800876c:	602b      	str	r3, [r5, #0]
 800876e:	f7f9 fc36 	bl	8001fde <_fstat>
 8008772:	1c43      	adds	r3, r0, #1
 8008774:	d102      	bne.n	800877c <_fstat_r+0x1c>
 8008776:	682b      	ldr	r3, [r5, #0]
 8008778:	b103      	cbz	r3, 800877c <_fstat_r+0x1c>
 800877a:	6023      	str	r3, [r4, #0]
 800877c:	bd38      	pop	{r3, r4, r5, pc}
 800877e:	bf00      	nop
 8008780:	20000e3c 	.word	0x20000e3c

08008784 <_isatty_r>:
 8008784:	b538      	push	{r3, r4, r5, lr}
 8008786:	4d06      	ldr	r5, [pc, #24]	; (80087a0 <_isatty_r+0x1c>)
 8008788:	2300      	movs	r3, #0
 800878a:	4604      	mov	r4, r0
 800878c:	4608      	mov	r0, r1
 800878e:	602b      	str	r3, [r5, #0]
 8008790:	f7f9 fc35 	bl	8001ffe <_isatty>
 8008794:	1c43      	adds	r3, r0, #1
 8008796:	d102      	bne.n	800879e <_isatty_r+0x1a>
 8008798:	682b      	ldr	r3, [r5, #0]
 800879a:	b103      	cbz	r3, 800879e <_isatty_r+0x1a>
 800879c:	6023      	str	r3, [r4, #0]
 800879e:	bd38      	pop	{r3, r4, r5, pc}
 80087a0:	20000e3c 	.word	0x20000e3c

080087a4 <_lseek_r>:
 80087a4:	b538      	push	{r3, r4, r5, lr}
 80087a6:	4d07      	ldr	r5, [pc, #28]	; (80087c4 <_lseek_r+0x20>)
 80087a8:	4604      	mov	r4, r0
 80087aa:	4608      	mov	r0, r1
 80087ac:	4611      	mov	r1, r2
 80087ae:	2200      	movs	r2, #0
 80087b0:	602a      	str	r2, [r5, #0]
 80087b2:	461a      	mov	r2, r3
 80087b4:	f7f9 fc2e 	bl	8002014 <_lseek>
 80087b8:	1c43      	adds	r3, r0, #1
 80087ba:	d102      	bne.n	80087c2 <_lseek_r+0x1e>
 80087bc:	682b      	ldr	r3, [r5, #0]
 80087be:	b103      	cbz	r3, 80087c2 <_lseek_r+0x1e>
 80087c0:	6023      	str	r3, [r4, #0]
 80087c2:	bd38      	pop	{r3, r4, r5, pc}
 80087c4:	20000e3c 	.word	0x20000e3c

080087c8 <_read_r>:
 80087c8:	b538      	push	{r3, r4, r5, lr}
 80087ca:	4d07      	ldr	r5, [pc, #28]	; (80087e8 <_read_r+0x20>)
 80087cc:	4604      	mov	r4, r0
 80087ce:	4608      	mov	r0, r1
 80087d0:	4611      	mov	r1, r2
 80087d2:	2200      	movs	r2, #0
 80087d4:	602a      	str	r2, [r5, #0]
 80087d6:	461a      	mov	r2, r3
 80087d8:	f7f9 fbbc 	bl	8001f54 <_read>
 80087dc:	1c43      	adds	r3, r0, #1
 80087de:	d102      	bne.n	80087e6 <_read_r+0x1e>
 80087e0:	682b      	ldr	r3, [r5, #0]
 80087e2:	b103      	cbz	r3, 80087e6 <_read_r+0x1e>
 80087e4:	6023      	str	r3, [r4, #0]
 80087e6:	bd38      	pop	{r3, r4, r5, pc}
 80087e8:	20000e3c 	.word	0x20000e3c

080087ec <roundf>:
 80087ec:	ee10 0a10 	vmov	r0, s0
 80087f0:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 80087f4:	3a7f      	subs	r2, #127	; 0x7f
 80087f6:	2a16      	cmp	r2, #22
 80087f8:	dc15      	bgt.n	8008826 <roundf+0x3a>
 80087fa:	2a00      	cmp	r2, #0
 80087fc:	da08      	bge.n	8008810 <roundf+0x24>
 80087fe:	3201      	adds	r2, #1
 8008800:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8008804:	d101      	bne.n	800880a <roundf+0x1e>
 8008806:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800880a:	ee00 3a10 	vmov	s0, r3
 800880e:	4770      	bx	lr
 8008810:	4907      	ldr	r1, [pc, #28]	; (8008830 <roundf+0x44>)
 8008812:	4111      	asrs	r1, r2
 8008814:	4208      	tst	r0, r1
 8008816:	d0fa      	beq.n	800880e <roundf+0x22>
 8008818:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800881c:	4113      	asrs	r3, r2
 800881e:	4403      	add	r3, r0
 8008820:	ea23 0301 	bic.w	r3, r3, r1
 8008824:	e7f1      	b.n	800880a <roundf+0x1e>
 8008826:	2a80      	cmp	r2, #128	; 0x80
 8008828:	d1f1      	bne.n	800880e <roundf+0x22>
 800882a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800882e:	4770      	bx	lr
 8008830:	007fffff 	.word	0x007fffff

08008834 <_init>:
 8008834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008836:	bf00      	nop
 8008838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800883a:	bc08      	pop	{r3}
 800883c:	469e      	mov	lr, r3
 800883e:	4770      	bx	lr

08008840 <_fini>:
 8008840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008842:	bf00      	nop
 8008844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008846:	bc08      	pop	{r3}
 8008848:	469e      	mov	lr, r3
 800884a:	4770      	bx	lr
